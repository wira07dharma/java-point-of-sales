/* Generated by Together */
package com.dimata.aiso.entity.periode;

/* package java */
import java.io.*;
import java.util.*;

/* package qdep */
import com.dimata.util.Formater;
import com.dimata.aiso.db.*;
import com.dimata.qdep.entity.*;
import java.sql.ResultSet;

public class PstPeriode extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc {
    
    public static final String TBL_PERIODE = "aiso_periode";
    public static final int FLD_IDPERIODE = 0;
    public static final int FLD_TGLAWAL = 1;
    public static final int FLD_TGLAKHIR = 2;
    public static final int FLD_NAMA = 3;
    public static final int FLD_KETERANGAN = 4;
    public static final int FLD_POSTED = 5;
    public static final int FLD_TGLAKHIRENTRY = 6; 
    
    public static final int PERIOD_OPEN = 0;
    public static final int PERIOD_CLOSED = 1;
    public static final int PERIOD_PREPARE_OPEN = 2;
    
    public static String[] fieldNames = {
        "PERIODE_ID",
        "TGL_AWAL",
        "TGL_AKHIR",
        "NAMA",
        "KETERANGAN",
        "POSTED",
        "TGL_TERAKHIR_ENTRY"
    };
    
    public static int[] fieldTypes = {
        TYPE_PK + TYPE_LONG + TYPE_ID,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_INT,
        TYPE_DATE
    };
    
    public PstPeriode() {
    }
    
    public PstPeriode(int i) throws DBException {
        super(new PstPeriode());
    }
    
    public PstPeriode(String sOid) throws DBException {
        super(new PstPeriode(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    public PstPeriode(long lOid) throws DBException {
        super(new PstPeriode(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch(Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    public int getFieldSize() {
        return fieldNames.length;
    }
    
    public String getTableName() {
        return TBL_PERIODE;
    }
    
    public String[] getFieldNames() {
        return fieldNames;
    }
    
    public int[] getFieldTypes() {
        return fieldTypes;
    }
    
    public String getPersistentName() {
        return new PstPeriode().getClass().getName();
    }
    
    public long fetchExc(Entity ent) throws Exception{
        Periode periode = PstPeriode.fetchExc(ent.getOID());
        ent = (Entity)periode;
        return periode.getOID();
    }
    
    public long insertExc(Entity ent) throws Exception {
        return PstPeriode.insertExc((Periode) ent);
    }
    
    public long updateExc(Entity ent) throws Exception {
        return updateExc((Periode) ent);
    }
    
    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND) ;
        }
        return deleteExc(ent.getOID());
    }
    
    public static Periode fetchExc(long oid) throws DBException {
        try { 
            Periode periode = new Periode();
            PstPeriode pPeriode = new PstPeriode(oid);
            periode.setOID(oid);
            periode.setTglAwal(pPeriode.getDate(FLD_TGLAWAL));
            periode.setTglAkhir(pPeriode.getDate(FLD_TGLAKHIR));
            periode.setNama(pPeriode.getString(FLD_NAMA));
            periode.setKeterangan(pPeriode.getString(FLD_KETERANGAN));
            periode.setPosted(pPeriode.getInt(FLD_POSTED));
            periode.setTglAkhirEntry(pPeriode.getDate(FLD_TGLAKHIRENTRY));
            return periode;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException( new PstPeriode(0), DBException.UNKNOWN);
        }
    }
    
    
    public static long insertExc(Periode periode) throws DBException {
        try {
            PstPeriode pPeriode = new PstPeriode(0);
            pPeriode.setDate(FLD_TGLAWAL, periode.getTglAwal());
            pPeriode.setDate(FLD_TGLAKHIR, periode.getTglAkhir());
            pPeriode.setString(FLD_NAMA, periode.getNama());
            pPeriode.setString(FLD_KETERANGAN, periode.getKeterangan());
            pPeriode.setInt(FLD_POSTED, periode.getPosted());
            pPeriode.setDate(FLD_TGLAKHIRENTRY, periode.getTglAkhirEntry());
           
            pPeriode.insertWO(periode.getTglAwal()); 
            periode.setOID(pPeriode.getlong(FLD_IDPERIODE));
            
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPeriode(0), DBException.UNKNOWN);
        }
        return periode.getOID();
    }
    
    public static long updateExc(Periode periode) throws DBException {
        try {
            if (periode.getOID() != 0) {
                PstPeriode pPeriode = new PstPeriode(periode.getOID());
                pPeriode.setDate(FLD_TGLAWAL, periode.getTglAwal());
                pPeriode.setDate(FLD_TGLAKHIR, periode.getTglAkhir());
                pPeriode.setString(FLD_NAMA, periode.getNama());
                pPeriode.setString(FLD_KETERANGAN, periode.getKeterangan());
                pPeriode.setInt(FLD_POSTED, periode.getPosted());
                pPeriode.setDate(FLD_TGLAKHIRENTRY, periode.getTglAkhirEntry());
                pPeriode.update();
                return periode.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPeriode(0), DBException.UNKNOWN);
        }
        return 0;
    }
    
    public static long deleteExc(long oid) throws DBException {
        try {
            PstPeriode pPeriode = new PstPeriode(oid);
            pPeriode.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPeriode(0), DBException.UNKNOWN);
        }
        return oid;
    }
    
    public static Vector listAll() {
        return list(0, 500, "","");
    }
    
    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        
        try {
            String sql = "SELECT * FROM " + TBL_PERIODE + " ";
            
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL :
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
                    break;
                    
                case DBHandler.DBSVR_POSTGRESQL :
                    if(limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
                    
                    break;
                    
                case DBHandler.DBSVR_SYBASE :
                    break;
                    
                case DBHandler.DBSVR_ORACLE :
                    break;
                    
                case DBHandler.DBSVR_MSSQL :
                    break;
                    
                default:
                    break;
            }
            
            System.out.println("sql : " + sql); 
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while (rs.next()) {
                Periode periode = new Periode();
                resultToObject(rs, periode);
                lists.add(periode);
            }
            rs.close();
        } catch(Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }
    
    private static void resultToObject(ResultSet rs, Periode periode) {
        try {
            periode.setOID(rs.getLong(fieldNames[FLD_IDPERIODE]));
            periode.setTglAwal(rs.getDate(fieldNames[FLD_TGLAWAL]));
            periode.setTglAkhir(rs.getDate(fieldNames[FLD_TGLAKHIR]));
            periode.setNama(rs.getString(fieldNames[FLD_NAMA]));
            periode.setKeterangan(rs.getString(fieldNames[FLD_KETERANGAN]));
            periode.setPosted(rs.getInt(fieldNames[FLD_POSTED]));
            periode.setTglAkhirEntry(rs.getDate(fieldNames[FLD_TGLAKHIRENTRY]));
        } catch (Exception e) {
        }
    }
    
    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_IDPERIODE]
            + ") FROM " + TBL_PERIODE;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    /**
     * @param lCurrPeriodOid
     */    
    public static long setPeriodPosted(long lCurrPeriodOid) 
    {
        try  
        {
            String sql = "UPDATE " + TBL_PERIODE
            + " SET " + fieldNames[FLD_POSTED]
            + " = " + PERIOD_CLOSED
            + " WHERE " + fieldNames[FLD_IDPERIODE] 
            + " = " + lCurrPeriodOid;
            
            DBHandler.execUpdate(sql);
            return lCurrPeriodOid;
        }
        catch (Exception e) 
        {
            System.out.println("Err Update Posted : " + e.toString());
            return 0;
        }
    }
    
    
    /**
     * @param lastPeriodOid
     * @return
     */    
    public static boolean openPrepareOpenPeriod(long lastPeriodOid) 
    {
        boolean bReturn = false;
        DBResultSet dbrs = null;        
        try 
        {
            Periode period = fetchExc(lastPeriodOid);
            
            if (period.getOID() != 0) 
            {                
                java.util.Date lastDate = period.getTglAkhir();
                int date = lastDate.getDate();
                int month = lastDate.getMonth();
                int year = lastDate.getYear();
                java.util.Date newDate = new java.util.Date(year, month, date+1);
                String strStartDate = Formater.formatDate(newDate, "yyyy-MM-dd");                
                
                String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] + 
                             ", " + PstPeriode.fieldNames[PstPeriode.FLD_NAMA] +
                             ", " + PstPeriode.fieldNames[PstPeriode.FLD_KETERANGAN] +
                             ", " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] +
                             ", " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR] +
                             ", " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIRENTRY] +
                             ", " + PstPeriode.fieldNames[PstPeriode.FLD_POSTED] +
                             " FROM " + PstPeriode.TBL_PERIODE +
                             " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] +
                             " = '" + strStartDate + "'" + 
                             " ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE];
                
                System.out.println("sql : " + sql);
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet(); 
                
                while(rs.next()) 
                {
                    long lPeriodOid = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);                    
                    if (lPeriodOid > 0) 
                    {
                        Periode objPeriode = new Periode();
                        objPeriode.setOID(lPeriodOid);
                        objPeriode.setNama(rs.getString(PstPeriode.fieldNames[PstPeriode.FLD_NAMA]));
                        objPeriode.setKeterangan(rs.getString(PstPeriode.fieldNames[PstPeriode.FLD_KETERANGAN]));
                        objPeriode.setTglAwal(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]));
                        objPeriode.setTglAkhir(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]));
                        objPeriode.setTglAkhirEntry(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIRENTRY]));
                        objPeriode.setPosted(PstPeriode.PERIOD_OPEN);
                        
                        long updatedPeriodOid = PstPeriode.updateExc(objPeriode);
                        if(updatedPeriodOid > 0)
                        {
                            return true;
                        }
                    }
                    else
                    {
                        return false;                        
                    }
                }                
                rs.close();                
            }
        }
        catch (Exception error) 
        {
            System.out.println(".:: PstPeriode >> Method openPrepareOpenPeriod : " + error.toString());
        }
        finally 
        {
            DBResultSet.close(dbrs);
        }
        return bReturn;
    }
    
    
    public static java.util.Date getFirstDateOfNewPeriod() {
        java.util.Date resultDate = null;
        
        try {
            String sql = "SELECT " + fieldNames[FLD_TGLAKHIR]
            + " FROM " + TBL_PERIODE
            + " ORDER BY " + fieldNames[FLD_TGLAKHIR]
            + " DESC";
            DBResultSet dbrs = DBHandler.execQueryResult(sql);
            ResultSet rslSet = dbrs.getResultSet();
            if (rslSet.next()) {
                java.sql.Date lastDate = rslSet.getDate(fieldNames[FLD_TGLAKHIR]);
                resultDate = new java.util.Date(lastDate.getYear(), lastDate.getMonth(), lastDate.getDate() + 1);
            }
            rslSet.close();
            DBResultSet.close(dbrs);
        } catch (Exception error) {
            System.out.println(".:: PstPeriode - getFirstDateOfNewPeriod : " + error.toString());
        }
        if (resultDate == null) {
            resultDate = new java.util.Date();
            int year = resultDate.getYear();
            int month = resultDate.getMonth();
            resultDate = new java.util.Date(year, month, 1);
        }
        return resultDate;
    }
    
    public static long getLastPeriodeOid(long lCurrPeriod) {
	DBResultSet dbrs = null;
	long lResult = 0;
	if(lCurrPeriod != 0){
	    try{
		String sql = " SELECT "+fieldNames[PstPeriode.FLD_IDPERIODE]+
			     " FROM "+TBL_PERIODE+
			     " WHERE "+fieldNames[PstPeriode.FLD_IDPERIODE]+" < "+lCurrPeriod+
			     " ORDER BY "+fieldNames[PstPeriode.FLD_IDPERIODE]+" DESC ";
		dbrs = DBHandler.execQueryResult(sql);
		ResultSet rs = dbrs.getResultSet();
		while(rs.next()){
		    if(rs.isFirst()){
			lResult = rs.getLong(fieldNames[PstPeriode.FLD_IDPERIODE]);
		    }
		}
		rs.close();
	    }catch(Exception e){}
	}
	return lResult;
    }
    
    public static synchronized long getPrevPeriod(long lCurrPeriod){
	DBResultSet dbrs = null;
	long lResult = 0;
	Date rangePeriodDate[] = null;
	Date startPeriodDate = null;
	if(lCurrPeriod != 0){
	    try{
		rangePeriodDate = getPeriodRange(lCurrPeriod);
		if(rangePeriodDate.length > 0 && rangePeriodDate != null){
		    startPeriodDate = (Date)rangePeriodDate[0];
		}
		String sql = " SELECT "+fieldNames[PstPeriode.FLD_IDPERIODE]+
			     " FROM "+TBL_PERIODE+
			     " WHERE "+fieldNames[PstPeriode.FLD_TGLAKHIR]+
			     " < '"+Formater.formatDate(startPeriodDate, "yyyy-MM-dd")+
			     "' ORDER BY "+fieldNames[PstPeriode.FLD_TGLAKHIR]+" DESC ";
		//System.out.println("SQL getPrevPeriod :::::::::::::: "+sql);
		dbrs = DBHandler.execQueryResult(sql);
		ResultSet rs = dbrs.getResultSet();
		while(rs.next()){
		    if(rs.isFirst()){
			lResult = rs.getLong(fieldNames[PstPeriode.FLD_IDPERIODE]);
		    }
		}
		rs.close();
	    }catch(Exception e){}
	}
	return lResult;
    }
    
    public static long getLastPeriodeOid() {
        long lastPeriodOid = 0;
        try {
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]
            + " FROM " + PstPeriode.TBL_PERIODE
            + " ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
            + " DESC";
            DBResultSet dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            if (rs.next()) {
                lastPeriodOid = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);
            }
            rs.close();
            DBResultSet.close(dbrs);
        } catch (Exception error) {
            System.out.println(error.toString());
        }
        return lastPeriodOid;
    }
    
    
    // ambil dari sessPeriode
    /** This method used to list all period from table periode
     * @param periodeID --> specify periodeID
     */
    public static Vector listPeriode(long periodeOID) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        try{
            if(periodeOID!=0){ 
                String sql = "SELECT "+PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]+", "+
                PstPeriode.fieldNames[PstPeriode.FLD_NAMA]+", "+
                PstPeriode.fieldNames[PstPeriode.FLD_KETERANGAN]+", "+
                PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]+", "+
                PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]+", "+
                PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIRENTRY]+
                " FROM "+PstPeriode.TBL_PERIODE +
                " WHERE "+PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] +
                " = "+periodeOID;
                
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                
                while(rs.next()) {
                    Periode periode = new Periode();
                    
                    periode.setOID(rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]));
                    periode.setNama(rs.getString(PstPeriode.fieldNames[PstPeriode.FLD_NAMA]));
                    periode.setKeterangan(rs.getString(PstPeriode.fieldNames[PstPeriode.FLD_KETERANGAN]));
                    periode.setTglAwal(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]));
                    periode.setTglAkhir(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]));
                    periode.setTglAkhirEntry(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIRENTRY]));
                    
                    result.add(periode);
                    System.out.println("SQL METHOD VECTOR LIST PERIOD ::: "+sql);
                }
            }
        } catch (Exception e) {
            System.out.println("Err list period : "+e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }
    
    /** This method used to list all period from before lastDate
     * @param lastDate --> specify lastDate
     */
    public static long listPeriode(java.util.Date lastDate) {
        DBResultSet dbrs = null;
        long result = 0;
        String strDate = "\"" + Formater.formatDate(lastDate, "yyyy-MM-dd") + "\"";
        try{
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] +
            " FROM " + PstPeriode.TBL_PERIODE +
            " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR] +
            " < " + strDate +
            " ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR] +
            " DESC";
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            System.out.println("SQL METHOD LONG LIST PERIODE :::: "+sql);
            while(rs.next()) {
                result = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);
                break;
            }
        } catch(Exception e) {
            System.out.println("Err list period : "+e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }
    
    /** This method used to list periodID where selectDate between startDate and dueDate of period
     * @param selectedDate --> specify selectedDate
     */
    public static long getPeriodeIdBetween(java.util.Date selectedDate) {
        DBResultSet dbrs = null;
        long result = 0;
        String strDate = "'" + Formater.formatDate(selectedDate, "yyyy-MM-dd") + "'";
        try{
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] +
            " FROM " + PstPeriode.TBL_PERIODE +
            " WHERE " + strDate + " BETWEEN " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] +
            " AND " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR];
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            System.out.println("SQL METHOD long getPeriodeIdBetween ::: "+sql);
            while(rs.next()) {
                result = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);
                break;
            }
        } catch(Exception e) {
            System.out.println("Err list period : "+e.toString());
        } finally {
            DBResultSet.close(dbrs);
            
        }
        return result;
    }
    
    /* This method used to list the first period from table periode */
    public static Periode getFirstPeriod(){
        Periode result = new Periode();
        String orderBy = PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL];
        Vector lists = PstPeriode.list(0,0,"",orderBy);
        if(lists!=null && lists.size()>0){
            System.out.println("masuk ke first period");
            result = (Periode)lists.get(0);
            System.out.println("oidnya : "+result.getOID());
        }
        return result;
    }
    
    /* This method used to list the first period from table periode */
    public static long getFirstPeriodId(){
        long result = 0;
        String orderBy = PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL];
        Vector lists = PstPeriode.list(0,0,"",orderBy);
        if(lists!=null && lists.size()>0){
            System.out.println("masuk ke first period");
            Periode period = (Periode)lists.get(0);
            result = period.getOID();
        }
        return result;
    }
    
    /* This method used to get the current period */
    public static Vector getCurrPeriod() {
        DBResultSet dbrs = null;
        Vector lists = new Vector(1, 1);
        try {
            String sql = "SELECT * FROM " + PstPeriode.TBL_PERIODE
            + " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_POSTED]
            + " = " + PstPeriode.PERIOD_OPEN;
            //System.out.println("SQL getCurrPeriod ::::::::::::::::: "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while (rs.next()) {
                Periode per = new Periode();
                per.setOID(rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]));
                per.setTglAwal(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]));
                per.setTglAkhir(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]));
                per.setNama(rs.getString(PstPeriode.fieldNames[PstPeriode.FLD_NAMA]));
                per.setKeterangan(rs.getString(PstPeriode.fieldNames[PstPeriode.FLD_KETERANGAN]));
                per.setPosted(rs.getInt(PstPeriode.fieldNames[PstPeriode.FLD_POSTED]));
                per.setTglAkhirEntry(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIRENTRY]));
                lists.add(per);
            }
        } catch (Exception e) {
            System.out.println("Err CurrPeriod : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }
    
    /* This method used to list the last period from table periode */
    public static Vector getLastPeriod() {
        DBResultSet dbrs = null;
        Vector lists = new Vector(1,1);
        Vector listCurrPeriod = getCurrPeriod();
        //System.out.println("listCurrPeriod : " + listCurrPeriod.size());
        if (listCurrPeriod.size() == 0) {
            try {
                String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
                + ", " + PstPeriode.fieldNames[PstPeriode.FLD_POSTED]
                + " FROM " + PstPeriode.TBL_PERIODE
                + " ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
                + " DESC";
                
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                
                while (rs.next()) {
                    Periode per = new Periode();
                    per.setTglAkhir(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]));
                    per.setPosted(rs.getInt(PstPeriode.fieldNames[PstPeriode.FLD_POSTED]));
                    lists.add(per);
                }
            } catch (Exception e) {
                System.out.println("Err LastPeriod : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
                System.out.println("lists : " + lists.size());
            }
            return lists;
        } else {
            return listCurrPeriod;
        }
    }
    
    /** This method used to check currPeriod status
     * true, if there is currPeriod
     * false, otherwise
     */
    public static boolean isTherePeriod(){
        Vector vectPeriod = getCurrPeriod();
        if(vectPeriod!=null && vectPeriod.size()>0){
            return true;
        }else{
            return false;
        }
    }
    
    
    /**
     * this method used to get currPeriodId
     */
    public static long getCurrPeriodId() {
        Vector vectCurrPeriod = getCurrPeriod();
        long currPeriodId = 0;
        if (vectCurrPeriod != null && vectCurrPeriod.size() > 0) {
            Periode per = (Periode) vectCurrPeriod.get(0);
            return per.getOID();
        }
        return currPeriodId;
    }
    
    /** This method used to list periodID where selectDate between startDate and dueDate of period
     * @param selectedDate --> specify selectedDate
     */
    public static long getPerIdStartEntry(java.util.Date selectedDate) {
        DBResultSet dbrs = null;
        long result = 0;
        String strDate = "\"" + Formater.formatDate(selectedDate, "yyyy-MM-dd") + "\"";
        try{
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] +
            " FROM " + PstPeriode.TBL_PERIODE +
            " WHERE " + strDate + " BETWEEN " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] +
            " AND " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIRENTRY];
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while(rs.next()) {
                result = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);
                break;
            }
        } catch(Exception e) {
            System.out.println("Err list period : "+e.toString());
        } finally {
            DBResultSet.close(dbrs);
            
        }
        return result;
    }
    
    /**
     * this method used to get prevString of startdate of currPeriod
     */
    public static String getStrVoucherPrev(java.util.Date transactionDate) {
        long periodId = getPerIdStartEntry(transactionDate);
        String whereClause = PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] + " = " + periodId;
        Vector vectCurrPeriod = PstPeriode.list(0,0,whereClause,"");
        long currPeriodId = 0;
        String result = "";
        if(vectCurrPeriod!=null && vectCurrPeriod.size()>0){
            Periode per = (Periode)vectCurrPeriod.get(0);
            int intYear = per.getTglAwal().getYear()+1900;
            int intMonth = per.getTglAwal().getMonth()+1;
            String startDateYear = String.valueOf(intYear).substring(2);
            String startDateMonth = (String.valueOf(intMonth).length()==1) ? "0"+String.valueOf(intMonth) : String.valueOf(intMonth);
            result = startDateYear+startDateMonth;
        }
        return result;
    }
    
    /**
     * this method used to get prevString of startdate of currPeriod
     */
    public static String getStrVoucherEdit(String voucherNo){
        String result = "";
        StringTokenizer st = new StringTokenizer(voucherNo,"-",false);
        while(st.hasMoreTokens()){
            result = result + st.nextToken();
        }
        return result;
    }
    
    /**
     * this method used to get periode interval (in month)
     */
    public static int getPeriodInterval(long periodeId) {
        int result = 1;
        String whereClause = PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] + " = " + periodeId;
        Vector vectPeriode = PstPeriode.list(0, 0, whereClause, "");
        if (vectPeriode != null && vectPeriode.size() > 0) {
            Periode perSelected = (Periode) vectPeriode.get(0);
            java.util.Date startDate = perSelected.getTglAwal();
            java.util.Date endDate = perSelected.getTglAkhir();
            result = endDate.getMonth() - startDate.getMonth() + 1;
        }
        return result;
    }
    
    public static Periode getPeriodBetween(java.util.Date actualDate) {
        Periode objPeriode = new Periode();
        DBResultSet dbrs = null;
        ResultSet rs = null;
        try {
            java.sql.Date sqlDate = new java.sql.Date(actualDate.getTime());
            String sql = "SELECT * FROM " + PstPeriode.TBL_PERIODE
            + " WHERE '" + sqlDate
            + "' BETWEEN " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]
            + " AND " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR];
            
            //System.out.println(sql);
            
            dbrs = DBHandler.execQueryResult(sql);
            rs = dbrs.getResultSet();
            
            if (rs.next()) {
                objPeriode.setOID(rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]));
                objPeriode.setTglAwal(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]));
                objPeriode.setTglAkhir(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]));
                objPeriode.setTglAkhirEntry(rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIRENTRY]));
                objPeriode.setNama(rs.getString(PstPeriode.fieldNames[PstPeriode.FLD_NAMA]));
                objPeriode.setKeterangan(rs.getString(PstPeriode.fieldNames[PstPeriode.FLD_KETERANGAN]));
                objPeriode.setPosted(rs.getInt(PstPeriode.fieldNames[PstPeriode.FLD_POSTED]));
            }
            
            
        } catch (Exception error) {
            System.out.println(".:: SessPeriode >> getPeriodBetween() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return objPeriode;
    }
    
    /**
     * author rusdianta
     * @return vector of period object
     * this method return previous periode (1 stage) and all next periode
     */
    
    public static Vector getBudgetingPeriod() {
        Vector vectResults = new Vector(); 
        Vector vectCurrPeriod = getCurrPeriod();
        String strWhere = "";
        
        if (vectCurrPeriod.size() > 0) {
            Periode objPeriode = (Periode) vectCurrPeriod.get(0);
            if (objPeriode.getOID() > 0) {
                java.util.Date startDate = objPeriode.getTglAwal();
                java.util.Date prevDate = new java.util.Date(startDate.getYear(), startDate.getMonth(), startDate.getDate() - 1);
                Periode objPrevPeriod = getPeriodBetween(prevDate);
                
                if (objPrevPeriod.getOID() > 0)
                    vectResults.add(objPrevPeriod);
                vectResults.add(objPeriode);
                
                java.util.Date lastDate = objPeriode.getTglAkhir();
                java.sql.Date sqlDate = new java.sql.Date(lastDate.getTime());
                
                strWhere = PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]
                + " > '" + sqlDate + "'";
            }
        }
        
        String strOrder = PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]
        + " ASC";
        
        Vector vectListPeriod = PstPeriode.list(0, 0, strWhere, strOrder);
        
        int vectListPeriodSize = vectListPeriod.size();
        for (int item = 0; item < vectListPeriodSize; item++) {
            Periode objPeriode = (Periode) vectListPeriod.get(item);
            vectResults.add(objPeriode);
        }
        return vectResults;
    }
    
    /**
     * author  rusdianta
     * @param lCurrPeriodOid = period oid (long)
     * @return (long) period oid before lCurrPeriodOid
     */
    
    public static long getPeriodOidBefore(long lCurrPeriodOid) {
        long lPeriodOid = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]
            + " FROM " + PstPeriode.TBL_PERIODE
            + " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]
            + " = " + lCurrPeriodOid;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            java.util.Date date = new java.util.Date();
            
            if (rs.next()) {
                date = rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]);
                java.sql.Date sqlPrevDate = new java.sql.Date(date.getYear(), date.getMonth(), date.getDate());
                sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]
                + " FROM " + PstPeriode.TBL_PERIODE
                + " WHERE LEFT(" + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
                + ", 10) < \"" + sqlPrevDate
                + "\" ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
                + " DESC";
                dbrs = DBHandler.execQueryResult(sql);
                rs = dbrs.getResultSet();
                if (rs.next())
                    lPeriodOid = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);
            }
            
        } catch (Exception error) {
            System.out.println(".:: " + new PstPeriode().getClass().getName() + ".getPeriodOidBefore() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lPeriodOid;
    }
    
    /**
     * author  rusdianta
     * @param iCurrentYear = year (int)
     * @return period oid (long) "the last period in that year where status is closed"
     */
    
    public static long getLastPeriodOidOfCurrentYear(int iCurrentYear) {
        long lPeriodOid = 0;
        DBResultSet dbrs = null;
        
        try {
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]
            + ", " + PstPeriode.fieldNames[PstPeriode.FLD_POSTED]
            + " FROM " + PstPeriode.TBL_PERIODE
            + " WHERE LEFT(" + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]
            + ", 4) = " + iCurrentYear
            + " ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]
            + " DESC";
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while (rs.next()) {
                int status = rs.getInt(PstPeriode.fieldNames[PstPeriode.FLD_POSTED]);
                if (status == PstPeriode.PERIOD_CLOSED) {
                    lPeriodOid = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);
                    break;
                }
            }
            
        } catch (Exception error) {
            System.out.println(".:: " + new PstPeriode().getClass().getName() + ".getLastPeriodOidOfCurrentYear() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lPeriodOid;
    }
    
    /**
     * author rusdianta
     * @param lPeriodOid = period oid
     * @return first and last date of period as a array with 2 elements
     */
    
    public static java.util.Date[] getPeriodRange(long lPeriodOid) {
        java.util.Date firstDate = null;
        java.util.Date lastDate = null;
        
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]
            + ", " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
            + " FROM " + PstPeriode.TBL_PERIODE
            + " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]
            + " = " + lPeriodOid;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            if (rs.next()) {
                firstDate = rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]);
                lastDate = rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstPeriode().getClass().getName() + ".getPeriodeRange() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        
        java.util.Date resultDate[] = new java.util.Date[2];
        resultDate[0] = firstDate;
        resultDate[1] = lastDate;
        
        return resultDate;
    }
    
    /**
     * author rusdianta
     * @param actualDate = date
     * @return oid (long) of periode that have range before actual date
     */
    
    public static long getPeriodOidBefore(java.util.Date actualDate) {
        long lPeriodOid = 0;
        DBResultSet dbrs = null;
        try {
            java.sql.Date sqlDate = new java.sql.Date(actualDate.getYear(), actualDate.getMonth(), actualDate.getDay());
            
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]
            + " FROM " + PstPeriode.TBL_PERIODE
            + " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
            + " < \"" + sqlDate
            + "\" ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
            + " DESC";
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            if (rs.next()) {
                lPeriodOid = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);
            }
            
        } catch (Exception error) {
            System.out.println(".:: " + new PstPeriode().getClass().getName() + ".getPeriodOidBefore() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lPeriodOid;
    }
    
    /**
     * author rusdianta
     * @param actualDate    = date of actual period
     * @return  array of date: array[0] = first date, array[1] = last date (return previous period range)
     */
    
    public static java.util.Date[] getPeriodRangeBefore(java.util.Date actualDate) {
        java.util.Date firstDate = null;
        java.util.Date lastDate = null;
        java.sql.Date sqlDate = new java.sql.Date(actualDate.getYear(), actualDate.getMonth(), actualDate.getDate());
        
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]
            + ", " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
            + " FROM " + PstPeriode.TBL_PERIODE
            + " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
            + " < \"" + sqlDate
            + "\" ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]
            + " DESC";
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            if (rs.next()) {
                firstDate = rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]);
                lastDate = rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR]);
            }
            
        } catch (Exception error) {
            System.out.println(".:: " + new PstPeriode().getClass().getName() + ".getPeriodRangeBefore() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        
        java.util.Date dateRanges[] = new java.util.Date[2];
        dateRanges[0] = firstDate;
        dateRanges[1] = lastDate;
        return dateRanges;
    }
    
    /**
     * author rusdinta
     * @param lPeriodOid = oid of actual period
     * @return first date of actual period
     */
    
    public static java.util.Date getFirstDateOfPeriod(long lPeriodOid) {
        java.util.Date firstDate = null;
        
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]
            + " FROM " + PstPeriode.TBL_PERIODE
            + " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]
            + " = " + lPeriodOid;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            if (rs.next()) {
                firstDate = rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]);
            }
            
        } catch (Exception error) {
            System.out.println(".:: " + new PstPeriode().getClass().getName() + ".getFirstDateOfPeriod() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return firstDate;
    }
    
    
    /** this method used to check if periode is alredy close or not */
    public static boolean isPeriodClosed(long periodeId){
        Vector tempPeriod = PstPeriode.list(0,0," PERIODE_ID = "+periodeId,"");
        if(tempPeriod!=null && tempPeriod.size()>0){
            Periode per = (Periode)tempPeriod.get(0);
            if (per.getPosted() == PstPeriode.PERIOD_CLOSED){
                return true;
            }   else{
                return false;
            }
        }
        return false;
    }
    
    /** this method used to get last period Id */
    public static Vector getLastPeriodId(){
        DBResultSet dbrs = null;
        Vector lists = new Vector(1,1);
        try{
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] +
            " FROM " + PstPeriode.TBL_PERIODE +
            " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_POSTED] + " = 1 " + //posted
            " ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR] +
            " DESC";
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                Periode per = new Periode();
                per.setOID(rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]));
                lists.add(per);
            }
        }catch(Exception e){
            System.out.println("Err LastPeriod : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
            
        }
        return lists;
    }
    
    /** This method used to list all period from before lastDate
     * @param lastDate --> specify lastDate
     */
    public static java.util.Date listStartDateOfPeriode(java.util.Date lastDate) {
        
        DBResultSet dbrs = null;
        java.util.Date result = null;
        String strDate = "\"" + Formater.formatDate(lastDate, "yyyy-MM-dd") + "\"";
        
        try{
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] +
            " FROM " + PstPeriode.TBL_PERIODE +
            " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] +
            " <= " + strDate + " AND " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR] +
            " >= " + strDate +
            " ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR] +
            " DESC";
            
            //System.out.println("--> SQL : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while(rs.next()) {
                result = rs.getDate(PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL]);
                break;
            }
        } catch(Exception e) {
            System.out.println("Err list period : "+e.toString());
        } finally {
            DBResultSet.close(dbrs);
            
        }
        return result;
    }
    
    /** This method used to list all period from before lastDate
     * @param lastDate --> specify lastDate
     */
    public static long listIdOfPeriode(java.util.Date lastDate) {
        DBResultSet dbrs = null;
        long result = 0;
        String strDate = "\"" + Formater.formatDate(lastDate, "yyyy-MM-dd") + "\"";
        try{
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] +
            " FROM " + PstPeriode.TBL_PERIODE +
            " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] +
            " <= " + strDate + " AND " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIRENTRY] +
            " >= " + strDate +
            " ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR] +
            " DESC";
            
            //System.out.println("--> SQL : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while(rs.next()) {
                result = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);
                break;
            }
        } catch(Exception e) {
            System.out.println("Err list period : "+e.toString());
        } finally {
            DBResultSet.close(dbrs);
            
        }
        return result;
    }
    
    /** this method used to get periodId just before current period */
    public static long getPeriodIdJustBefore(long currPeriodId){
        long result = 0;
        if(currPeriodId!=0){
            //Vector vectLastPeriod = SessPeriode.getLastPeriodId();
            String orderBy = PstPeriode.fieldNames[PstPeriode.FLD_TGLAKHIR] + " DESC";
            Vector vectLastPeriod = PstPeriode.list(0,0,"",orderBy);
            //System.out.println("vectLastPeriod size : "+vectLastPeriod.size());
            if(vectLastPeriod!=null && vectLastPeriod.size()>1){
                for(int i=0; i<vectLastPeriod.size(); i++){
                    Periode per = (Periode)vectLastPeriod.get(i);
                    //System.out.println("per.getOID() : "+per.getOID());
                    if(currPeriodId==per.getOID() && i<vectLastPeriod.size()-1){
                        per = (Periode)vectLastPeriod.get(i+1);
                        //System.out.println("return : "+per.getOID());
                        return per.getOID();
                    }
                }
            }
            
            if(vectLastPeriod.size()==1){
                Periode per = (Periode)vectLastPeriod.get(0);
                if(per.getOID()!=currPeriodId){
                    return per.getOID();
                }
            }
        }
        return result;
    }
    
    /**
     * this method used to get periodId for one year along specify by startDate and dueDate
     */
    public static String listPeriodbyStartDue(java.util.Date startDate,
    java.util.Date dueDate) {
        DBResultSet dbrs = null;
        String result = "";
        String strStartDate = "\"" + Formater.formatDate(startDate,"yyyy-MM-dd") + "\"";
        String strDueDate = "\"" + Formater.formatDate(dueDate,"yyyy-MM-dd") + "\"";
        try{
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] +
            " FROM " + PstPeriode.TBL_PERIODE +
            " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] +
            " BETWEEN " + strStartDate + " AND " + strDueDate;
            //System.out.println("---> SessPeriode.listPeriodbyStartDue() sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                result = result + rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]) + ",";
            }
            if(result!="" && result.length()>0){result = result.substring(0,result.length()-1);}
        }catch(Exception e){
            System.out.println("---> SessPeriode.listPeriodbyStartDue() err : " + e.toString());
        }finally{
            DBResultSet.close(dbrs);
            
        }
        return result;
    }
    
    /**
     * this method used to get periodId for one year along specify by startDate and dueDate
     */
    public static Vector listPerBtwStartDueDate(java.util.Date startDate,
    java.util.Date dueDate){
        Vector result = new Vector(1,1);
        
        DBResultSet dbrs = null;
        String strStartDate = "\"" + Formater.formatDate(startDate,"yyyy-MM-dd") + "\"";
        String strDueDate = "\"" + Formater.formatDate(dueDate,"yyyy-MM-dd") + "\"";
        try{
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] +
            " FROM " + PstPeriode.TBL_PERIODE +
            " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] +
            " BETWEEN " + strStartDate +
            " AND " + strDueDate;
            //System.out.println("--->>> SessPeriode.listPerBtwStartDueDate() sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                result.add(String.valueOf(rs.getInt(1)));
            }
        }catch(Exception e){
            System.out.println("---eee SessPeriode.listPerBtwStartDueDate() err : " + e.toString());
        }finally{
            DBResultSet.close(dbrs);
            
        }
        return result;
    }
    
    /**
     * this method used to fetch periodId on specify year
     */
    public static long getFirstPeriodOnYear(java.util.Date selectedDate){
        DBResultSet dbrs = null;
        long result = 0;
        String strDate = "\"" + Formater.formatDate(selectedDate,"yyyy-MM-dd") + "\"";
        try{
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] +
            " FROM " + PstPeriode.TBL_PERIODE +
            " WHERE YEAR(" + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] + ") " +
            " = YEAR(" + strDate + ")" +
            " ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL];
            //System.out.println("---> SessPeriode.getFirstPeriodOnYear() sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                result = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);
                break;
            }
        }catch(Exception e){
            System.out.println("---> SessPeriode.getFirstPeriodOnYear() err : " + e.toString());
        }finally{
            DBResultSet.close(dbrs);
            
        }
        return result;
    }
    

    // this method used to fetch periodId on specify year
    public static long getLastPeriodOidOnYear(java.util.Date selectedDate)
    {
        long result = 0;
        
        DBResultSet dbrs = null;        
        String sStartDate = "'" + Formater.formatDate(new java.util.Date(selectedDate.getYear(),0,1),"yyyy-MM-dd") + "'";
        String sEndDate = "'" + Formater.formatDate(new java.util.Date(selectedDate.getYear(),11,31),"yyyy-MM-dd") + "'";
        try
        {
            String sql = "SELECT " + PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE] +
                         " FROM " + PstPeriode.TBL_PERIODE +
                         " WHERE " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] + 
                         " BETWEEN " + sStartDate + 
                         " AND " + sEndDate +
                         " ORDER BY " + PstPeriode.fieldNames[PstPeriode.FLD_TGLAWAL] + 
                         " DESC";
            
//            System.out.println("getLastPeriodOidOnYear sql : " + sql); 
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next())
            {
                result = rs.getLong(PstPeriode.fieldNames[PstPeriode.FLD_IDPERIODE]);
                break;
            }
        }
        catch(Exception e)
        {
            System.out.println("---> SessPeriode.getLastPeriodOidOnYear() err : " + e.toString());
        }
        finally
        {
            DBResultSet.close(dbrs);
            
        }
        return result;
    }
    
    public static void main(String[] args){
        Date currDate = new Date();
        String stDate = String.valueOf(currDate.getDate());
        String stMonth = "0"+String.valueOf(currDate.getMonth()+1);
        String stYear = String.valueOf(currDate.getYear()+1900);
        String all = stYear + stMonth + stDate;
        
        long oid = Long.parseLong(all);
        System.out.println("currDate = "+oid);
    }
    
}
