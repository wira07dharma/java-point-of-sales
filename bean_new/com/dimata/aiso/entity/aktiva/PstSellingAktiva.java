// Generated by Together

package com.dimata.aiso.entity.aktiva;

import com.dimata.aiso.db.*;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.qdep.entity.Entity;
import com.dimata.util.Formater;

import java.util.Vector;
import java.sql.ResultSet;

public class PstSellingAktiva extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc {

    public static final String TBL_SELLING_AKTIVA = "aiso_aktiva_selling";
    public static final int FLD_SELLING_AKTIVA_ID = 0;
    public static final int FLD_NOMOR_SELLING = 1;
    public static final int FLD_TANGGAL_SELLING = 2;
    public static final int FLD_KONSUMEN_ID = 3;
    public static final int FLD_TYPE_PEMBAYARAN = 4;
    public static final int FLD_ID_PERKIRAAN_PAYMENT = 5;
    public static final int FLD_ID_CURRENCY = 6;
    public static final int FLD_COUNTER = 7;
    public static final int FLD_SELLING_STATUS = 8;
    public static final int FLD_ARAP_MAIN_STATUS = 9;
    public static final int FLD_NOTE = 10;

    public static String[] fieldNames = {
        "SELLING_AKTIVA_ID",
        "NOMOR_SELLING",
        "TANGGAL_SELLING",
        "KONSUMEN_ID",
        "TYPE_PEMBAYARAN",
        "ID_PERKIRAAN_PAYMENT",
        "ID_CURRENCY",
        "COUNTER",
        "SELLING_STATUS",
        "ARAP_MAIN_STATUS",
        "NOTE"
    };

    public static int[] fieldTypes = {
        TYPE_PK + TYPE_ID + TYPE_LONG,
        TYPE_STRING,
        TYPE_DATE,
        TYPE_LONG,
        TYPE_INT,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_STRING
    };

    public PstSellingAktiva() {
    }

    public PstSellingAktiva(int i) throws DBException {
        super(new PstSellingAktiva());
    }

    public PstSellingAktiva(String sOid) throws DBException {
        super(new PstSellingAktiva(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public PstSellingAktiva(long lOid) throws DBException {
        super(new PstSellingAktiva(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }

        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_SELLING_AKTIVA;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstSellingAktiva().getClass().getName();
    }

    public long fetchExc(Entity ent) throws DBException {
        SellingAktiva aktiva = fetchExc(ent.getOID());
        ent = (Entity) aktiva;
        return aktiva.getOID();
    }

    public long insertExc(Entity ent) throws DBException {
        return insertExc((SellingAktiva) ent);
    }

    public long updateExc(Entity ent) throws DBException {
        return updateExc((SellingAktiva) ent);
    }

    public long deleteExc(Entity ent) throws DBException {
        if (ent == null) {
            throw  new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static SellingAktiva fetchExc(long Oid) throws DBException {
        try {
            SellingAktiva aktiva = new SellingAktiva();
            PstSellingAktiva pstAktiva = new PstSellingAktiva(Oid);
            aktiva.setOID(Oid);

            aktiva.setNomorSelling(pstAktiva.getString(FLD_NOMOR_SELLING));
            aktiva.setTanggalSelling(pstAktiva.getDate(FLD_TANGGAL_SELLING));
            aktiva.setTypePembayaran(pstAktiva.getInt(FLD_TYPE_PEMBAYARAN));
            aktiva.setSupplierId(pstAktiva.getlong(FLD_KONSUMEN_ID));
            aktiva.setIdPerkiraanPayment(pstAktiva.getlong(FLD_ID_PERKIRAAN_PAYMENT));
            aktiva.setIdCurrency(pstAktiva.getlong(FLD_ID_CURRENCY));
            aktiva.setCounter(pstAktiva.getInt(FLD_COUNTER));
            aktiva.setSellingStatus(pstAktiva.getInt(FLD_SELLING_STATUS));
            aktiva.setArApMainStatus(pstAktiva.getInt(FLD_ARAP_MAIN_STATUS));
            aktiva.setNote(pstAktiva.getString(FLD_NOTE));

            return aktiva;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstSellingAktiva(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(SellingAktiva aktiva) throws DBException {
        try {
            PstSellingAktiva pstAktiva = new PstSellingAktiva(0);

            pstAktiva.setString(FLD_NOMOR_SELLING, aktiva.getNomorSelling());
            pstAktiva.setInt(FLD_TYPE_PEMBAYARAN, aktiva.getTypePembayaran());
            pstAktiva.setDate(FLD_TANGGAL_SELLING, aktiva.getTanggalSelling());
            pstAktiva.setLong(FLD_KONSUMEN_ID, aktiva.getSupplierId());
            pstAktiva.setLong(FLD_ID_PERKIRAAN_PAYMENT, aktiva.getIdPerkiraanPayment());
            pstAktiva.setLong(FLD_ID_CURRENCY, aktiva.getIdCurrency());
            pstAktiva.setInt(FLD_COUNTER, aktiva.getCounter());
            pstAktiva.setInt(FLD_SELLING_STATUS, aktiva.getSellingStatus());
            pstAktiva.setInt(FLD_ARAP_MAIN_STATUS, aktiva.getArApMainStatus());
            pstAktiva.setString(FLD_NOTE, aktiva.getNote());

            pstAktiva.insert();
            aktiva.setOID(pstAktiva.getlong(FLD_SELLING_AKTIVA_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstSellingAktiva(0), DBException.UNKNOWN);
        }
        return aktiva.getOID();
    }

    public static long updateExc(SellingAktiva aktiva) throws DBException {
        try {
            if (aktiva != null && aktiva.getOID() != 0) {
                PstSellingAktiva pstAktiva = new PstSellingAktiva(aktiva.getOID());

                pstAktiva.setString(FLD_NOMOR_SELLING, aktiva.getNomorSelling());
                pstAktiva.setInt(FLD_TYPE_PEMBAYARAN, aktiva.getTypePembayaran());
                pstAktiva.setDate(FLD_TANGGAL_SELLING, aktiva.getTanggalSelling());
                pstAktiva.setLong(FLD_KONSUMEN_ID, aktiva.getSupplierId());
                pstAktiva.setLong(FLD_ID_PERKIRAAN_PAYMENT, aktiva.getIdPerkiraanPayment());
                pstAktiva.setLong(FLD_ID_CURRENCY, aktiva.getIdCurrency());
                pstAktiva.setInt(FLD_COUNTER, aktiva.getCounter());
                pstAktiva.setInt(FLD_SELLING_STATUS, aktiva.getSellingStatus());
                pstAktiva.setInt(FLD_ARAP_MAIN_STATUS, aktiva.getArApMainStatus());
                pstAktiva.setString(FLD_NOTE, aktiva.getNote());

                pstAktiva.update();
                return aktiva.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstSellingAktiva(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long Oid) throws DBException {
        try {
            PstSellingAktiva pstAktiva = new PstSellingAktiva(Oid);
            pstAktiva.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstSellingAktiva(0), DBException.UNKNOWN);
        }
        return Oid;
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_SELLING_AKTIVA + " ";
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;

                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    break;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                SellingAktiva aktiva = new SellingAktiva();
                resultToObject(rs, aktiva);
                lists.add(aktiva);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstSellingAktiva().getClass().getName() + ".list() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }

    private static void resultToObject(ResultSet rs, SellingAktiva aktiva) {
        try {
            aktiva.setOID(rs.getLong(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_SELLING_AKTIVA_ID]));
            aktiva.setNomorSelling(rs.getString(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_NOMOR_SELLING]));
            aktiva.setTanggalSelling(rs.getDate(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_TANGGAL_SELLING]));
            aktiva.setTypePembayaran(rs.getInt(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_TYPE_PEMBAYARAN]));
            aktiva.setSupplierId(rs.getLong(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_KONSUMEN_ID]));
            aktiva.setIdPerkiraanPayment(rs.getLong(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_ID_PERKIRAAN_PAYMENT]));
            aktiva.setIdCurrency(rs.getLong(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_ID_CURRENCY]));
            aktiva.setCounter(rs.getInt(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_COUNTER]));
            aktiva.setSellingStatus(rs.getInt(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_SELLING_STATUS]));
            aktiva.setArApMainStatus(rs.getInt(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_ARAP_MAIN_STATUS]));
            aktiva.setNote(rs.getString(PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_NOTE]));

        } catch (Exception e) {
            System.out.println("resultToObject() " + e.toString());
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_SELLING_AKTIVA_ID] + ") " +
                    " FROM " + TBL_SELLING_AKTIVA;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            return count;
        } catch (Exception e) {
            System.out.println(e);
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }


    /**
     *  untuk pembuatan nomor doc aktiva
     * @param dt
     * @param cnt
     * @return
     */
    public static SellingAktiva createSellingNomor(SellingAktiva orderAktiva) {
        String nmr = "";
        try {
            nmr = Formater.formatDate(orderAktiva.getTanggalSelling(), "yyMMdd");
            String where = PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_TANGGAL_SELLING]+" = '"+Formater.formatDate(orderAktiva.getTanggalSelling(), "yyyy-MM-dd")+"'";
            int cnt = getCount(where) + 1;
            orderAktiva.setCounter(cnt);
            switch (String.valueOf(cnt).length()) {
                case 1:
                    nmr = nmr + "-SELL-" +"00" + cnt;
                    break;
                case 2:
                    nmr = nmr + "-SELL-" +"0" + cnt;
                    break;
                default:
                    nmr = nmr + "-SELL-" +"" + cnt;
            }
            orderAktiva.setNomorSelling(nmr);
        } catch (Exception e) {
            System.out.println(e);
            orderAktiva.setNomorSelling("tgl-000");
        }
        return orderAktiva;
    }

}
