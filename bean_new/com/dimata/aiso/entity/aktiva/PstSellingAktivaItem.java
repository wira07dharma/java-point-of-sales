// Generated by Together

package com.dimata.aiso.entity.aktiva;

import com.dimata.aiso.db.*;
import com.dimata.aiso.entity.masterdata.Aktiva;
import com.dimata.aiso.entity.masterdata.PstModulAktiva;
import com.dimata.aiso.entity.masterdata.ModulAktiva;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.qdep.entity.Entity;

import java.util.Vector;
import java.sql.ResultSet;

public class PstSellingAktivaItem extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc {

    public static final String TBL_SELLING_AKTIVA_ITEM = "aiso_aktiva_selling_item";
    public static final int FLD_SELLING_AKTIVA_ITEM_ID = 0;
    public static final int FLD_AKTIVA_ID = 1;
    public static final int FLD_SELLING_AKTIVA_ID = 2;
    public static final int FLD_QTY = 3;
    public static final int FLD_PRICE = 4;
    public static final int FLD_TOTAL_PRICE = 5;

    public static String[] fieldNames = {
        "SELLING_AKTIVA_ITEM_ID",
        "AKTIVA_ID",
        "SELLING_AKTIVA_ID",
        "QTY",
        "PRICE",
        "TOTAL_PRICE"
    };

    public static int[] fieldTypes = {
        TYPE_PK + TYPE_ID + TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT

    };

    public PstSellingAktivaItem() {
    }

    public PstSellingAktivaItem(int i) throws DBException {
        super(new PstSellingAktivaItem());
    }

    public PstSellingAktivaItem(String sOid) throws DBException {
        super(new PstSellingAktivaItem(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public PstSellingAktivaItem(long lOid) throws DBException {
        super(new PstSellingAktivaItem(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }

        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_SELLING_AKTIVA_ITEM;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstSellingAktivaItem().getClass().getName();
    }

    public long fetchExc(Entity ent) throws DBException {
        SellingAktivaItem aktiva = fetchExc(ent.getOID());
        ent = (Entity) aktiva;
        return aktiva.getOID();
    }

    public long insertExc(Entity ent) throws DBException {
        return insertExc((SellingAktivaItem) ent);
    }

    public long updateExc(Entity ent) throws DBException {
        return updateExc((SellingAktivaItem) ent);
    }

    public long deleteExc(Entity ent) throws DBException {
        if (ent == null) {
            throw  new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static SellingAktivaItem fetchExc(long Oid) throws DBException {
        try {
            SellingAktivaItem aktiva = new SellingAktivaItem();
            PstSellingAktivaItem pstAktiva = new PstSellingAktivaItem(Oid);
            aktiva.setOID(Oid);

            aktiva.setSellingAktivaId(pstAktiva.getlong(FLD_AKTIVA_ID));
            aktiva.setQty(pstAktiva.getInt(FLD_QTY));
            aktiva.setPriceSelling(pstAktiva.getlong(FLD_PRICE));
            aktiva.setTotalPriceSelling(pstAktiva.getdouble(FLD_TOTAL_PRICE));

            return aktiva;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstSellingAktivaItem(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(SellingAktivaItem aktiva) throws DBException {
        try {
            PstSellingAktivaItem pstAktiva = new PstSellingAktivaItem(0);

            pstAktiva.setLong(FLD_AKTIVA_ID, aktiva.getAktivaId());
            pstAktiva.setLong(FLD_SELLING_AKTIVA_ID, aktiva.getSellingAktivaId());
            pstAktiva.setInt(FLD_QTY, aktiva.getQty());
            pstAktiva.setDouble(FLD_PRICE, aktiva.getPriceSelling());
            pstAktiva.setDouble(FLD_TOTAL_PRICE, aktiva.getTotalPriceSelling());

            pstAktiva.insert();
            aktiva.setOID(pstAktiva.getlong(FLD_SELLING_AKTIVA_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstSellingAktivaItem(0), DBException.UNKNOWN);
        }
        return aktiva.getOID();
    }

    public static long updateExc(SellingAktivaItem aktiva) throws DBException {
        try {
            if (aktiva != null && aktiva.getOID() != 0) {
                PstSellingAktivaItem pstAktiva = new PstSellingAktivaItem(aktiva.getOID());

                pstAktiva.setLong(FLD_AKTIVA_ID, aktiva.getAktivaId());
                pstAktiva.setLong(FLD_SELLING_AKTIVA_ID, aktiva.getSellingAktivaId());
                pstAktiva.setInt(FLD_QTY, aktiva.getQty());
                pstAktiva.setDouble(FLD_PRICE, aktiva.getPriceSelling());
                pstAktiva.setDouble(FLD_TOTAL_PRICE, aktiva.getTotalPriceSelling());

                pstAktiva.update();
                return aktiva.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstSellingAktivaItem(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long Oid) throws DBException {
        try {
            PstSellingAktivaItem pstAktiva = new PstSellingAktivaItem(Oid);
            pstAktiva.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstSellingAktivaItem(0), DBException.UNKNOWN);
        }
        return Oid;
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_SELLING_AKTIVA_ITEM + " ";
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;

                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    break;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                SellingAktivaItem aktiva = new SellingAktivaItem();
                resultToObject(rs, aktiva);
                lists.add(aktiva);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstSellingAktivaItem().getClass().getName() + ".list() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }

    private static void resultToObject(ResultSet rs, SellingAktivaItem aktiva) {
        try {
            aktiva.setOID(rs.getLong(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_SELLING_AKTIVA_ITEM_ID]));
            aktiva.setSellingAktivaId(rs.getLong(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_SELLING_AKTIVA_ID]));
            aktiva.setAktivaId(rs.getLong(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_AKTIVA_ID]));
            aktiva.setQty(rs.getInt(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_QTY]));
            aktiva.setPriceSelling(rs.getDouble(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_PRICE]));
            aktiva.setTotalPriceSelling(rs.getDouble(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_TOTAL_PRICE]));

        } catch (Exception e) {
            System.out.println("resultToObject() " + e.toString());
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_SELLING_AKTIVA_ID] + ") " +
                    " FROM " + TBL_SELLING_AKTIVA_ITEM;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            return count;
        } catch (Exception e) {
            System.out.println(e);
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }


    /** gadnyana
     * mencari list item berdasarkan oid main (order aktiva)
     * @param oidSellingAktiva
     * @return
     */
    public static Vector getListItem(long oidSellingAktiva) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " +
                    " IT." + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_SELLING_AKTIVA_ITEM_ID] +
                    " ,IT." + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_QTY] +
                    " ,IT." + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_PRICE] +
                    " ,IT." + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_TOTAL_PRICE] +
                    " ,IT." + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_AKTIVA_ID] +
                    " ,MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_KODE] +
                    " ,MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_NAME] +
                    " ,MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_HARGA_PEROLEHAN] +
                    " ,MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_NILAI_RESIDU] +
                    " ,MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_AKTIVA] +
                    " ,MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_AKM_PENYUSUTAN] +
                    " ,MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_BYA_PENYUSUTAN] +
                    " ,MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_LB_PENJ_AKTIVA] +
                    " ,MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_RG_PENJ_AKTIVA] +
                    " FROM " + TBL_SELLING_AKTIVA_ITEM + " AS IT " +
                    " INNER JOIN " + PstSellingAktiva.TBL_SELLING_AKTIVA + " AS OD " +
                    " ON IT." + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_SELLING_AKTIVA_ID] +
                    " = OD." + PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_SELLING_AKTIVA_ID] +
                    " INNER JOIN " + PstModulAktiva.TBL_AKTIVA + " AS MA " +
                    " ON IT." + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_AKTIVA_ID] +
                    " = MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_AKTIVA_ID] +
                    " WHERE OD." + PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_SELLING_AKTIVA_ID] + "=" + oidSellingAktiva +
                    " ORDER BY MA." + PstModulAktiva.fieldNames[PstModulAktiva.FLD_KODE];
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            System.out.println(sql);
            while (rs.next()) {
                SellingAktivaItem orderAktivaItem = new SellingAktivaItem();
                ModulAktiva aktiva = new ModulAktiva();
                Vector vect = new Vector();

                orderAktivaItem.setOID(rs.getLong(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_SELLING_AKTIVA_ITEM_ID]));
                orderAktivaItem.setQty(rs.getInt(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_QTY]));
                orderAktivaItem.setPriceSelling(rs.getDouble(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_PRICE]));
                orderAktivaItem.setTotalPriceSelling(rs.getDouble(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_TOTAL_PRICE]));
                orderAktivaItem.setAktivaId(rs.getLong(PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_AKTIVA_ID]));
                vect.add(orderAktivaItem); 

                aktiva.setKode(rs.getString(PstModulAktiva.fieldNames[PstModulAktiva.FLD_KODE]));
                aktiva.setName(rs.getString(PstModulAktiva.fieldNames[PstModulAktiva.FLD_NAME]));
                aktiva.setHargaPerolehan(rs.getDouble(PstModulAktiva.fieldNames[PstModulAktiva.FLD_HARGA_PEROLEHAN]));
                aktiva.setNilaiResidu(rs.getDouble(PstModulAktiva.fieldNames[PstModulAktiva.FLD_NILAI_RESIDU]));
                aktiva.setIdPerkiraanAktiva(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_AKTIVA]));
                aktiva.setIdPerkiraanAkmPenyusutan(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_AKM_PENYUSUTAN]));
                aktiva.setIdPerkiraanByaPenyusutan(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_BYA_PENYUSUTAN]));
                aktiva.setIdPerkiraanLbPenjAktiva(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_LB_PENJ_AKTIVA]));
                aktiva.setIdPerkiraanRgPenjAktiva(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_RG_PENJ_AKTIVA]));                
                vect.add(aktiva);

                lists.add(vect);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstSellingAktivaItem().getClass().getName() + ".list() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }


    /** gadnyana
     * untuk mencvari total order berdasarkan oid order
     * @return
     */
    public static double getTotalSellingAktivaItem(long oidSellingAktiva) {
        DBResultSet dbrs = null;
        double total = 0.0;
        int totalQty = 0;
        try {
            String sql = "SELECT " +
                    " SUM(IT." + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_TOTAL_PRICE] + ")" +
                    ", SUM(IT." + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_QTY] + ")"+
                    " FROM " + TBL_SELLING_AKTIVA_ITEM + " AS IT " +
                    " WHERE IT." + PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_SELLING_AKTIVA_ID] + "=" + oidSellingAktiva;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                total = rs.getDouble(1);
                totalQty = rs.getInt(2);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstSellingAktivaItem().getClass().getName() + ".list() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return total;
    }
    
    public static int getTotalQuantitySellingAktivaItem(long oidSellingAktiva) {
        DBResultSet dbrs = null;        
        int totalQty = 0;
        try {
            String sql = "SELECT " +
                    " SUM(IT." + PstSellingAktivaItem.fieldNames[PstSellingAktivaItem.FLD_QTY] + ")"+
                    " FROM " + TBL_SELLING_AKTIVA_ITEM + " AS IT " +
                    " WHERE IT." + PstSellingAktiva.fieldNames[PstSellingAktiva.FLD_SELLING_AKTIVA_ID] + "=" + oidSellingAktiva;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while (rs.next()) {                
                totalQty = rs.getInt(1);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstSellingAktivaItem().getClass().getName() + ".list() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return totalQty;
    }
    
    
}
