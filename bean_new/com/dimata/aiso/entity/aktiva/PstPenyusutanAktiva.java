// Generated by Together

package com.dimata.aiso.entity.aktiva;

import com.dimata.aiso.db.*;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.qdep.entity.Entity;

import java.sql.Connection;
import java.util.Vector;
import java.sql.ResultSet;

public class PstPenyusutanAktiva extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc {

    public static final String TBL_PENYUSUTAN_AKTIVA = "aiso_aktiva_penyusutan";
    public static final int FLD_PENYUSUTAN_ID = 0;
    public static final int FLD_AKTIVA_ID = 1;
    public static final int FLD_PERIODE_ID = 2;
    public static final int FLD_VALUE_PNY = 3;

    public static String[] fieldNames = {
        "AKTIVA_PENYUSUTAN_ID",
        "AKTIVA_ID",
        "PERIODE_ID",
        "VALUE_PNY"
    };

    public static int[] fieldTypes = {
        TYPE_PK + TYPE_ID + TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_FLOAT
    };

    public PstPenyusutanAktiva() {
    }

    public PstPenyusutanAktiva(int i) throws DBException {
        super(new PstPenyusutanAktiva());
    }

    public PstPenyusutanAktiva(String sOid) throws DBException {
        super(new PstPenyusutanAktiva(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public PstPenyusutanAktiva(long lOid) throws DBException {
        super(new PstPenyusutanAktiva(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }

        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_PENYUSUTAN_AKTIVA;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstPenyusutanAktiva().getClass().getName();
    }

    public long fetchExc(Entity ent) throws DBException {
        PenyusutanAktiva aktiva = fetchExc(ent.getOID());
        ent = (Entity) aktiva;
        return aktiva.getOID();
    }

    public long insertExc(Entity ent) throws DBException {
        return insertExc((PenyusutanAktiva) ent);
    }

    public long updateExc(Entity ent) throws DBException {
        return updateExc((PenyusutanAktiva) ent);
    }

    public long deleteExc(Entity ent) throws DBException {
        if (ent == null) {
            throw  new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static PenyusutanAktiva fetchExc(long Oid) throws DBException {
        try {
            PenyusutanAktiva aktiva = new PenyusutanAktiva();
            PstPenyusutanAktiva pstAktiva = new PstPenyusutanAktiva(Oid);
            aktiva.setOID(Oid);

            aktiva.setAktivaId(pstAktiva.getlong(FLD_AKTIVA_ID));
            aktiva.setPeriodeId(pstAktiva.getlong(FLD_PERIODE_ID));
            aktiva.setValue_pny(pstAktiva.getdouble(FLD_VALUE_PNY));

            return aktiva;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPenyusutanAktiva(0), DBException.UNKNOWN);
        }
    }
    
    public static long insertExc(PenyusutanAktiva aktiva) throws DBException {
	return insertExc(aktiva, null);
    }
    
    public static long insertExc(PenyusutanAktiva aktiva, Connection con) throws DBException {
        try {
            PstPenyusutanAktiva pstAktiva = new PstPenyusutanAktiva(0);

            pstAktiva.setLong(FLD_AKTIVA_ID, aktiva.getAktivaId());
            pstAktiva.setLong(FLD_PERIODE_ID, aktiva.getPeriodeId());
            pstAktiva.setDouble(FLD_VALUE_PNY, aktiva.getValue_pny());
	    
	    if(con == null){
		pstAktiva.insert();
	    }else{
		pstAktiva.insertTran(con);
	    }
            aktiva.setOID(pstAktiva.getlong(FLD_PENYUSUTAN_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPenyusutanAktiva(0), DBException.UNKNOWN);
        }
        return aktiva.getOID();
    }

    public static long updateExc(PenyusutanAktiva aktiva) throws DBException {
	return updateExc(aktiva, null);
    }
    
    public static long updateExc(PenyusutanAktiva aktiva, Connection con) throws DBException {
        try {
            if (aktiva != null && aktiva.getOID() != 0) {
                PstPenyusutanAktiva pstAktiva = new PstPenyusutanAktiva(aktiva.getOID());

                pstAktiva.setLong(FLD_AKTIVA_ID, aktiva.getAktivaId());
                pstAktiva.setLong(FLD_PERIODE_ID, aktiva.getPeriodeId());
                pstAktiva.setDouble(FLD_VALUE_PNY, aktiva.getValue_pny());
		
		if(con == null){
		    pstAktiva.update();
		}else{
		    pstAktiva.updateTran(con);
		}
		return aktiva.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPenyusutanAktiva(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long Oid) throws DBException {
	return deleteExc(Oid, null);
    }
    
    public static long deleteExc(long Oid, Connection con) throws DBException {
        try {
            PstPenyusutanAktiva pstAktiva = new PstPenyusutanAktiva(Oid);
	    if(con == null){
		pstAktiva.delete();
	    }else{
		pstAktiva.deleteTran(con);
	    }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPenyusutanAktiva(0), DBException.UNKNOWN);
        }
        return Oid;
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_PENYUSUTAN_AKTIVA + " ";
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;

                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    break;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                PenyusutanAktiva aktiva = new PenyusutanAktiva();
                resultToObject(rs, aktiva);
                lists.add(aktiva);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstPenyusutanAktiva().getClass().getName() + ".list() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }

    private static void resultToObject(ResultSet rs, PenyusutanAktiva aktiva) {
        try {
            aktiva.setOID(rs.getLong(PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_PENYUSUTAN_ID]));
            aktiva.setAktivaId(rs.getLong(PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_AKTIVA_ID]));
            aktiva.setPeriodeId(rs.getLong(PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_PERIODE_ID]));
            aktiva.setValue_pny(rs.getDouble(PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_VALUE_PNY]));

        } catch (Exception e) {
            System.out.println("resultToObject() " + e.toString());
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_PENYUSUTAN_ID] + ") " +
                    " FROM " + TBL_PENYUSUTAN_AKTIVA;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            return count;
        } catch (Exception e) {
            System.out.println(e);
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * pengecekan penyusutan di tabel penyusutan
     * @return
     */
    public static PenyusutanAktiva existPenyusutanAktiva(long oidAktiva, long Period) {
        PenyusutanAktiva penyusutanAktiva = new PenyusutanAktiva();
        try {
            String where = PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_AKTIVA_ID] + "=" + oidAktiva +
                    " AND " + PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_PERIODE_ID] + "=" + Period;
            Vector vectPrev = PstPenyusutanAktiva.list(0, 0, where, "");
            if (vectPrev != null && vectPrev.size() > 0) {
                penyusutanAktiva = (PenyusutanAktiva) vectPrev.get(0);
            }
        } catch (Exception e) {
        }
        return penyusutanAktiva;
    }

    /**
     * untuk mencari jumlah total
     * nilai yang sudah di susutkan
     * @param oidAktiva
     * @param Period
     * @return
     */
    public static double getTotalNilaiSusut(long oidAktiva) {
        double total = 0.0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM("+PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_VALUE_PNY]+") "+
                    " FROM "+PstPenyusutanAktiva.TBL_PENYUSUTAN_AKTIVA+
                    " WHERE "+PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_AKTIVA_ID]+"="+oidAktiva;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                total = rs.getDouble(1);
            }
	    rs.close();
        } catch (Exception e) {
            System.out.println("getTotalNilaiSusut : "+e.toString());
        }
        return total;
    }
}
