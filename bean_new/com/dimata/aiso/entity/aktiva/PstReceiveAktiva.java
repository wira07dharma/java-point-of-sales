// Generated by Together

package com.dimata.aiso.entity.aktiva;

import com.dimata.aiso.db.*;
import com.dimata.aiso.entity.jurnal.JurnalUmum;
import com.dimata.aiso.entity.jurnal.PstJurnalUmum;
import com.dimata.aiso.entity.masterdata.ModulAktiva;
import com.dimata.aiso.entity.masterdata.PstAccountLink;
import com.dimata.aiso.entity.masterdata.PstModulAktiva;
import com.dimata.aiso.entity.masterdata.PstPerkiraan;
import com.dimata.aiso.entity.periode.Periode;
import com.dimata.aiso.entity.periode.PstPeriode;
import com.dimata.aiso.session.admin.SessUserSession;
import com.dimata.aiso.session.aktiva.SessReceiveAktiva;
import com.dimata.common.entity.system.PstSystemProperty;
import com.dimata.interfaces.trantype.I_TransactionType;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_DocStatus;
import com.dimata.util.Formater;

import java.sql.Connection;
import java.util.Vector;
import java.sql.ResultSet;
import java.util.Date;
import javax.servlet.http.HttpSession;

public class PstReceiveAktiva extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc {

    public static final String TBL_RECEIVE_AKTIVA = "aiso_aktiva_receive";
    public static final int FLD_RECEIVE_AKTIVA_ID = 0;
    public static final int FLD_NOMOR_RECEIVE = 1;
    public static final int FLD_TANGGAL_RECEIVE = 2;
    public static final int FLD_SUPPLIER_ID = 3;
    public static final int FLD_TYPE_PEMBAYARAN = 4;
    public static final int FLD_ID_PERKIRAAN_PAYMENT = 5;
    public static final int FLD_ID_PERKIRAAN_DP = 6;
    public static final int FLD_ID_CURRENCY = 7;
    public static final int FLD_COUNTER = 8;
    public static final int FLD_VALUE_RATE = 9;
    public static final int FLD_DOWN_PAYMENT = 10;
    public static final int FLD_ORDER_AKTIVA_ID = 11;
    public static final int FLD_NOMOR_INVOICE = 12;
    public static final int FLD_RECEIVE_STATUS = 13;
     public static final int FLD_ARAP_MAIN_STATUS = 14;

    public static String[] fieldNames = {
        "RECEIVE_AKTIVA_ID",
        "NOMOR_RECEIVE",
        "TANGGAL_RECEIVE",
        "SUPPLIER_ID",
        "TYPE_PEMBAYARAN",
        "ID_PERKIRAAN_PAYMENT",
        "ID_PERKIRAAN_DP",
        "ID_CURRENCY",
        "COUNTER",
        "VALUE_RATE",
        "DOWN_PAYMENT",
        "ORDER_AKTIVA_ID",
        "NOMOR_INVOICE",
        "RECEIVE_STATUS",
        "ARAP_MAIN_STATUS"
    };

    public static int[] fieldTypes = {
        TYPE_PK + TYPE_ID + TYPE_LONG,
        TYPE_STRING,
        TYPE_DATE,
        TYPE_LONG,
        TYPE_INT,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_LONG,
        TYPE_STRING,
        TYPE_INT,
        TYPE_INT
    };

    public PstReceiveAktiva() {
    }

    public PstReceiveAktiva(int i) throws DBException {
        super(new PstReceiveAktiva());
    }

    public PstReceiveAktiva(String sOid) throws DBException {
        super(new PstReceiveAktiva(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public PstReceiveAktiva(long lOid) throws DBException {
        super(new PstReceiveAktiva(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }

        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_RECEIVE_AKTIVA;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstReceiveAktiva().getClass().getName();
    }

    public long fetchExc(Entity ent) throws DBException {
        ReceiveAktiva aktiva = fetchExc(ent.getOID());
        ent = (Entity) aktiva;
        return aktiva.getOID();
    }

    public long insertExc(Entity ent) throws DBException {
        return insertExc((ReceiveAktiva) ent);
    }

    public long updateExc(Entity ent) throws DBException {
        return updateExc((ReceiveAktiva) ent);
    }

    public long deleteExc(Entity ent) throws DBException {
        if (ent == null) {
            throw  new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static ReceiveAktiva fetchExc(long Oid) throws DBException {
        try {
            ReceiveAktiva aktiva = new ReceiveAktiva();
            PstReceiveAktiva pstAktiva = new PstReceiveAktiva(Oid);
            aktiva.setOID(Oid);

            aktiva.setNomorReceive(pstAktiva.getString(FLD_NOMOR_RECEIVE));
            aktiva.setTanggalReceive(pstAktiva.getDate(FLD_TANGGAL_RECEIVE));
            aktiva.setTypePembayaran(pstAktiva.getInt(FLD_TYPE_PEMBAYARAN));
            aktiva.setSupplierId(pstAktiva.getlong(FLD_SUPPLIER_ID));
            aktiva.setIdPerkiraanPayment(pstAktiva.getlong(FLD_ID_PERKIRAAN_PAYMENT));
            aktiva.setIdPerkiraanDp(pstAktiva.getlong(FLD_ID_PERKIRAAN_DP));
            aktiva.setIdCurrency(pstAktiva.getlong(FLD_ID_CURRENCY));
            aktiva.setCounter(pstAktiva.getInt(FLD_COUNTER));
            aktiva.setValueRate(pstAktiva.getdouble(FLD_VALUE_RATE));
            aktiva.setDownPayment(pstAktiva.getdouble(FLD_DOWN_PAYMENT));
            aktiva.setOrderAktivaId(pstAktiva.getlong(FLD_ORDER_AKTIVA_ID));
            aktiva.setNomorInvoice(pstAktiva.getString(FLD_NOMOR_INVOICE));
            aktiva.setReceiveStatus(pstAktiva.getInt(FLD_RECEIVE_STATUS));
            aktiva.setArApMainStatus(pstAktiva.getInt(FLD_ARAP_MAIN_STATUS));

            return aktiva;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstReceiveAktiva(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(ReceiveAktiva aktiva) throws DBException{
	return insertExc(aktiva, null);
    }
    
    public static long insertExc(ReceiveAktiva aktiva, Connection con) throws DBException {
        try {
            PstReceiveAktiva pstAktiva = new PstReceiveAktiva(0);

            pstAktiva.setString(FLD_NOMOR_RECEIVE, aktiva.getNomorReceive());
            pstAktiva.setInt(FLD_TYPE_PEMBAYARAN, aktiva.getTypePembayaran());
            pstAktiva.setDate(FLD_TANGGAL_RECEIVE, aktiva.getTanggalReceive());
            pstAktiva.setLong(FLD_SUPPLIER_ID, aktiva.getSupplierId());
            pstAktiva.setLong(FLD_ID_PERKIRAAN_PAYMENT, aktiva.getIdPerkiraanPayment());
            pstAktiva.setLong(FLD_ID_PERKIRAAN_DP, aktiva.getIdPerkiraanDp());
            pstAktiva.setLong(FLD_ID_CURRENCY, aktiva.getIdCurrency());
            pstAktiva.setInt(FLD_COUNTER, aktiva.getCounter());
            pstAktiva.setDouble(FLD_VALUE_RATE, aktiva.getValueRate());
            pstAktiva.setDouble(FLD_DOWN_PAYMENT, aktiva.getDownPayment());
            pstAktiva.setLong(FLD_ORDER_AKTIVA_ID, aktiva.getOrderAktivaId());
            pstAktiva.setString(FLD_NOMOR_INVOICE, aktiva.getNomorInvoice());
            pstAktiva.setInt(FLD_RECEIVE_STATUS, aktiva.getReceiveStatus());
            pstAktiva.setInt(FLD_ARAP_MAIN_STATUS, aktiva.getArApMainStatus());
	    
	    if(con == null){
		pstAktiva.insert();
	    }else{
		pstAktiva.insertTran(con);
	    }
            aktiva.setOID(pstAktiva.getlong(FLD_RECEIVE_AKTIVA_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstReceiveAktiva(0), DBException.UNKNOWN);
        }
        return aktiva.getOID();
    }

    public static long updateExc(ReceiveAktiva aktiva) throws DBException {
	return updateExc(aktiva, null);
    }
    
    public static long updateExc(ReceiveAktiva aktiva, Connection con) throws DBException {
        try {
            if (aktiva != null && aktiva.getOID() != 0) {
                PstReceiveAktiva pstAktiva = new PstReceiveAktiva(aktiva.getOID());

                pstAktiva.setString(FLD_NOMOR_RECEIVE, aktiva.getNomorReceive());
                pstAktiva.setInt(FLD_TYPE_PEMBAYARAN, aktiva.getTypePembayaran());
                pstAktiva.setDate(FLD_TANGGAL_RECEIVE, aktiva.getTanggalReceive());
                pstAktiva.setLong(FLD_SUPPLIER_ID, aktiva.getSupplierId());
                pstAktiva.setLong(FLD_ID_PERKIRAAN_PAYMENT, aktiva.getIdPerkiraanPayment());
                pstAktiva.setLong(FLD_ID_PERKIRAAN_DP, aktiva.getIdPerkiraanDp());
                pstAktiva.setLong(FLD_ID_CURRENCY, aktiva.getIdCurrency());
                pstAktiva.setInt(FLD_COUNTER, aktiva.getCounter());
                pstAktiva.setDouble(FLD_VALUE_RATE, aktiva.getValueRate());
                pstAktiva.setDouble(FLD_DOWN_PAYMENT, aktiva.getDownPayment());
                pstAktiva.setLong(FLD_ORDER_AKTIVA_ID, aktiva.getOrderAktivaId());
                pstAktiva.setString(FLD_NOMOR_INVOICE, aktiva.getNomorInvoice());
                pstAktiva.setInt(FLD_RECEIVE_STATUS, aktiva.getReceiveStatus());
                pstAktiva.setInt(FLD_ARAP_MAIN_STATUS, aktiva.getArApMainStatus());
		
		if(con == null){
		    pstAktiva.update();
		}else{
		    pstAktiva.updateTran(con);
		}
		return aktiva.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstReceiveAktiva(0), DBException.UNKNOWN);
        }
        return 0;
    }

     public static long deleteExc(long Oid) throws DBException {
	return deleteExc(Oid, null);
     }
     
    public static long deleteExc(long Oid, Connection con) throws DBException {
        try {
            PstReceiveAktiva pstAktiva = new PstReceiveAktiva(Oid);
	    if(con == null){
		pstAktiva.delete();
	    }else{
		pstAktiva.deleteTran(con);
	    }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstReceiveAktiva(0), DBException.UNKNOWN);
        }
        return Oid;
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_RECEIVE_AKTIVA + " ";
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;

                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    break;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                ReceiveAktiva aktiva = new ReceiveAktiva();
                resultToObject(rs, aktiva);
                lists.add(aktiva);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstReceiveAktiva().getClass().getName() + ".list() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }

    private static void resultToObject(ResultSet rs, ReceiveAktiva aktiva) {
        try {
            aktiva.setOID(rs.getLong(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_RECEIVE_AKTIVA_ID]));
            aktiva.setNomorReceive(rs.getString(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_NOMOR_RECEIVE]));
            aktiva.setTanggalReceive(rs.getDate(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_TANGGAL_RECEIVE]));
            aktiva.setTypePembayaran(rs.getInt(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_TYPE_PEMBAYARAN]));
            aktiva.setSupplierId(rs.getLong(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_SUPPLIER_ID]));
            aktiva.setIdPerkiraanPayment(rs.getLong(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_ID_PERKIRAAN_PAYMENT]));
            aktiva.setIdCurrency(rs.getLong(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_ID_CURRENCY]));
            aktiva.setCounter(rs.getInt(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_COUNTER]));
            aktiva.setValueRate(rs.getDouble(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_VALUE_RATE]));
            aktiva.setDownPayment(rs.getDouble(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_DOWN_PAYMENT]));
            aktiva.setOrderAktivaId(rs.getLong(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_ORDER_AKTIVA_ID]));
            aktiva.setNomorInvoice(rs.getString(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_NOMOR_INVOICE]));
            aktiva.setReceiveStatus(rs.getInt(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_RECEIVE_STATUS]));
            aktiva.setArApMainStatus(rs.getInt(PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_ARAP_MAIN_STATUS]));

        } catch (Exception e) {
            System.out.println("resultToObject() " + e.toString());
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_RECEIVE_AKTIVA_ID] + ") " +
                    " FROM " + TBL_RECEIVE_AKTIVA;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            return count;
        } catch (Exception e) {
            System.out.println(e);
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }


    public static Vector getCounter(){
        DBResultSet dbrs = null;
        Vector vResult = new Vector(1,1);
        try{
            String sql = "SELECT "+fieldNames[FLD_COUNTER]+" FROM "+TBL_RECEIVE_AKTIVA+" ORDER BY "+fieldNames[FLD_COUNTER]+" DESC ";
            System.out.println("SQL PstReceiveAktiva.getCounter ::: "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                int iCounter = rs.getInt(fieldNames[FLD_COUNTER]);
                vResult.add(""+iCounter);
            }
        }catch(Exception e){}
        return vResult;
    }
    
    public static int getLastCounter(){
        int iResult = 0;
        Vector vCounter = new Vector();
        try{
           vCounter = getCounter();
           if(vCounter != null && vCounter.size() > 0){
                for(int i = 0; i < vCounter.size(); i++){
                    iResult = Integer.parseInt(vCounter.get(0).toString());
                }
           }
        }catch(Exception e){}
        return iResult;
    }
    
    /**
     *  untuk pembuatan nomor doc aktiva
     * @param dt
     * @param cnt
     * @return
     */
    public static ReceiveAktiva createReceiveNomor(ReceiveAktiva receiveAktiva) {
        String nmr = "";
        try {
            nmr = Formater.formatDate(receiveAktiva.getTanggalReceive(), "yyMMdd");
            String where = PstReceiveAktiva.fieldNames[PstReceiveAktiva.FLD_TANGGAL_RECEIVE] + " = '" + Formater.formatDate(receiveAktiva.getTanggalReceive(), "yyyy-MM-dd") + "'";
            int cnt = getCount(where) + 1;
            receiveAktiva.setCounter(cnt);
            switch (String.valueOf(cnt).length()) {
                case 1:
                    nmr = nmr + "-REC-" +"00" + cnt;
                    break;
                case 2:
                    nmr = nmr + "-REC-" +"0" + cnt;
                    break;
                default:
                    nmr = nmr + "-REC-" +"" + cnt;
            }
            receiveAktiva.setNomorReceive(nmr);
        } catch (Exception e) {
            System.out.println(e);
            receiveAktiva.setNomorReceive("tgl-000");
        }
        return receiveAktiva;
    }
    
    public static String composeRecNomor(long lPeriodOid){
        String sResult = "";
        Date recDate = new Date();
        PstPeriode pstPeriod = new PstPeriode();
        String sPrefix = "";
        String sDate = "";
        String sMonth = "";
        String sYear = "";
        int iCounter = 0;
        String sCounter = "";
        try{
            iCounter = getLastCounter() + 1;
            sCounter = String.valueOf(iCounter);
        }catch(Exception e){}
        try{
            recDate = pstPeriod.getFirstDateOfPeriod(lPeriodOid);
            if(recDate != null){
                sDate = Formater.formatDate(recDate,"dd MM yyyy");
                if(sDate.length() > 0){
                    sYear = sDate.substring(8,10);
                    sMonth = sDate.substring(3,5);
                    if(sYear.length() > 0 && sMonth.length() > 0){
                        sPrefix = sYear + sMonth;
                    }
                }
            }
        }catch(Exception e){}
        if(sPrefix.length() > 0){
            switch(sCounter.length()){
                case 1:
                    sResult = sPrefix+"-REC-00"+sCounter;
                    break;
                case 2:
                    sResult = sPrefix+"-REC-0"+sCounter;
                    break;
                default:
                    sResult = sPrefix+"-REC-"+sCounter;
                    break;    
            }
        }
        return sResult;
    }
    
    public static synchronized long insertReceiveAktiva(long lPeriodeId, long lAktivaId, ModulAktiva objModulAktiva, long lUserId, Date ownDate, int iQty){
	return insertReceiveAktiva(lPeriodeId, lAktivaId, objModulAktiva, lUserId, ownDate, iQty, null);
    }
    
    public static synchronized long insertReceiveAktiva(long lPeriodeId, long lAktivaId, ModulAktiva objModulAktiva, long lUserId, Date ownDate, int iQty, Connection con){
        long lResult = 0;
            try{
                ReceiveAktiva objRecAktiva = new ReceiveAktiva();
                String sIdSupplier = "";
                String sCurrency = "";
                long lSupplierId = 0;
                long lCurrencyId = 0;
                long lPenyId = 0;
		long idPerkiraanPayment = 0;
                try{
                    idPerkiraanPayment = objModulAktiva.getIdPerkiraanPayment();
                }catch(Exception e){}
                try{
                    sIdSupplier = (String)PstSystemProperty.getValueByName("SELF_SUPPLIER_ID");
                    sCurrency = (String)PstSystemProperty.getValueByName("BOOK_TYPE");
                }catch(Exception e){}
                
		if(sIdSupplier != null && sIdSupplier.length() > 0){
		    lSupplierId = Long.parseLong(sIdSupplier);
		}
		
                if(sCurrency.length() > 0){
                    lCurrencyId = Long.parseLong(sCurrency);
                }
                
                Date receiveDate = new Date();
		Date startPeriodDate = new Date();
		Date endPeriodDate = new Date();
		Periode objPeriode = new Periode();
                String sNoReceive = "";
                if(lPeriodeId != 0){
                    try{
			objPeriode = PstPeriode.fetchExc(lPeriodeId);
                        startPeriodDate = objPeriode.getTglAwal();
			endPeriodDate = objPeriode.getTglAkhir();
                        sNoReceive = composeRecNomor(lPeriodeId);
			if((objModulAktiva.getTglPerolehan().equals(startPeriodDate) || objModulAktiva.getTglPerolehan().after(startPeriodDate)) 
			&& (objModulAktiva.getTglPerolehan().equals(endPeriodDate) || objModulAktiva.getTglPerolehan().before(endPeriodDate))){
			    receiveDate = objModulAktiva.getTglPerolehan();
			}else{
			    receiveDate = startPeriodDate;
			}
                    }catch(Exception e){}
                }
                
               
                
                int iCounter = 0;
                try{
                    iCounter = getLastCounter() + 1;
                }catch(Exception e){}                
                objRecAktiva.setArApMainStatus(I_DocStatus.DOCUMENT_STATUS_POSTED);                
                objRecAktiva.setDownPayment(objModulAktiva.getDownPayment());
                objRecAktiva.setIdPerkiraanDp(objModulAktiva.getIdPerkiraanDp());
                objRecAktiva.setOrderAktivaId(0);
                objRecAktiva.setReceiveStatus(I_DocStatus.DOCUMENT_STATUS_POSTED);
                objRecAktiva.setIdPerkiraanPayment(idPerkiraanPayment); 
                objRecAktiva.setSupplierId(objModulAktiva.getIdSupplier() == 0? lSupplierId : objModulAktiva.getIdSupplier());
                objRecAktiva.setTanggalReceive(receiveDate);
                objRecAktiva.setTypePembayaran(objModulAktiva.getTransType());
                objRecAktiva.setIdCurrency(lCurrencyId);
                objRecAktiva.setValueRate(1);
                objRecAktiva.setCounter(iCounter);
                objRecAktiva.setNomorReceive(sNoReceive);
                objRecAktiva.setNomorInvoice("RCV-"+String.valueOf(iCounter));
                try{
                    lResult = insertExc(objRecAktiva, con);
                    if(objRecAktiva.getOID() != 0){
                        lPenyId = getIdPenyByRecAktivaId(lAktivaId,lPeriodeId);
			if(con == null){
			    lResult = PstReceiveAktivaItem.insertRecAktivaItem(objRecAktiva.getOID(),lAktivaId,iQty);
			    lResult = SessReceiveAktiva.postingReceiveAktiva(lCurrencyId,lUserId,lPeriodeId,objRecAktiva.getOID(),objRecAktiva,objModulAktiva,ownDate);  
			    if(objRecAktiva.getTypePembayaran() == I_TransactionType.TIPE_TRANSACTION_AWAL){
				if(ownDate != null){
				    objRecAktiva.setTanggalReceive(ownDate);                            
				    long lUpdate = PstReceiveAktiva.updateExc(objRecAktiva);
				}
			     lResult =  SessReceiveAktiva.postingJournalAkmPeny(lCurrencyId,lUserId,lPeriodeId,lPenyId,objRecAktiva);
			    }
			}else{
			    lResult = PstReceiveAktivaItem.insertRecAktivaItem(objRecAktiva.getOID(),lAktivaId,iQty,con);
			    lResult = SessReceiveAktiva.postingReceiveAktiva(lCurrencyId,lUserId,lPeriodeId,objRecAktiva.getOID(),objRecAktiva,objModulAktiva,ownDate,con); 
			    if(objRecAktiva.getTypePembayaran() == I_TransactionType.TIPE_TRANSACTION_AWAL){
				if(ownDate != null){
				    objRecAktiva.setTanggalReceive(ownDate);                            
				    long lUpdate = PstReceiveAktiva.updateExc(objRecAktiva);
				}
			     lResult =  SessReceiveAktiva.postingJournalAkmPeny(lCurrencyId,lUserId,lPeriodeId,lPenyId,objRecAktiva,con);
			    }
			}
                    }
                }catch(Exception e){}
            }catch(Exception e){}
        return lResult;
    }
    
    public static long updateReceiveAktiva(long lAktivaId, ModulAktiva objModulAktiva, long lUserId, long lPeriodeId, Date ownDate, int iQty, double dAccDep, long lAccDpId){
	return updateReceiveAktiva(lAktivaId, objModulAktiva, lUserId, lPeriodeId, ownDate, iQty, dAccDep, lAccDpId, null);
    }
    
    public static long updateReceiveAktiva(long lAktivaId, ModulAktiva objModulAktiva, long lUserId, long lPeriodeId, Date ownDate, int iQty, double dAccDep, long lAccDpId, Connection con){
        long lResult = 0;
        long lRecAktivaId = 0;
        long lJurnalId = 0;
	long lJurnalAkmId = 0; 
	long lDepId = 0;
	long lUpdate = 0; 
	boolean bCheckDepPeriod = false;
        ReceiveAktiva objRecAktiva = new ReceiveAktiva();
	JurnalUmum objJurnalUmum = new JurnalUmum();
        try{
            lRecAktivaId = PstReceiveAktivaItem.getRecAktivaIdByAktivaId(lAktivaId);
	    boolean checkRecFA = false;
	    checkRecFA = SessReceiveAktiva.checkReceivedFA(lAktivaId);
            if(checkRecFA){
                try{
                    objRecAktiva = fetchExc(lRecAktivaId);
                    if(objRecAktiva != null){
                        objRecAktiva.setTanggalReceive(ownDate);
			objRecAktiva.setTypePembayaran(objModulAktiva.getTransType());
			objRecAktiva.setIdPerkiraanPayment(objModulAktiva.getIdPerkiraanPayment());
			if(objRecAktiva.getTypePembayaran() != I_TransactionType.TIPE_TRANSACTION_KREDIT){
			    objRecAktiva.setDownPayment(0);
			    objRecAktiva.setIdPerkiraanDp(0);
			}else{
			    if(objModulAktiva.getDownPayment() > 0){
				objRecAktiva.setDownPayment(objModulAktiva.getDownPayment());
				objRecAktiva.setIdPerkiraanDp(objModulAktiva.getIdPerkiraanDp());
			    }else{
				objRecAktiva.setDownPayment(0);
				objRecAktiva.setIdPerkiraanDp(0);
			    }
			}
                        lResult = updateExc(objRecAktiva);
                        if(objRecAktiva.getOID() != 0){
                            lUpdate = PstReceiveAktivaItem.updateRecAktivaItem(objRecAktiva.getOID(),lAktivaId, iQty,con);                                                         
                            lJurnalId = getJurnalIdByRecAktivaMain(objRecAktiva.getNomorReceive());
			    lJurnalAkmId = getJurnalIdByRecAktivaMain("AKM-"+objRecAktiva.getNomorReceive());
			    lDepId = getIdPenyByRecAktivaId(lAktivaId, lPeriodeId);
                            if(lJurnalId != 0){


				try{
				    objJurnalUmum = PstJurnalUmum.fetchExc(lJurnalId);
				}catch(Exception e){}
			    }
			    
			    if(lJurnalId != 0 && lAktivaId != 0){
				if(con == null){
				    SessReceiveAktiva.updateJournalFixedAssets(lJurnalId,lAktivaId,lAccDpId);
				}else{
				    SessReceiveAktiva.updateJournalFixedAssets(lJurnalId,lAktivaId,lAccDpId,con);
				}
                            }
			    
			    if(lAktivaId != 0){
				if(lJurnalAkmId != 0){
				    if(dAccDep == 0 && !bCheckDepPeriod){
					if(con == null){
					    lResult = SessReceiveAktiva.deleteJournalDetail(lJurnalAkmId);
					    lResult = PstJurnalUmum.deleteExc(lJurnalAkmId);
					}else{
					    lResult = SessReceiveAktiva.deleteJournalDetail(lJurnalAkmId, con);
					    lResult = PstJurnalUmum.deleteExc(lJurnalAkmId, con);
					}
				    }
				    String sDofRefNo = "AKM-"+objRecAktiva.getNomorReceive();
				    SessReceiveAktiva.updateJournalAkmFixedAssets(lJurnalAkmId,lAktivaId,sDofRefNo,con);
				}else{
				    if(dAccDep > 0 && objJurnalUmum.getBookType() != 0 && !bCheckDepPeriod){
					if(con == null){
					    lResult = SessReceiveAktiva.postingJournalAkmPeny(objJurnalUmum.getBookType(), lUserId, lPeriodeId, lDepId, objRecAktiva);
					}else{
					    lResult = SessReceiveAktiva.postingJournalAkmPeny(objJurnalUmum.getBookType(), lUserId, lPeriodeId, lDepId, objRecAktiva, con);
					}
				    }
				}
			    }
                        }
                    }
                }catch(Exception e){}
            }else{
		if(con == null){
		    lResult = insertReceiveAktiva(lPeriodeId,lAktivaId,objModulAktiva, lUserId,ownDate,iQty);
		}else{
		    lResult = insertReceiveAktiva(lPeriodeId,lAktivaId,objModulAktiva, lUserId,ownDate,iQty,con);
		}
            }
        }catch(Exception e){}
        return lResult;
    }
    
     public static long deleteReceiveAktiva(long lAktivaId){
	return deleteReceiveAktiva(lAktivaId, null);
     }
     
   public static long deleteReceiveAktiva(long lAktivaId, Connection con){
        long lRecAktivaId = 0;
	long lResult = 0;
        try{
            lRecAktivaId = PstReceiveAktivaItem.getRecAktivaIdByAktivaId(lAktivaId);
            if(lRecAktivaId != 0){
		if(con == null){
		    lResult = deleteExc(lRecAktivaId);
		}else{
		    lResult = deleteExc(lRecAktivaId,con);
		}
                if(lRecAktivaId != 0){
		    if(con == null){
			lResult = PstReceiveAktivaItem.deleteRecAktivaItem(lAktivaId);
		    }else{
			lResult = PstReceiveAktivaItem.deleteRecAktivaItem(lAktivaId,con);
		    }
                }
            }
        }catch(Exception e){}
	return lResult;
   }
   
   public static long getIdRecItemByIdRecMain(long lIdRecMain){
       DBResultSet dbrs = null; 
       long lResult = 0;
       try{
            String sql = "SELECT "+PstReceiveAktivaItem.fieldNames[PstReceiveAktivaItem.FLD_RECEIVE_AKTIVA_ITEM_ID]+
                        " FROM "+PstReceiveAktivaItem.TBL_RECEIVE_AKTIVA_ITEM+
                        " WHERE "+PstReceiveAktivaItem.fieldNames[PstReceiveAktivaItem.FLD_RECEIVE_AKTIVA_ID]+" = "+lIdRecMain;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                lResult = rs.getLong(PstReceiveAktivaItem.fieldNames[PstReceiveAktivaItem.FLD_RECEIVE_AKTIVA_ITEM_ID]);
            }
       }catch(Exception e){}
       return lResult;
   }
   
   
   public static long getJurnalIdByRecAktivaMain(String strWhClause){
        DBResultSet dbrs = null;
        long lResult = 0;
        try{
            String sql = "SELECT "+PstJurnalUmum.fieldNames[PstJurnalUmum.FLD_JURNALID]+
                        " FROM "+PstJurnalUmum.TBL_JURNAL_UMUM+
                        " WHERE "+PstJurnalUmum.fieldNames[PstJurnalUmum.FLD_REFERENCE_DOCUMENT]+" = '"+strWhClause+"'";
            
	    System.out.println("SQL PstReceiveAktiva.getJurnalIdByRecAktivaMain() ::::: "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                lResult = rs.getLong(PstJurnalUmum.fieldNames[PstJurnalUmum.FLD_JURNALID]);
            }
        }catch(Exception e){}
        return lResult;
   }
   
   public static long getIdPenyByRecAktivaId(long lAktivaId, long lPeriodeId){
        DBResultSet dbrs = null;
        long lResult = 0;   
        long lIdRecAktivaItem = 0;
        long lIdAktiva = 0;  
        try{
            String sql = "SELECT "+PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_PENYUSUTAN_ID]+
                        " FROM "+PstPenyusutanAktiva.TBL_PENYUSUTAN_AKTIVA+
                        " WHERE "+PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_AKTIVA_ID]+" = "+lAktivaId+
                        " AND "+PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_PERIODE_ID]+" = "+lPeriodeId;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                lResult = rs.getLong(PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_PENYUSUTAN_ID]);
            }
        }catch(Exception e){}    
        return lResult;
   }
   
   public static synchronized boolean checkPeriodeDep(long lAktivaId){
	boolean bResult = false;
	Vector vDep = new Vector(1,1);
	if(lAktivaId != 0){
	    try{
		String whClause = PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_AKTIVA_ID]+" = "+lAktivaId;
		vDep = PstPenyusutanAktiva.list(0, 0, whClause, "");
		if(vDep.size() > 1){
		    bResult = true;
		}
	    }catch(Exception e){}
	}
	return bResult;
   }
   
}
