/* Generated by Together */

package com.dimata.aiso.entity.jurnal;

// import from java

import java.io.*;
import java.sql.*;
import java.util.*;

// import qdep
import com.dimata.aiso.db.*;
import com.dimata.qdep.entity.Entity;

// import from aiso
import com.dimata.qdep.entity.I_PersintentExc;
//import com.dimata.aiso.entity.jurnal.PstJournalDistribution;
import com.dimata.aiso.entity.masterdata.PstPerkiraan;
import com.dimata.aiso.entity.masterdata.Perkiraan;


public class PstJurnalDetail extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc {
    public static final String TBL_JURNAL_DETAIL = "aiso_jurnal_detail";
    public static final int FLD_JDETAILID = 0;
    public static final int FLD_JURNALID = 1;
    public static final int FLD_IDPERKIRAAN = 2;
    public static final int FLD_DEBET = 3;
    public static final int FLD_KREDIT = 4;
    public static final int FLD_CURR_TYPE = 5;
    public static final int FLD_CURR_AMOUNT = 6;
    public static final int FLD_WEIGHT = 7;
    public static final int FLD_GENERAL_DETAIL_LINK = 8;
    public static final int FLD_NOTE = 9;

    public static String[] fieldNames =
            {
                "J_DETAIL_ID",
                "JURNAL_ID",
                "ID_PERKIRAAN",
                "DEBET",
                "KREDIT",
                "CURR_TYPE",
                "CURR_AMOUNT",
                "WEIGHT",
                "GENERAL_DETAIL_LINK",
                "NOTE"
            };

    public static int[] fieldTypes =
            {
                TYPE_PK + TYPE_LONG + TYPE_ID,
                TYPE_LONG,
                TYPE_LONG,
                TYPE_FLOAT,
                TYPE_FLOAT,
                TYPE_LONG,
                TYPE_FLOAT,
                TYPE_FLOAT,
                TYPE_LONG,
                TYPE_STRING
            };

    public static final int DATASTATUS_CLEAN = 0;
    public static final int DATASTATUS_ADD = 1;
    public static final int DATASTATUS_UPDATE = 2;
    public static final int DATASTATUS_DELETE = 3;

    public static final int SIDE_DEBET = 0;
    public static final int SIDE_CREDIT = 1;

    public PstJurnalDetail() {
    }

    public PstJurnalDetail(int i) throws DBException {
        super(new PstJurnalDetail());
    }


    public PstJurnalDetail(String sOid) throws DBException {
        super(new PstJurnalDetail(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }


    public PstJurnalDetail(long lOid) throws DBException {
        super(new PstJurnalDetail(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }

        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;

    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_JURNAL_DETAIL;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstJurnalDetail().getClass().getName();
    }

    public long fetchExc(Entity ent) throws DBException {
        JurnalDetail jurnaldetail = PstJurnalDetail.fetchExc(ent.getOID());
        ent = (Entity) jurnaldetail;
        return jurnaldetail.getOID();
    }

    public long insertExc(Entity ent) throws DBException {
        return PstJurnalDetail.insertExc((JurnalDetail) ent);
    }

    public long updateExc(Entity ent) throws DBException {
        return updateExc((JurnalDetail) ent);
    }

    public long deleteExc(Entity ent) throws DBException {
        return deleteExc((JurnalDetail) ent);
    }

    public static JurnalDetail fetchExc(long oid) throws DBException {
        try {
            JurnalDetail jurnaldetail = new JurnalDetail();
            PstJurnalDetail pJurnalDetail = new PstJurnalDetail(oid);
            jurnaldetail.setOID(oid);

            jurnaldetail.setJurnalIndex(pJurnalDetail.getlong(FLD_JURNALID));
            jurnaldetail.setIdPerkiraan(pJurnalDetail.getlong(FLD_IDPERKIRAAN));
            jurnaldetail.setDebet(pJurnalDetail.getdouble(FLD_DEBET));
            jurnaldetail.setKredit(pJurnalDetail.getdouble(FLD_KREDIT));
            jurnaldetail.setCurrType(pJurnalDetail.getlong(FLD_CURR_TYPE));
            jurnaldetail.setCurrAmount(pJurnalDetail.getdouble(FLD_CURR_AMOUNT));
            jurnaldetail.setWeight(pJurnalDetail.getdouble(FLD_WEIGHT));
            jurnaldetail.setGeneralDetailLink(pJurnalDetail.getlong(FLD_GENERAL_DETAIL_LINK));
            jurnaldetail.setNote(pJurnalDetail.getString(FLD_NOTE));

            return jurnaldetail;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstJurnalDetail(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(JurnalDetail jurnaldetail) throws DBException {
	return insertExc(jurnaldetail, null);
    }
    
    public static long insertExc(JurnalDetail jurnaldetail, Connection con) throws DBException {
        try {
            PstJurnalDetail pJurnalDetail = new PstJurnalDetail(0);

            pJurnalDetail.setLong(FLD_JURNALID, jurnaldetail.getJurnalIndex());
            System.out.println(jurnaldetail.getIdPerkiraan());
            pJurnalDetail.setLong(FLD_IDPERKIRAAN, jurnaldetail.getIdPerkiraan());
            pJurnalDetail.setDouble(FLD_DEBET, jurnaldetail.getDebet());
            pJurnalDetail.setDouble(FLD_KREDIT, jurnaldetail.getKredit());
            pJurnalDetail.setLong(FLD_CURR_TYPE, jurnaldetail.getCurrType());
            pJurnalDetail.setDouble(FLD_CURR_AMOUNT, jurnaldetail.getCurrAmount());
            pJurnalDetail.setDouble(FLD_WEIGHT, jurnaldetail.getWeight());
            pJurnalDetail.setLong(FLD_GENERAL_DETAIL_LINK, jurnaldetail.getGeneralDetailLink());
            pJurnalDetail.setString(FLD_NOTE, jurnaldetail.getNote());
	    
	    if(con == null){
		pJurnalDetail.insert();
	    }else{
		pJurnalDetail.insertTran(con);
	    }
            jurnaldetail.setOID(pJurnalDetail.getlong(FLD_JDETAILID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstJurnalDetail(0), DBException.UNKNOWN);
        }
        return jurnaldetail.getOID();
    }

    public static long updateExc(JurnalDetail jurnaldetail) throws DBException {
	return updateExc(jurnaldetail, null);
    }

    public static long updateExc(JurnalDetail jurnaldetail, Connection con) throws DBException {
        try {
            if (jurnaldetail.getOID() != 0) {
                PstJurnalDetail pJurnalDetail = new PstJurnalDetail(jurnaldetail.getOID());

                pJurnalDetail.setLong(FLD_JURNALID, jurnaldetail.getJurnalIndex());
                pJurnalDetail.setLong(FLD_IDPERKIRAAN, jurnaldetail.getIdPerkiraan());
                pJurnalDetail.setDouble(FLD_DEBET, jurnaldetail.getDebet());
                pJurnalDetail.setDouble(FLD_KREDIT, jurnaldetail.getKredit());
                pJurnalDetail.setLong(FLD_CURR_TYPE, jurnaldetail.getCurrType());
                pJurnalDetail.setDouble(FLD_CURR_AMOUNT, jurnaldetail.getCurrAmount());
                pJurnalDetail.setDouble(FLD_WEIGHT, jurnaldetail.getWeight());
                pJurnalDetail.setLong(FLD_GENERAL_DETAIL_LINK, jurnaldetail.getGeneralDetailLink());
                pJurnalDetail.setString(FLD_NOTE, jurnaldetail.getNote());
		
		if(con == null){
		    pJurnalDetail.update();
		}else{
		    pJurnalDetail.updateTran(con);
		}
                return jurnaldetail.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstJurnalDetail(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long oid) throws DBException{
	return deleteExc(oid, null);
    }
    
    public static long deleteExc(long oid, Connection objConnection) throws DBException {
        try {
            PstJurnalDetail pJurnalDetail = new PstJurnalDetail(oid);
	    if(objConnection == null){
		pJurnalDetail.delete();
	    }else{
		pJurnalDetail.deleteTran(objConnection);
	    }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstJurnalDetail(0), DBException.UNKNOWN);
        }
        return oid;
    }

    public static Vector listAll() {
        return list(0, 0, "", "");
    }

    public static Vector listWithAccountObj(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {

            String sql = "SELECT JD.*, AC.* FROM " + TBL_JURNAL_DETAIL + " AS JD INNER JOIN "+ PstPerkiraan.TBL_PERKIRAAN+" AS AC"+
                    " ON JD."+fieldNames[FLD_IDPERKIRAAN]+"=AC."+PstPerkiraan.fieldNames[PstPerkiraan.FLD_IDPERKIRAAN]+" ";

            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;

                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    break;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                JurnalDetail jurnaldetail = new JurnalDetail();
                Perkiraan perk = new Perkiraan();
                resultToObject(rs, jurnaldetail);
                resultToPerkiraanObject(rs, perk);
                jurnaldetail.setAccount(perk);
                lists.add(jurnaldetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println("Exc when list jurnal detail : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    
    private static void resultToPerkiraanObject(ResultSet rs, Perkiraan perkiraan) {
        try {
            perkiraan.setOID(rs.getLong(PstPerkiraan.fieldNames[PstPerkiraan.FLD_IDPERKIRAAN]));
            perkiraan.setIdParent(rs.getLong(PstPerkiraan.fieldNames[PstPerkiraan.FLD_ID_PARENT]));
            perkiraan.setNoPerkiraan(rs.getString(PstPerkiraan.fieldNames[PstPerkiraan.FLD_NOPERKIRAAN]));
            perkiraan.setLevel(rs.getInt(PstPerkiraan.fieldNames[PstPerkiraan.FLD_LEVEL]));
            perkiraan.setNama(rs.getString(PstPerkiraan.fieldNames[PstPerkiraan.FLD_NAMA]));
            perkiraan.setTandaDebetKredit(rs.getInt(PstPerkiraan.fieldNames[PstPerkiraan.FLD_TANDA_DEBET_KREDIT]));
            perkiraan.setPostable(rs.getInt(PstPerkiraan.fieldNames[PstPerkiraan.FLD_POSTABLE]));
            perkiraan.setDepartmentId(rs.getLong(PstPerkiraan.fieldNames[PstPerkiraan.FLD_DEPARTMENT_ID]));
            perkiraan.setAccountNameEnglish(rs.getString(PstPerkiraan.fieldNames[PstPerkiraan.FLD_ACCOUNT_NAME_ENGLISH]));
            perkiraan.setWeight(rs.getDouble(PstPerkiraan.fieldNames[PstPerkiraan.FLD_WEIGHT]));
            perkiraan.setGeneralAccountLink(rs.getLong(PstPerkiraan.fieldNames[PstPerkiraan.FLD_GENERAL_ACCOUNT_LINK]));
            perkiraan.setAccountGroup(rs.getInt(PstPerkiraan.fieldNames[PstPerkiraan.FLD_ACCOUNT_GROUP]));
            perkiraan.setCompanyId(rs.getLong(PstPerkiraan.fieldNames[PstPerkiraan.FLD_COMPANY_ID]));
            perkiraan.setArapAccount(rs.getInt(PstPerkiraan.fieldNames[PstPerkiraan.FLD_ARAP_ACCOUNT]));
            perkiraan.setExpenseType(rs.getInt(PstPerkiraan.fieldNames[PstPerkiraan.FLD_EXPENSE_TYPE]));
            perkiraan.setExpenseFixedVar(rs.getInt(PstPerkiraan.fieldNames[PstPerkiraan.FLD_EXPENSE_FIXED_VARIABLE]));
        } catch (Exception e) {
            System.out.println("Exc when resultToObject : " + e.toString());
        }
    }
    
    
    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {

            String sql = "SELECT * FROM " + TBL_JURNAL_DETAIL + " ";

            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;

                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    break;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                JurnalDetail jurnaldetail = new JurnalDetail();
                resultToObject(rs, jurnaldetail);
                lists.add(jurnaldetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println("Exc when list jurnal detail : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }


    private static void resultToObject(ResultSet rs, JurnalDetail jurnaldetail) {
        try {
            jurnaldetail.setOID(rs.getLong(PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_JDETAILID]));
            jurnaldetail.setJurnalIndex(rs.getLong(PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_JURNALID]));
            jurnaldetail.setIdPerkiraan(rs.getLong(PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_IDPERKIRAAN]));
            jurnaldetail.setDebet(rs.getDouble(PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_DEBET]));
            jurnaldetail.setKredit(rs.getDouble(PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_KREDIT]));
            jurnaldetail.setCurrType(rs.getLong(PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_CURR_TYPE]));
            jurnaldetail.setCurrAmount(rs.getDouble(PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_CURR_AMOUNT]));
            jurnaldetail.setWeight(rs.getDouble(PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_WEIGHT]));
            jurnaldetail.setGeneralDetailLink(rs.getLong(PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_GENERAL_DETAIL_LINK]));
            jurnaldetail.setNote(rs.getString(PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_NOTE]));
        } catch (Exception e) {
            System.out.println("resultToObject() " + e.toString());
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_JDETAILID] + ") FROM " +
                    TBL_JURNAL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            return count;

        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * This method used to delete journal details defend on it parent (jurnalumumId)
     *
     * @param oidJu
     * @return
     * @throws DBException
     */
    public static long deleteByJurnalIDExc(long oidJu) throws DBException {
        if (oidJu > 0) {
            long oidResult = 0;
            String strWhereClause = PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_JURNALID] + " = " + oidJu;
            Vector listJurDetail = PstJurnalDetail.list(0, 0, strWhereClause, "");
            if (listJurDetail != null && listJurDetail.size() > 0) {
                for (int i = 0; i < listJurDetail.size(); i++) {
                    JurnalDetail jurDetail = (JurnalDetail) listJurDetail.get(i);
                    try{
                        PstJournalDistribution.deleteByJurnalDetailId(jurDetail.getOID());
                    }catch(Exception exc){
                        System.out.println("Exception  PstJournalDistribution.deleteByJurnalDetailId "+jurDetail.getOID());
                    }                    
                    oidResult = PstJurnalDetail.deleteExc(jurDetail.getOID());
                }
            }
            return oidResult;
        } else {
            return 0;
        }
    }

    /**
     * this method used to check if jurnaldetail's item status is CLEAR or other
     * return : TRUE ---> if status clear, FALSE ---> otherwise
     */
    public boolean isDetailItemClear(Vector vectJurnalDetail) {
        if (vectJurnalDetail != null && vectJurnalDetail.size() > 0) {
            for (int i = 0; i < vectJurnalDetail.size(); i++) {
                JurnalDetail jDetail = (JurnalDetail) vectJurnalDetail.get(i);
                if (jDetail.getDataStatus() != PstJurnalDetail.DATASTATUS_CLEAN) {
                    return false;
                }
            }
        }
        return true;
    }

   
}