// Generated by Together

package com.dimata.aiso.entity.masterdata;

import java.sql.*;
import com.dimata.aiso.db.*;
import com.dimata.aiso.db.DBLogger;
import com.dimata.util.lang.I_Language;
import com.dimata.qdep.entity.*;
import com.dimata.util.Command;
import java.util.Vector;

import java.sql.Connection;
import java.util.Vector;
import java.sql.ResultSet;

public class PstModulAktiva extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc {

    public static final String TBL_AKTIVA = "aiso_aktiva";

    public static final int FLD_AKTIVA_ID = 0;
    public static final int FLD_KODE = 1;
    public static final int FLD_NAME = 2;
    public static final int FLD_JENIS_AKTIVA_ID = 3;
    public static final int FLD_TYPE_PENYUSUTAN_ID = 4;
    public static final int FLD_METODE_PENYUSUTAN_ID = 5;
    public static final int FLD_MASA_MANFAAT = 6;
    public static final int FLD_PERSEN_PENYUSUTAN = 7;
    public static final int FLD_HARGA_PEROLEHAN = 8;
    public static final int FLD_NILAI_RESIDU = 9;
    public static final int FLD_ID_PERKIRAAN_AKTIVA = 10;
    public static final int FLD_ID_PERKIRAAN_BYA_PENYUSUTAN = 11;
    public static final int FLD_ID_PERKIRAAN_AKM_PENYUSUTAN = 12;
    public static final int FLD_ID_PERKIRAAN_LB_PENJ_AKTIVA = 13;
    public static final int FLD_ID_PERKIRAAN_RG_PENJ_AKTIVA = 14;
    public static final int FLD_TGL_PEROLEHAN = 15;
    public static final int FLD_TOTAL_PENYUSUTAN = 16;
    public static final int FLD_AKTIVA_GROUP_ID = 17;
    public static final int FLD_AKTIVA_LOC_ID = 18;
    public static final int FLD_DOWN_PAYMENT = 19;
    public static final int FLD_ID_PERKIRAAN_DP = 20;
    public static final int FLD_ID_PERKIRAAN_PAYMENT = 21;
    public static final int FLD_TRANS_TYPE = 22;
    public static final int FLD_SUPPLIER_ID = 23;
    public static final int FLD_TANGGAL_BATAS_PEROLEHAN_WITH_OPENING=24;//tanggal_batas_perolehan_with_opening
    public static final String[] fieldNames = {
        "AKTIVA_ID",
        "CODE",
        "NAME",
        "JENIS_AKTIVA_ID",
        "TYPE_PENYUSUTAN_ID",
        "METODE_PENYUSUTAN_ID",
        "MASA_MANFAAT",
        "PROSEN_PENYUSUTAN",
        "HARGA_PEROLEHAN",
        "NILAI_RESIDU",
        "ID_PERKIRAAN_AKTIVA",
        "ID_PERKIRAAN_BYA_PENYUSUTAN",
        "ID_PERKIRAAN_AKM_PENYUSUTAN",
        "ID_PERKIRAAN_LB_PENJ_AKTIVA",
        "ID_PERKIRAAN_RG_PENJ_AKTIVA",
        "TGL_PEROLEHAN",
        "TOTAL_PENYUSUTAN",
        "AKTIVA_GROUP_ID",
        "AKTIVA_LOC_ID",
	"DOWN_PAYMENT",
	"ID_PERKIRAAN_DP",
	"ID_PERKIRAAN_PAYMENT",
	"TRANS_TYPE",
	"SUPPLIER_ID",
        "TANGGAL_BATAS_PEROLEHAN_WITH_OPENING"
    };

    public static int[] fieldTypes = {
        TYPE_PK + TYPE_ID + TYPE_LONG,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_DATE,
        TYPE_FLOAT,
        TYPE_LONG,
        TYPE_LONG,
	TYPE_FLOAT,
	TYPE_LONG,
	TYPE_LONG,
	TYPE_INT,
	TYPE_LONG,
        TYPE_INT
    };


    public PstModulAktiva() {
    }

    public PstModulAktiva(int i) throws DBException {
        super(new PstModulAktiva());
    }

    public PstModulAktiva(String sOid) throws DBException {
        super(new PstModulAktiva(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public PstModulAktiva(long lOid) throws DBException {
        super(new PstModulAktiva(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }

        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_AKTIVA;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstModulAktiva().getClass().getName();
    }

    public long fetchExc(Entity ent) throws DBException {
        ModulAktiva aktiva = fetchExc(ent.getOID());
        ent = (Entity) aktiva;
        return aktiva.getOID();
    }

    public long insertExc(Entity ent) throws DBException {
        return insertExc((ModulAktiva) ent);
    }

    public long updateExc(Entity ent) throws DBException {
        return updateExc((ModulAktiva) ent);
    }

    public long deleteExc(Entity ent) throws DBException {
        if (ent == null) {
            throw  new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static ModulAktiva fetchExc(long Oid) throws DBException {
        try {
            ModulAktiva aktiva = new ModulAktiva();
            PstModulAktiva pstAktiva = new PstModulAktiva(Oid);
            aktiva.setOID(Oid);

            aktiva.setKode(pstAktiva.getString(FLD_KODE));
            aktiva.setName(pstAktiva.getString(FLD_NAME));
            aktiva.setJenisAktivaOid(pstAktiva.getlong(FLD_JENIS_AKTIVA_ID));
            aktiva.setTypePenyusutanOid(pstAktiva.getlong(FLD_TYPE_PENYUSUTAN_ID));
            aktiva.setMetodePenyusutanOid(pstAktiva.getlong(FLD_METODE_PENYUSUTAN_ID));
            aktiva.setMasaManfaat(pstAktiva.getInt(FLD_MASA_MANFAAT));
            aktiva.setHargaPerolehan(pstAktiva.getdouble(FLD_HARGA_PEROLEHAN));
            aktiva.setPersenPenyusutan(pstAktiva.getdouble(FLD_PERSEN_PENYUSUTAN));
            aktiva.setNilaiResidu(pstAktiva.getdouble(FLD_NILAI_RESIDU));
            aktiva.setIdPerkiraanAktiva(pstAktiva.getlong(FLD_ID_PERKIRAAN_AKTIVA));
            aktiva.setIdPerkiraanByaPenyusutan(pstAktiva.getlong(FLD_ID_PERKIRAAN_BYA_PENYUSUTAN));
            aktiva.setIdPerkiraanAkmPenyusutan(pstAktiva.getlong(FLD_ID_PERKIRAAN_AKM_PENYUSUTAN));
            aktiva.setIdPerkiraanLbPenjAktiva(pstAktiva.getlong(FLD_ID_PERKIRAAN_LB_PENJ_AKTIVA));
            aktiva.setIdPerkiraanRgPenjAktiva(pstAktiva.getlong(FLD_ID_PERKIRAAN_RG_PENJ_AKTIVA));
            aktiva.setTglPerolehan(pstAktiva.getDate(FLD_TGL_PEROLEHAN));
            aktiva.setTotalPenyusutan(pstAktiva.getdouble(FLD_TOTAL_PENYUSUTAN));
            aktiva.setAktivaGroupOid(pstAktiva.getlong(FLD_AKTIVA_GROUP_ID));
            aktiva.setIdFixedAssetsLoc(pstAktiva.getlong(FLD_AKTIVA_LOC_ID));
	    aktiva.setDownPayment(pstAktiva.getdouble(FLD_DOWN_PAYMENT));
	    aktiva.setIdPerkiraanDp(pstAktiva.getlong(FLD_ID_PERKIRAAN_DP));
	    aktiva.setIdPerkiraanPayment(pstAktiva.getlong(FLD_ID_PERKIRAAN_PAYMENT));
	    aktiva.setTransType(pstAktiva.getInt(FLD_TRANS_TYPE));
	    aktiva.setIdSupplier(pstAktiva.getlong(FLD_SUPPLIER_ID));
            aktiva.setUseOpeningBalanceStart(pstAktiva.getInt(FLD_TANGGAL_BATAS_PEROLEHAN_WITH_OPENING));

            return aktiva;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstModulAktiva(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(ModulAktiva aktiva) throws DBException {
	return insertExc(aktiva, null);
    }
    
    public static long insertExc(ModulAktiva aktiva, Connection con) throws DBException {
        try {
            PstModulAktiva pstAktiva = new PstModulAktiva(0);

            pstAktiva.setString(FLD_KODE, aktiva.getKode());
            pstAktiva.setString(FLD_NAME, aktiva.getName());
            pstAktiva.setLong(FLD_JENIS_AKTIVA_ID, aktiva.getJenisAktivaOid());
            pstAktiva.setLong(FLD_TYPE_PENYUSUTAN_ID, aktiva.getTypePenyusutanOid());
            pstAktiva.setLong(FLD_METODE_PENYUSUTAN_ID, aktiva.getMetodePenyusutanOid());
            pstAktiva.setDouble(FLD_MASA_MANFAAT, aktiva.getMasaManfaat());
            pstAktiva.setDouble(FLD_PERSEN_PENYUSUTAN, aktiva.getPersenPenyusutan());
            pstAktiva.setDouble(FLD_HARGA_PEROLEHAN, aktiva.getHargaPerolehan());
            pstAktiva.setDouble(FLD_NILAI_RESIDU, aktiva.getNilaiResidu());
            pstAktiva.setLong(FLD_ID_PERKIRAAN_AKTIVA, aktiva.getIdPerkiraanAktiva());
            pstAktiva.setLong(FLD_ID_PERKIRAAN_BYA_PENYUSUTAN, aktiva.getIdPerkiraanByaPenyusutan());
            pstAktiva.setLong(FLD_ID_PERKIRAAN_AKM_PENYUSUTAN, aktiva.getIdPerkiraanAkmPenyusutan());
            pstAktiva.setLong(FLD_ID_PERKIRAAN_LB_PENJ_AKTIVA, aktiva.getIdPerkiraanLbPenjAktiva());
            pstAktiva.setLong(FLD_ID_PERKIRAAN_RG_PENJ_AKTIVA, aktiva.getIdPerkiraanRgPenjAktiva());
            pstAktiva.setDate(FLD_TGL_PEROLEHAN, aktiva.getTglPerolehan());
            pstAktiva.setDouble(FLD_TOTAL_PENYUSUTAN, aktiva.getTotalPenyusutan());
            pstAktiva.setLong(FLD_AKTIVA_GROUP_ID, aktiva.getAktivaGroupOid());
            pstAktiva.setLong(FLD_AKTIVA_LOC_ID, aktiva.getIdFixedAssetsLoc());
	    pstAktiva.setDouble(FLD_DOWN_PAYMENT, aktiva.getDownPayment());
	    pstAktiva.setLong(FLD_ID_PERKIRAAN_DP, aktiva.getIdPerkiraanDp());
	    pstAktiva.setLong(FLD_ID_PERKIRAAN_PAYMENT, aktiva.getIdPerkiraanPayment());
	    pstAktiva.setInt(FLD_TRANS_TYPE, aktiva.getTransType());
	    pstAktiva.setLong(FLD_SUPPLIER_ID, aktiva.getIdSupplier());
	    pstAktiva.setInt(FLD_TANGGAL_BATAS_PEROLEHAN_WITH_OPENING, aktiva.getUseOpeningBalanceStart());
	    
	    if(con == null){
		pstAktiva.insert();
	    }else{
		pstAktiva.insertTran(con);
	    }
            aktiva.setOID(pstAktiva.getlong(FLD_AKTIVA_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstModulAktiva(0), DBException.UNKNOWN);
        }
        return aktiva.getOID();
    }

    public static long updateExc(ModulAktiva aktiva) throws DBException {
	return updateExc(aktiva, null);
    }
    
    public static long updateExc(ModulAktiva aktiva, Connection con) throws DBException {
        try {
            if (aktiva != null && aktiva.getOID() != 0) {
                PstModulAktiva pstAktiva = new PstModulAktiva(aktiva.getOID());

                pstAktiva.setString(FLD_KODE, aktiva.getKode());
                pstAktiva.setString(FLD_NAME, aktiva.getName());
                pstAktiva.setLong(FLD_JENIS_AKTIVA_ID, aktiva.getJenisAktivaOid());
                pstAktiva.setLong(FLD_TYPE_PENYUSUTAN_ID, aktiva.getTypePenyusutanOid());
                pstAktiva.setLong(FLD_METODE_PENYUSUTAN_ID, aktiva.getMetodePenyusutanOid());
                pstAktiva.setDouble(FLD_MASA_MANFAAT, aktiva.getMasaManfaat());
                pstAktiva.setDouble(FLD_PERSEN_PENYUSUTAN, aktiva.getPersenPenyusutan());
                pstAktiva.setDouble(FLD_HARGA_PEROLEHAN, aktiva.getHargaPerolehan());
                pstAktiva.setDouble(FLD_NILAI_RESIDU, aktiva.getNilaiResidu());
                pstAktiva.setLong(FLD_ID_PERKIRAAN_AKTIVA, aktiva.getIdPerkiraanAktiva());
                pstAktiva.setLong(FLD_ID_PERKIRAAN_BYA_PENYUSUTAN, aktiva.getIdPerkiraanByaPenyusutan());
                pstAktiva.setLong(FLD_ID_PERKIRAAN_AKM_PENYUSUTAN, aktiva.getIdPerkiraanAkmPenyusutan());
                pstAktiva.setLong(FLD_ID_PERKIRAAN_LB_PENJ_AKTIVA, aktiva.getIdPerkiraanLbPenjAktiva());
                pstAktiva.setLong(FLD_ID_PERKIRAAN_RG_PENJ_AKTIVA, aktiva.getIdPerkiraanRgPenjAktiva());
                pstAktiva.setDate(FLD_TGL_PEROLEHAN, aktiva.getTglPerolehan());
                pstAktiva.setDouble(FLD_TOTAL_PENYUSUTAN, aktiva.getTotalPenyusutan());
                pstAktiva.setLong(FLD_AKTIVA_GROUP_ID, aktiva.getAktivaGroupOid());
                pstAktiva.setLong(FLD_AKTIVA_LOC_ID, aktiva.getIdFixedAssetsLoc());
		pstAktiva.setDouble(FLD_DOWN_PAYMENT, aktiva.getDownPayment());
		pstAktiva.setLong(FLD_ID_PERKIRAAN_DP, aktiva.getIdPerkiraanDp());
		pstAktiva.setLong(FLD_ID_PERKIRAAN_PAYMENT, aktiva.getIdPerkiraanPayment());
		pstAktiva.setInt(FLD_TRANS_TYPE, aktiva.getTransType());
		pstAktiva.setLong(FLD_SUPPLIER_ID, aktiva.getIdSupplier());
		pstAktiva.setInt(FLD_TANGGAL_BATAS_PEROLEHAN_WITH_OPENING, aktiva.getUseOpeningBalanceStart());
		
		if(con == null){
		    pstAktiva.update();
		}else{
		    pstAktiva.updateTran(con);
		}
                return aktiva.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstModulAktiva(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long Oid) throws DBException {
	return deleteExc(Oid, null);
    }
    
    public static long deleteExc(long Oid, Connection con) throws DBException {
        try {
            PstModulAktiva pstAktiva = new PstModulAktiva(Oid);
	    if(con == null){
		pstAktiva.delete();
	    }else{
		pstAktiva.deleteTran(con);
	    }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstModulAktiva(0), DBException.UNKNOWN);
        }
        return Oid;
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_AKTIVA + " ";
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;

                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    break;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                ModulAktiva aktiva = new ModulAktiva();
                resultToObject(rs, aktiva);
                lists.add(aktiva);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstModulAktiva().getClass().getName() + ".list() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }

    private static void resultToObject(ResultSet rs, ModulAktiva aktiva) {
        try {
            aktiva.setOID(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_AKTIVA_ID]));
            aktiva.setKode(rs.getString(PstModulAktiva.fieldNames[PstModulAktiva.FLD_KODE]));
            aktiva.setName(rs.getString(PstModulAktiva.fieldNames[PstModulAktiva.FLD_NAME]));
            aktiva.setJenisAktivaOid(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_JENIS_AKTIVA_ID]));
            aktiva.setTypePenyusutanOid(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_TYPE_PENYUSUTAN_ID]));
            aktiva.setMetodePenyusutanOid(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_METODE_PENYUSUTAN_ID]));
            aktiva.setMasaManfaat(rs.getInt(PstModulAktiva.fieldNames[PstModulAktiva.FLD_MASA_MANFAAT]));
            aktiva.setPersenPenyusutan(rs.getDouble(PstModulAktiva.fieldNames[PstModulAktiva.FLD_PERSEN_PENYUSUTAN]));
            aktiva.setHargaPerolehan(rs.getDouble(PstModulAktiva.fieldNames[PstModulAktiva.FLD_HARGA_PEROLEHAN]));
            aktiva.setNilaiResidu(rs.getDouble(PstModulAktiva.fieldNames[PstModulAktiva.FLD_NILAI_RESIDU]));
            aktiva.setIdPerkiraanAktiva(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_AKTIVA]));
            aktiva.setIdPerkiraanByaPenyusutan(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_BYA_PENYUSUTAN]));
            aktiva.setIdPerkiraanAkmPenyusutan(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_AKM_PENYUSUTAN]));
            aktiva.setIdPerkiraanLbPenjAktiva(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_LB_PENJ_AKTIVA]));
            aktiva.setIdPerkiraanRgPenjAktiva(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_RG_PENJ_AKTIVA]));
            aktiva.setTglPerolehan(rs.getDate(PstModulAktiva.fieldNames[PstModulAktiva.FLD_TGL_PEROLEHAN]));
            aktiva.setTotalPenyusutan(rs.getDouble(PstModulAktiva.fieldNames[PstModulAktiva.FLD_TOTAL_PENYUSUTAN]));
            aktiva.setAktivaGroupOid(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_AKTIVA_GROUP_ID]));
            aktiva.setIdFixedAssetsLoc(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_AKTIVA_LOC_ID]));
            aktiva.setDownPayment(rs.getDouble(PstModulAktiva.fieldNames[PstModulAktiva.FLD_DOWN_PAYMENT]));
            aktiva.setIdPerkiraanDp(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_DP]));
            aktiva.setIdPerkiraanPayment(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_ID_PERKIRAAN_PAYMENT]));
            aktiva.setTransType(rs.getInt(PstModulAktiva.fieldNames[PstModulAktiva.FLD_TRANS_TYPE]));
            aktiva.setIdSupplier(rs.getLong(PstModulAktiva.fieldNames[PstModulAktiva.FLD_SUPPLIER_ID]));
            aktiva.setUseOpeningBalanceStart(rs.getInt(PstModulAktiva.fieldNames[PstModulAktiva.FLD_TANGGAL_BATAS_PEROLEHAN_WITH_OPENING]));
		    
        } catch (Exception e) {
            System.out.println("resultToObject() " + e.toString());
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstModulAktiva.fieldNames[PstModulAktiva.FLD_AKTIVA_ID] + ") " +
                    " FROM " + TBL_AKTIVA;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            return count;
        } catch (Exception e) {
            System.out.println(e);
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }
    
   public static void closeConnection(Connection con){
	try{
	    closeConnection(con);
	}catch(Exception e){}
   }
   
   
}
