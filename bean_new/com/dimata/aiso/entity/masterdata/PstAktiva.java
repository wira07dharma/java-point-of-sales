// Generated by Together

package com.dimata.aiso.entity.masterdata;

import com.dimata.aiso.db.*;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.qdep.entity.Entity;

import java.util.Vector;
import java.sql.ResultSet;
import java.util.Hashtable;

public class PstAktiva extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc {

    public static final String TBL_MASTER_AKTIVA = "aiso_aktiva_master";

    public static final int FLD_MASTER_AKTIVA_ID = 0;
    public static final int FLD_TYPE = 1;
    public static final int FLD_KODE = 2;
    public static final int FLD_NAME = 3;
    public static final int FLD_TYPE_METODE_PENYUSUTAN = 4;

    public static String[] fieldNames = {
        "MASTER_AKTIVA_ID",
        "TYPE",
        "CODE",
        "NAME",
        "TYPE_MTD_PYTN"
    };

    public static int[] fieldTypes = {
        TYPE_PK + TYPE_ID + TYPE_LONG,
        TYPE_INT,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_INT
    };


    /**
     * ini untuk membedakan jenis-jenis aktiva
     */
    public static final int TYPE_AKTIVA_JENIS_AKTIVA = 0;
    public static final int TYPE_AKTIVA_TYPE_PENYUSUTAN = 1;
    public static final int TYPE_AKTIVA_METODE_PENYUSUTAN = 2;
    public static String[] typeAktivaNames = {
        "JENIS AKTIVA",
        "TIPE PENYUSUTAN",
        "METODE PENYUSUTAN"
    };

    /**
     * JENIS2 METODE PENYUSUTAN
     */
    public static final int METODE_PENYUSUTAN_GARIS_LURUS = 0;
    public static final int METODE_PENYUSUTAN_SALDO_MENURUN = 1;
    public static String[] metodePenyusutanNames = {
        "GARIS LURUS",
        "SALDO MENURUN"
    };

    public PstAktiva() {
    }

    public PstAktiva(int i) throws DBException {
        super(new PstAktiva());
    }

    public PstAktiva(String sOid) throws DBException {
        super(new PstAktiva(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public PstAktiva(long lOid) throws DBException {
        super(new PstAktiva(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }

        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_MASTER_AKTIVA;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstAktiva().getClass().getName();
    }

    public long fetchExc(Entity ent) throws DBException {
        Aktiva aktiva = fetchExc(ent.getOID());
        ent = (Entity) aktiva;
        return aktiva.getOID();
    }

    public long insertExc(Entity ent) throws DBException {
        return insertExc((Aktiva) ent);
    }

    public long updateExc(Entity ent) throws DBException {
        return updateExc((Aktiva) ent);
    }

    public long deleteExc(Entity ent) throws DBException {
        if (ent == null) {
            throw  new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static Aktiva fetchExc(long Oid) throws DBException {
        try {
            Aktiva aktiva = new Aktiva();
            PstAktiva pstAktiva = new PstAktiva(Oid);
            aktiva.setOID(Oid);

            aktiva.setType(pstAktiva.getInt(FLD_TYPE));
            aktiva.setKode(pstAktiva.getString(FLD_KODE));
            aktiva.setNama(pstAktiva.getString(FLD_NAME));
            aktiva.setTypeMetodePenyusutan(pstAktiva.getInt(FLD_TYPE_METODE_PENYUSUTAN));

            return aktiva;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstAktiva(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(Aktiva aktiva) throws DBException {
        try {
            PstAktiva pstAktiva = new PstAktiva(0);

            pstAktiva.setInt(FLD_TYPE, aktiva.getType());
            pstAktiva.setString(FLD_KODE, aktiva.getKode());
            pstAktiva.setString(FLD_NAME, aktiva.getNama());
            pstAktiva.setInt(FLD_TYPE_METODE_PENYUSUTAN, aktiva.getTypeMetodePenyusutan());

            pstAktiva.insert();
            aktiva.setOID(pstAktiva.getlong(FLD_MASTER_AKTIVA_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstAktiva(0), DBException.UNKNOWN);
        }
        return aktiva.getOID();
    }

    public static long updateExc(Aktiva aktiva) throws DBException {
        try {
            if (aktiva != null && aktiva.getOID() != 0) {
                PstAktiva pstAktiva = new PstAktiva(aktiva.getOID());

                pstAktiva.setInt(FLD_TYPE, aktiva.getType());
                pstAktiva.setString(FLD_KODE, aktiva.getKode());
                pstAktiva.setString(FLD_NAME, aktiva.getNama());
                pstAktiva.setInt(FLD_TYPE_METODE_PENYUSUTAN, aktiva.getTypeMetodePenyusutan());

                pstAktiva.update();
                return aktiva.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstAktiva(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long Oid) throws DBException {
        try {
            PstAktiva pstAktiva = new PstAktiva(Oid);
            pstAktiva.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstAktiva(0), DBException.UNKNOWN);
        }
        return Oid;
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_MASTER_AKTIVA + " ";
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;

                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    break;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Aktiva aktiva = new Aktiva();
                resultToObject(rs, aktiva);
                lists.add(aktiva);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstAktiva().getClass().getName() + ".list() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }

    private static void resultToObject(ResultSet rs, Aktiva aktiva) {
        try {
            aktiva.setOID(rs.getLong(PstAktiva.fieldNames[PstAktiva.FLD_MASTER_AKTIVA_ID]));
            aktiva.setKode(rs.getString(PstAktiva.fieldNames[PstAktiva.FLD_KODE]));
            aktiva.setNama(rs.getString(PstAktiva.fieldNames[PstAktiva.FLD_NAME]));
            aktiva.setType(rs.getInt(PstAktiva.fieldNames[PstAktiva.FLD_TYPE]));
            aktiva.setTypeMetodePenyusutan(rs.getInt(PstAktiva.fieldNames[PstAktiva.FLD_TYPE_METODE_PENYUSUTAN]));
        } catch (Exception e) {
            System.out.println("resultToObject() " + e.toString());
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstAktiva.fieldNames[PstAktiva.FLD_MASTER_AKTIVA_ID] + ") " +
                    " FROM " + TBL_MASTER_AKTIVA;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            return count;
        } catch (Exception e) {
            System.out.println(e);
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    public static long getAktiva(int accType) {
        DBResultSet dbrs = null;
        long result = 0;
        try {
            String sql = "SELECT " + PstAktiva.fieldNames[PstAktiva.FLD_MASTER_AKTIVA_ID] +
                    " FROM " + PstAktiva.TBL_MASTER_AKTIVA +
                    " WHERE " + PstAktiva.fieldNames[PstAktiva.FLD_TYPE] +
                    " = " + accType;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result = rs.getLong(PstAktiva.fieldNames[PstAktiva.FLD_MASTER_AKTIVA_ID]);
                break;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("---> PstAktiva.getLinkAccountId() err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }


    public static String getLinkAccountStr(int accType) {
        DBResultSet dbrs = null;
        String result = "";
        try {
            String sql = "SELECT " + PstAktiva.fieldNames[PstAktiva.FLD_MASTER_AKTIVA_ID] +
                    " FROM " + PstAktiva.TBL_MASTER_AKTIVA +
                    " WHERE " + PstAktiva.fieldNames[PstAktiva.FLD_TYPE] +
                    " = " + accType;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result = result + rs.getLong(PstAktiva.fieldNames[PstAktiva.FLD_MASTER_AKTIVA_ID]) + ",";
            }

            if (result.length() > 0) {
                result = result.substring(0, result.length() - 1);
            }
        } catch (Exception e) {
            System.out.println("---> PstAktiva.getLinkAccountStr() err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    /**
     * @param iAktivaType
     * @return
     */
    public static Vector getVectObjAktiva(int iAktivaType) {
        DBResultSet dbrs = null;
        Vector vectResult = new Vector(1, 1);
        try {
            String sql = "SELECT " + PstAktiva.fieldNames[PstAktiva.FLD_MASTER_AKTIVA_ID] +
                    ", " + PstAktiva.fieldNames[PstAktiva.FLD_TYPE] +
                    ", " + PstAktiva.fieldNames[PstAktiva.FLD_KODE] +
                    ", " + PstAktiva.fieldNames[PstAktiva.FLD_NAME] +
                    ", " + PstAktiva.fieldNames[PstAktiva.FLD_TYPE_METODE_PENYUSUTAN] +
                    " FROM " + PstAktiva.TBL_MASTER_AKTIVA +
                    " WHERE " + PstAktiva.fieldNames[PstAktiva.FLD_TYPE] +
                    " = " + iAktivaType;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Aktiva objAktiva = new Aktiva();
                objAktiva.setOID(rs.getLong(PstAktiva.fieldNames[PstAktiva.FLD_MASTER_AKTIVA_ID]));
                objAktiva.setType(rs.getInt(PstAktiva.fieldNames[PstAktiva.FLD_TYPE]));
                objAktiva.setKode(rs.getString(PstAktiva.fieldNames[PstAktiva.FLD_KODE]));
                objAktiva.setNama(rs.getString(PstAktiva.fieldNames[PstAktiva.FLD_NAME]));
                objAktiva.setTypeMetodePenyusutan(rs.getInt(PstAktiva.fieldNames[PstAktiva.FLD_TYPE_METODE_PENYUSUTAN]));

                vectResult.add(objAktiva);
            }
        } catch (Exception e) {
            System.out.println("---> PstAktiva.getVectObjAktiva() err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return vectResult;
    }
    
    public static Hashtable getListAssetsType(){
        Hashtable hListAssestType = new Hashtable();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_MASTER_AKTIVA +" WHERE "+fieldNames[FLD_TYPE]+" = "+TYPE_AKTIVA_JENIS_AKTIVA;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Aktiva objTypeAssets = new Aktiva();
                resultToObject(rs, objTypeAssets);
                hListAssestType.put(objTypeAssets.getNama().toUpperCase(),objTypeAssets);
            }
            rs.close();
            return hListAssestType;
            
        } catch (Exception e) {
            System.out.println("Exception on getListAssetsType() :::: "+e.toString());
            e.printStackTrace();
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Hashtable();
    }
    
     public static Hashtable getListDepType(){
        Hashtable hListDepType = new Hashtable();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_MASTER_AKTIVA +" WHERE "+fieldNames[FLD_TYPE]+" = "+TYPE_AKTIVA_TYPE_PENYUSUTAN;
          
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Aktiva objDepType = new Aktiva();
                resultToObject(rs, objDepType);
                hListDepType.put(objDepType.getNama().toUpperCase(),objDepType);
            }
          
            rs.close();
            return hListDepType;
            
        } catch (Exception e) {
            System.out.println("Exception on getListDepType() :::: "+e.toString());
            e.printStackTrace();
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Hashtable();
    }
     
     
     public static Hashtable getListDepMethod(){
        Hashtable hListDepMethod = new Hashtable();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_MASTER_AKTIVA +" WHERE "+fieldNames[FLD_TYPE]+" = "+TYPE_AKTIVA_METODE_PENYUSUTAN;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Aktiva objDepMethod = new Aktiva();
                resultToObject(rs, objDepMethod);
                hListDepMethod.put(objDepMethod.getNama().toUpperCase(),objDepMethod);
            }
            rs.close();
            return hListDepMethod;
            
        } catch (Exception e) {
            System.out.println("Exception on getListDepMethod() :::: "+e.toString());
            e.printStackTrace();
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Hashtable();
    }
     


}
