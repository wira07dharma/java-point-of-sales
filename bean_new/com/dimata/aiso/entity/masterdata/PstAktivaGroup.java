// Generated by Together

package com.dimata.aiso.entity.masterdata;

import com.dimata.aiso.db.*;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.qdep.entity.Entity;

import java.util.Vector;
import java.sql.ResultSet;
import java.util.Hashtable;

public class PstAktivaGroup extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc {

    public static final String TBL_AKTIVA_GROUP = "aiso_aktiva_group";

    public static final int FLD_AKTIVA_GROUP_ID = 0;
    public static final int FLD_KODE = 1;
    public static final int FLD_NAME = 2;

    public static String[] fieldNames = {
        "AKTIVA_GROUP_ID",
        "CODE",
        "NAME"
    };

    public static int[] fieldTypes = {
        TYPE_PK + TYPE_ID + TYPE_LONG,
        TYPE_STRING,
        TYPE_STRING
    };


    public PstAktivaGroup() {
    }

    public PstAktivaGroup(int i) throws DBException {
        super(new PstAktivaGroup());
    }

    public PstAktivaGroup(String sOid) throws DBException {
        super(new PstAktivaGroup(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public PstAktivaGroup(long lOid) throws DBException {
        super(new PstAktivaGroup(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }

        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_AKTIVA_GROUP;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstAktivaGroup().getClass().getName();
    }

    public long fetchExc(Entity ent) throws DBException {
        AktivaGroup aktiva = fetchExc(ent.getOID());
        ent = (Entity) aktiva;
        return aktiva.getOID();
    }

    public long insertExc(Entity ent) throws DBException {
        return insertExc((AktivaGroup) ent);
    }

    public long updateExc(Entity ent) throws DBException {
        return updateExc((AktivaGroup) ent);
    }

    public long deleteExc(Entity ent) throws DBException {
        if (ent == null) {
            throw  new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static AktivaGroup fetchExc(long Oid) throws DBException {
        try {
            AktivaGroup aktiva = new AktivaGroup();
            PstAktivaGroup pstAktiva = new PstAktivaGroup(Oid);
            aktiva.setOID(Oid);

            aktiva.setKode(pstAktiva.getString(FLD_KODE));
            aktiva.setNama(pstAktiva.getString(FLD_NAME));

            return aktiva;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstAktivaGroup(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(AktivaGroup aktiva) throws DBException {
        try {
            PstAktivaGroup pstAktiva = new PstAktivaGroup(0);

            pstAktiva.setString(FLD_KODE, aktiva.getKode());
            pstAktiva.setString(FLD_NAME, aktiva.getNama());

            pstAktiva.insert();
            aktiva.setOID(pstAktiva.getlong(FLD_AKTIVA_GROUP_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstAktivaGroup(0), DBException.UNKNOWN);
        }
        return aktiva.getOID();
    }

    public static long updateExc(AktivaGroup aktiva) throws DBException {
        try {
            if (aktiva != null && aktiva.getOID() != 0) {
                PstAktivaGroup pstAktiva = new PstAktivaGroup(aktiva.getOID());

                pstAktiva.setString(FLD_KODE, aktiva.getKode());
                pstAktiva.setString(FLD_NAME, aktiva.getNama());

                pstAktiva.update();
                return aktiva.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstAktivaGroup(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long Oid) throws DBException {
        try {
            PstAktivaGroup pstAktiva = new PstAktivaGroup(Oid);
            pstAktiva.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstAktivaGroup(0), DBException.UNKNOWN);
        }
        return Oid;
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_AKTIVA_GROUP + " ";
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;

                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    break;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                AktivaGroup aktiva = new AktivaGroup();
                resultToObject(rs, aktiva);
                lists.add(aktiva);
            }
        } catch (Exception error) {
            System.out.println(".:: " + new PstAktivaGroup().getClass().getName() + ".list() : " + error.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }

    private static void resultToObject(ResultSet rs, AktivaGroup aktiva) {
        try {

            aktiva.setOID(rs.getLong(PstAktivaGroup.fieldNames[PstAktivaGroup.FLD_AKTIVA_GROUP_ID]));
            aktiva.setKode(rs.getString(PstAktivaGroup.fieldNames[PstAktivaGroup.FLD_KODE]));
            aktiva.setNama(rs.getString(PstAktivaGroup.fieldNames[PstAktivaGroup.FLD_NAME]));

        } catch (Exception e) {
            System.out.println("resultToObject() " + e.toString());
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstAktivaGroup.fieldNames[PstAktivaGroup.FLD_AKTIVA_GROUP_ID] + ") " +
                    " FROM " + TBL_AKTIVA_GROUP;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
            return count;
        } catch (Exception e) {
            System.out.println(e);
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }
    
    public static Hashtable getListGroupAssets(){
        Hashtable hListGroupAssets = new Hashtable();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_AKTIVA_GROUP;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                AktivaGroup objAssetsGroup = new AktivaGroup();
                resultToObject(rs, objAssetsGroup);
                hListGroupAssets.put(objAssetsGroup.getNama().toUpperCase(),objAssetsGroup);
            }
            rs.close();
            return hListGroupAssets;

        } catch (Exception e) {
            System.out.println("Exception on getListGroupAssets() :::: "+e.toString());
            e.printStackTrace();
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Hashtable();
    }
}
