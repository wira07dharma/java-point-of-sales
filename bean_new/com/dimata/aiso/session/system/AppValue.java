// Generated by Together 

package com.dimata.aiso.session.system;

// import java

import java.util.*;

// import java 
import com.dimata.aiso.entity.masterdata.Perkiraan;
import com.dimata.aiso.entity.masterdata.PstPerkiraan; 

// import package common 
//import com.dimata.common.entity.custom.DataCustom;  

// import package harisma 
import com.dimata.harisma.entity.masterdata.Department;
import com.dimata.harisma.entity.masterdata.PstDepartment;

public class AppValue {
    static Hashtable hashResult = new Hashtable();
    static String appValueKey[][] = PstPerkiraan.arrAccountGroupNames;


    // this method used to get vector appValue
    public static Vector getVectorAccGroup() {
        Vector result = new Vector(1, 1);
        String strVal = "";
        for (int i = 0; i < appValueKey[0].length; i++) {
            Vector tempResult = new Vector(1, 1);
            strVal = appValueKey[0][i];
            if (strVal != "" && strVal.length() > 0) {
                tempResult.add("" + i);
                tempResult.add(appValueKey[0][i]);
                result.add(tempResult);
            }
        }
        return result;
    }

    // this method used to get vector appValue
    public static Vector getVectorAccGroup(int language) {
        Vector result = new Vector(1, 1);
        String strVal = "";
        for (int i = 0; i < appValueKey[language].length; i++) {
            Vector tempResult = new Vector(1, 1);
            strVal = appValueKey[language][i];
            if (strVal != "" && strVal.length() > 0) {
                tempResult.add("" + i);
                tempResult.add(appValueKey[language][i]);
                result.add(tempResult);
            }
        }
        return result;
    }
       
    
        
    // ---- start manajemen hashtable level1, key=account type; value=vector of account chart -----
    /**
     * this method used to get data from static varibale('hashResult') specify by intKeyValue
     *
     * @param vDepartmentOid
     * @param intKeyValue
     * @return
     */
    public static Vector getAppValueVector(Vector vDepartmentOid, int intKeyValue) {
        Vector vResult = new Vector(1, 1);

        if (vDepartmentOid != null && vDepartmentOid.size() > 0) {
            if (vDepartmentOid.size() == 1) {
                long lDepartmentOid = Long.parseLong(String.valueOf(vDepartmentOid.get(0)));
                Vector vTemp = getAppValueVector(lDepartmentOid, intKeyValue);
                if (vTemp != null && vTemp.size() > 0) {
                    vResult.addAll(vTemp);
                }
            } else {
                int iDepartmentOidCount = vDepartmentOid.size();
                String where = " (";
                for (int i = 0; i < iDepartmentOidCount; i++) {
                    where = where + PstPerkiraan.fieldNames[PstPerkiraan.FLD_DEPARTMENT_ID]+
                            "="+String.valueOf(vDepartmentOid.get(i));
                    if(i<iDepartmentOidCount-1){
                        where = where +" OR ";
                    }
                }
                where = where + ")" ;
                if(intKeyValue==PstPerkiraan.ACC_GROUP_ALL){
                    where = where + " AND " + PstPerkiraan.fieldNames[PstPerkiraan.FLD_ACCOUNT_GROUP]+
                            " >= "+PstPerkiraan.ACC_GROUP_LIQUID_ASSETS+
                            " AND " + PstPerkiraan.fieldNames[PstPerkiraan.FLD_ACCOUNT_GROUP]+
                            " <= "+PstPerkiraan.ACC_GROUP_OTHER_EXPENSE;
                }
                else{
                     where = where + " AND " + PstPerkiraan.fieldNames[PstPerkiraan.FLD_ACCOUNT_GROUP]+
                            " = "+intKeyValue;
                }
                String order = PstPerkiraan.fieldNames[PstPerkiraan.FLD_ACCOUNT_GROUP]+","+
                        PstPerkiraan.fieldNames[PstPerkiraan.FLD_NOPERKIRAAN];
                vResult = PstPerkiraan.list(0,0,where,order);
            }
        }

        return vResult;
    }

    /**
     * this method used to get data from static varibale('hashResult') specify by intKeyValue
     *
     * @param intKeyValue
     * @return
     */
    public static Vector getAppValueVector(long lDepartmentOid, int intKeyValue) {
        Hashtable objHastable = (Hashtable) getObjHashtable(lDepartmentOid);
        Object obj = getObjVector(objHastable, intKeyValue);

        if (obj == null) {
            objHastable = getAppValueHastable(lDepartmentOid);
            obj = getObjVector(objHastable, intKeyValue);
        }

        return (Vector) obj;
    }

    /**
     * this method used to get data from current static variable('hashResult')
     *
     * @param intKeyValue
     * @return
     */
    private static Object getObjVector(Hashtable objHashtableLev2, int intKeyValue) {
        if (objHashtableLev2 != null) {
            Vector vResult = new Vector(1, 1);
            if (intKeyValue == PstPerkiraan.ACC_GROUP_ALL) {
                for (int i = PstPerkiraan.ACC_GROUP_LIQUID_ASSETS; i <= PstPerkiraan.ACC_GROUP_OTHER_EXPENSE; i++) {
                    if (objHashtableLev2.containsKey(PstPerkiraan.arrAccountGroupNames[0][i])) {
                        Vector vTemp = (Vector) objHashtableLev2.get(PstPerkiraan.arrAccountGroupNames[0][i]);

                        if (vTemp != null && vTemp.size() > 0) {
                            vResult.addAll(vTemp);
                        }
                    }
                }

                return (Object) vResult;
            } else {
                return (Object) objHashtableLev2.get(PstPerkiraan.arrAccountGroupNames[0][intKeyValue]);
            }
        } else {
            return null;
        }
    } 
    // ---- finish manajemen hashtable level1, key=account type; value=vector of account chart -----
     
    
    
    
    
    
    
    // ---- start manajemen hashtable level1, key=oid department; value=hashtable level2 -----
    /**
     * this method used to get data from static varibale('hashResult') specify by lDepartmentOid
     *
     * @param lDepartmentOid
     * @return
     */
    public static Hashtable getAppValueHastable(long lDepartmentOid) {
        Object obj = getObjHashtable(lDepartmentOid);
        if (obj == null) {
            return getAccountChartHashtable(lDepartmentOid);
        }

        return (Hashtable) obj;
    }


    /**
     * this method used to get data from static varibale('hashResult') specify by intKeyValue
     *
     * @param lDepartmentOid
     */
    public static void updateAppValueHashtable(Vector vDepartment) {
        if (vDepartment != null && vDepartment.size() > 0) {
            int iDepartmentOidCount = vDepartment.size();
            for (int i = 0; i < iDepartmentOidCount; i++) {
                Department objDepartment = (Department) vDepartment.get(i);
                updateAppValueHashtable(objDepartment.getOID());
            }
        }
    }


    /**
     * this method used to get data from static varibale('hashResult') specify by intKeyValue
     *
     * @param lDepartmentOid
     */
    public static void updateAppValueHashtable(long lDepartmentOid) {
        getAccountChartHashtable(lDepartmentOid);
    }


    /**
     * this method used to get data from current static variable('hashResult')
     *
     * @param lDepartmentOid
     * @return
     */
    private static Object getObjHashtable(long lDepartmentOid) {
        return (Object) hashResult.get(String.valueOf(lDepartmentOid));
    }


    /**
     * get vector of account chart on selected department
     *
     * @param lDepartmentOid
     * @return
     */
    private static Hashtable getAccountChartHashtable(long lDepartmentOid) {
        Hashtable objResult = new Hashtable();

        if (lDepartmentOid == 0) {
            objResult = getAccountChartAllDepartment();
        } else {
            objResult = getAccountChart(lDepartmentOid);
            hashResult.put(String.valueOf(lDepartmentOid), objResult);
        }

        return objResult;
    }


    /**
     * get vector of account chart on selected department
     *
     * @param lDepartmentOid
     * @return
     */
    private static Hashtable getAccountChartAllDepartment() {
        Hashtable objResult = new Hashtable();

        Vector vDepartment = PstDepartment.list(0, 0, "", "");
        if (vDepartment != null && vDepartment.size() > 0) {
            Hashtable hastLev1 = new Hashtable();
            int iDepartmentCount = vDepartment.size();
            for (int i = 0; i < iDepartmentCount; i++) {
                Department objDepartment = (Department) vDepartment.get(i);
                objResult = getAccountChart(objDepartment.getOID());
                hashResult.put(String.valueOf(objDepartment.getOID()), objResult);
            }
        }

        return objResult;
    }


    /**
     * get vector of account chart on selected department
     *
     * @param lDepartmentOid
     * @return
     */
    private static Hashtable getAccountChart(long lDepartmentOid) {
        Hashtable objResult = new Hashtable();

        if (lDepartmentOid != 0) {
            String whereClause = PstPerkiraan.fieldNames[PstPerkiraan.FLD_DEPARTMENT_ID] + " = " + lDepartmentOid;
            String orderBy = PstPerkiraan.fieldNames[PstPerkiraan.FLD_ACCOUNT_GROUP] +
                    ", " + PstPerkiraan.fieldNames[PstPerkiraan.FLD_NOPERKIRAAN];
            Vector listPerkiraan = PstPerkiraan.list(0, 0, whereClause, orderBy);
            if (listPerkiraan != null && listPerkiraan.size() > 0) {
                Vector vAccountChart = new Vector(1, 1);
                int iLastAccountGroup = PstPerkiraan.ACC_GROUP_LIQUID_ASSETS;

                int iListPerkiraanCount = listPerkiraan.size();
                for (int i = 0; i < iListPerkiraanCount; i++) {
                    Perkiraan objPerkiraan = (Perkiraan) listPerkiraan.get(i);
                    if (iLastAccountGroup == objPerkiraan.getAccountGroup()) {
                        vAccountChart.add(objPerkiraan);
                    } else {
                        if (i > 0) {
                            objResult.put(PstPerkiraan.arrAccountGroupNames[0][iLastAccountGroup], vAccountChart);

                            vAccountChart = new Vector(1, 1);
                            iLastAccountGroup = objPerkiraan.getAccountGroup();
                        } else {
                            vAccountChart.add(objPerkiraan);
                            iLastAccountGroup = objPerkiraan.getAccountGroup();
                        }
                    }

                    if (i == iListPerkiraanCount - 1) {
                        objResult.put(PstPerkiraan.arrAccountGroupNames[0][iLastAccountGroup], vAccountChart);
                    }
                }
            }
        }
        return objResult;
    }      
    // ---- finish manajemen hashtable level1, key=oid department; value=hashtable level2 -----
}
