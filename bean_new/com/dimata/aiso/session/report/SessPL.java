/* Generated by Together */

package com.dimata.aiso.session.report;

/* package java */
import java.util.*;
import java.util.Date;
import java.sql.*;

/* package qdep */
import com.dimata.qdep.db.*; 
import com.dimata.util.*;

/* package aiso */
import com.dimata.aiso.entity.masterdata.*;  
import com.dimata.aiso.entity.jurnal.*;
import com.dimata.aiso.entity.periode.*;
import com.dimata.aiso.form.masterdata.*;
import com.dimata.aiso.session.periode.*;

public class SessPL {

    /**
     * define constant for status of profit loss; LAST, CURRENT or ALL
     */
    public static final int PL_LAST	 = 0;
    public static final int PL_CURRENT	 = 1;
    public static final int PL_ALL	 = 2;

    public static final int PL_TYPE   	 = 0;
    public static final int PL_ANNUALS   = 1;
    public static final int PL_PERIOD 	 = 2;
    public static final int PL_LEVEL  	 = 3;
    public static final int PL_CURRENCY  = 4;
    public static final int PL_RATE	 = 5;
    public static String plFieldText[] = {
        "TYPE","ANNUALS","PERIOD","LEVEL","CURRENCY","RATE"
    };

    public static final int REPORT_PERIODIC = 0;
    public static final int REPORT_ANNUAL   = 1;
    public static String reportFieldNames[][] = {    	
    	{"Periode","Tahunan"},
        {"Periodic","Annual"}
    };    

    /**
     * used to insert selected data from selected table into another selected table specified by table index
     * <p>levone(1), levtwo(2), levthree(3), levfour(4), levfive(5) and levsix(5)
     * @param <CODE>levelFrom</CODE>index of source table
     * @param <CODE>levelTo/CODE>index of destination table
     * @param <CODE>taxesId</CODE>OID of tax object that won't add to destination table
     */
    public static void insertToParent(int levelFrom, int levelTo, String taxesId){
        DBResultSet dbrs = null;
        String strLevelFrom = "";
        String strLevelTo = "";
        String strInClause = getParentInClause(levelFrom);
        if(strInClause!="" && strInClause.length()>0){
            switch(levelFrom){
                    case 1 : strLevelFrom = "LEVONE"; break;
                    case 2 : strLevelFrom = "LEVTWO"; break;
                    case 3 : strLevelFrom = "LEVTHREE"; break;
                    case 4 : strLevelFrom = "LEVFOUR"; break;
                    case 5 : strLevelFrom = "LEVFIVE"; break;
                    case 6 : strLevelFrom = "LEVSIX"; break;
            }
            switch(levelTo){
                    case 1 : strLevelTo = "LEVONE"; break;
                    case 2 : strLevelTo = "LEVTWO"; break;
                    case 3 : strLevelTo = "LEVTHREE"; break;
                    case 4 : strLevelTo = "LEVFOUR"; break;
                    case 5 : strLevelTo = "LEVFIVE"; break;
                    case 6 : strLevelTo = "LEVSIX"; break;
            }
            try{
                String sql = "INSERT INTO " + strLevelTo +
                             " SELECT ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_IDPERKIRAAN] + 
                             ", ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_ID_PARENT] + 
                             ", SUM(LEV.DEBET) AS DEBET,  LEV.PERIOD, SUM(LEV.KREDIT) AS KREDIT" + 
                             " FROM " + PstPerkiraan.TBL_PERKIRAAN + " AS ACC INNER JOIN " + strLevelFrom + " AS LEV" +
                             " ON ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_IDPERKIRAAN] + " = LEV.PARENT_ID" +
                             " WHERE LEV.PARENT_ID IN (" + strInClause + ") ";
                             
                             if(taxesId!="" && taxesId.length()>0){ 
                                 sql = sql + " AND LEV.ID_PERKIRAAN NOT IN (" + taxesId + ") "; 
                             }
                
                             sql = sql + " GROUP BY LEV.PARENT_ID, LEV.PERIOD";
                System.out.println("--->>> SessPL.insertToParent() sql : " + sql);
                dbrs = DBHandler.execQueryResult(sql);
            }catch(Exception e){
                System.out.println("---eee SessPL.insertToParent() err : "+e.toString());
            }finally{
                DBResultSet.close(dbrs);
            }
        }
    }

    /**
     * used to get "IN" clause from specified table
     * @param <CODE>levelFrom</CODE>index of selected table 
     * @return String in clause
     */
    public static String getParentInClause(int levelFrom){
        DBResultSet dbrs = null;
        String result = "";
        String strLevelFrom = "";
        switch(levelFrom){
            case 1 : strLevelFrom = "LEVONE"; break;
            case 2 : strLevelFrom = "LEVTWO"; break;
            case 3 : strLevelFrom = "LEVTHREE"; break;
            case 4 : strLevelFrom = "LEVFOUR"; break;
            case 5 : strLevelFrom = "LEVFIVE"; break;
            case 6 : strLevelFrom = "LEVSIX"; break;
        }

        try{
            String sql = "SELECT DISTINCT PARENT_ID FROM " + strLevelFrom;
            
            System.out.println("--->>> SessPL.getParentInClause() sql : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
	    ResultSet rs = dbrs.getResultSet();
	    while(rs.next()){
	        result = result + rs.getLong("PARENT_ID")+",";
	    }
            
	    if(result!="" && result.length()>0){
                result = result.substring(0,result.length()-1);
            }
        }catch(Exception e){
            System.out.println("---eee SessPL.getParentInClause() err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * used to insert data from source table specified by levelFrom into destination table specified by periodType 
     * @param <CODE>periodType</CODE>periodType of report used to choose destination table, LEVLAST or LEVCURR
     * @param <CODE>levelFrom</CODE>index of source table
     */
    public static void insertToSummaryTable(int periodType, int levelFrom){
        DBResultSet dbrs = null;
        String result = "";
        String strTableTo = "";
        if(periodType==PL_LAST){
           strTableTo = "LEVLAST";
        }else{
           strTableTo = "LEVCURRENT";
        }

        String strLevelFrom = "";
        switch(levelFrom){
            case 1 : strLevelFrom = "LEVONE"; break;
            case 2 : strLevelFrom = "LEVTWO"; break;
            case 3 : strLevelFrom = "LEVTHREE"; break;
            case 4 : strLevelFrom = "LEVFOUR"; break;
            case 5 : strLevelFrom = "LEVFIVE"; break;
            case 6 : strLevelFrom = "LEVSIX"; break;
        }

        try{
            String sql = "INSERT INTO " + strTableTo +
                         " SELECT ID_PERKIRAAN, PARENT_ID, DEBET, PERIOD, KREDIT" + 
                         " FROM " + strLevelFrom +
                         " WHERE PERIOD = " + periodType +
                         " AND (DEBET <> 0 OR KREDIT <>0)";
            System.out.println("--->>> SessPL.getSummaryTable() sql : "+sql);
	    dbrs = DBHandler.execQueryResult(sql);
        }catch(Exception e){
            System.out.println("---eee SessPL.getSummaryTable() err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
        }
    }

    /**
    * used to insert data from "two" summary table (LEVLAST and LEVCURR) to total table (LEVALL) 
    */
    public static void insertToTotalTable(){
        insertLastSummary();
        insertCurrentSummary();
    }

    /**
    * used to insert data from LEVLAST table to total table (LEVALL)
    */
    public static void insertLastSummary(){
        DBResultSet dbrs = null;
        try{
              int intAvailable = checkAvailableData(PL_LAST);
              String sql = "";
              if(intAvailable!=0){
                sql = sql + "INSERT INTO LEVALL " +
                            " SELECT LAST.ID_PERKIRAAN, LAST.DEBET, " +
                            " IF(ISNULL(CURR.ID_PERKIRAAN)=0,CURR.DEBET,0), " +
                            " LAST.KREDIT, " +
                            " IF(ISNULL(CURR.ID_PERKIRAAN)=0,CURR.KREDIT,0) " +
                            " FROM LEVLAST AS LAST LEFT JOIN LEVCURRENT AS CURR " +
                            " ON LAST.ID_PERKIRAAN = CURR.ID_PERKIRAAN";
              }else{
                sql = sql + "INSERT INTO LEVALL " +
                            " SELECT ID_PERKIRAAN, 0, DEBET, 0, KREDIT " +
                            " FROM LEVCURRENT";
              }

              System.out.println("--->>> SessPL.insertLastSummary() sql : "+sql);
              dbrs = DBHandler.execQueryResult(sql);
        }catch(Exception e){
            System.out.println("---eee SessPL.insertLastSummary() err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
        }
    }

    /**
    * used to insert data from LEVCURR table to total table (LEVLAST)
    */
    public static void insertCurrentSummary(){
        int intAvailable = checkAvailableData(PL_CURRENCY);
        if(intAvailable!=0){
            DBResultSet dbrs = null;
            try{
              String sql = "INSERT INTO LEVALL " +
                           " SELECT CURR.ID_PERKIRAAN, "+
                           " IF(ISNULL(LAST.ID_PERKIRAAN)=0,LAST.DEBET,0), " +
                           " CURR.DEBET, " +
                           " IF(ISNULL(LAST.ID_PERKIRAAN)=0,LAST.KREDIT,0), CURR.KREDIT " +
                           " FROM LEVCURRENT AS CURR LEFT JOIN LEVLAST AS LAST " +
                           " ON CURR.ID_PERKIRAAN = LAST.ID_PERKIRAAN " +
                           " WHERE LAST.ID_PERKIRAAN IS NULL";

                System.out.println("--->>> SessPL.insertCurrentSummary() sql : "+sql);
                dbrs = DBHandler.execQueryResult(sql);
            }catch(Exception e){
                System.out.println("---eee SessPL.insertCurrentSummary() err : "+e.toString());
            }finally{
                DBResultSet.close(dbrs);
            }
        }
    }

    /**
    * used to delete all data in temporary table specified by index
    */
    public static void deleteTempTable(int levelFrom){
        DBResultSet dbrs = null;
        String strLevelFrom = "";
        switch(levelFrom){
	        case 1 : strLevelFrom = "LEVONE"; break;
	        case 2 : strLevelFrom = "LEVTWO"; break;
	        case 3 : strLevelFrom = "LEVTHREE"; break;
	        case 4 : strLevelFrom = "LEVFOUR"; break;
	        case 5 : strLevelFrom = "LEVFIVE"; break;
	        case 6 : strLevelFrom = "LEVSIX"; break;
	        case 7 : strLevelFrom = "LEVLAST"; break;
	        case 8 : strLevelFrom = "LEVCURRENT"; break;
	        case 9 : strLevelFrom = "LEVALL"; break;
        }
        try{
		    String sql = "DELETE FROM " + strLevelFrom;
	
	    	System.out.println("--->>> SessPL.deleteTempTable() sql : "+sql);
		    dbrs = DBHandler.execQueryResult(sql);
        }catch(Exception e){
            System.out.println("---eee SessPL.deleteTempTable() err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
        }
    }

    /**
     * used to check if table have data or blank
     * @param <CODE>periodType</CODE>used to choose table will check for
     */
    public static int checkAvailableData(int periodType){
        DBResultSet dbrs = null;
        int result = 0;
        String strTable = "";
        if(periodType==PL_LAST){
            strTable = "LEVLAST";
        }else{
            strTable = "LEVCURRENT";
        }
        try{
            String sql = "SELECT COUNT(ID_PERKIRAAN) AS JUMLAH FROM " + strTable;
            
            System.out.println("--->>> SessPL.deleteTempTable() sql : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                result = rs.getInt("JUMLAH");
            }            
        }catch(Exception e){
            System.out.println("---eee SessPL.deleteTempTable() err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * used to insert tax object into selected table specified by periodType
     * @param <CODE>periodType</CODE>used to choose which table the data inserted into
     * @param <CODE>level</CODE>choose source table of data
     * @param <CODE>accountId</CODE>OID of selected account will inserted into
     */
    public static void insertTaxes(int periodType, int level, String accountId) {
      if(accountId!="" & accountId.length()>0){
        DBResultSet dbrs = null;
        String result = "";
        String strTableTo = "";
        if (periodType == PL_LAST) {
            strTableTo = "LEVLAST";
        } else {
            strTableTo = "LEVCURRENT";
        }
        String strLevelFrom = "";
        switch (level) {
            case 1: strLevelFrom = "LEVONE"; break;
            case 2: strLevelFrom = "LEVTWO"; break;
            case 3: strLevelFrom = "LEVTHREE"; break;
            case 4: strLevelFrom = "LEVFOUR"; break;
            case 5: strLevelFrom = "LEVFIVE"; break;
            case 6: strLevelFrom = "LEVSIX"; break;
        }
        
        try {
	    String sql = "INSERT INTO " + strTableTo + 
                         " SELECT ID_PERKIRAAN, PARENT_ID, DEBET, PERIOD, KREDIT" + 
                         " FROM " + strLevelFrom + 
                         " WHERE PERIOD = " + periodType + 
                         " AND ID_PERKIRAAN IN (" + accountId + ")";

            System.out.println("--->>> SessPL.insertTaxes() sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
        } catch (Exception e) {
            System.out.println("---eee SessPL.insertTaxes() err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
      }
    }

    /**
     * used to check if tax OID available in specified String
     * @param <CODE>strAccountTaxes</CODE>String data where tax's OID will looking for
     * @param <CODE>accountId</CODE>OID of tax that looking for in specified String
     */
    public static boolean isTaxesAccount(String strAccountTaxes, long accountId){        
        StringTokenizer st = new StringTokenizer(strAccountTaxes,",",false);
        while(st.hasMoreTokens()){
            if(st.nextToken().compareTo(String.valueOf(accountId))==0){
                return true;
            }
        }
        return false;
    }

    /**
     * used to get total earning from SaldoAkhirPeriode table
     * @param <CODE>accountId</CODE>OID of account which its total will lokking for
     * @param <CODE>strPeriode</CODE>list of Periode that used on "IN CLAUSE"
     * @param <CODE>currency</CODE>currency type that looking for
     */
    /*
    public synchronized static double getEarningSa(String accountId, String strPeriode, int currency){
	DBResultSet dbrs = null;
        double result = 0;
        if(strPeriode!="" && strPeriode.length()>0){
            try{
             String sql = "SELECT ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_NAMA] + ", " +
                          " ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_TANDA_DEBET_KREDIT] + ", " +
                          " SUM(SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_DEBET] + ")" +
                          " AS " + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_DEBET] + ", " +
                          " SUM(SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_KREDIT] + ")" +
                          " AS " + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_KREDIT] +
                          " FROM " + PstPerkiraan.TBL_PERKIRAAN + " AS ACC " +
                          " INNER JOIN " + PstSaldoAkhirPeriode.TBL_SALDO_AKHIR + " AS SA " +
                          " ON ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_IDPERKIRAAN] +
                          " = SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERKIRAAN] +
                          " WHERE SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERIODE] +
                          " IN (" + strPeriode + ") " +
                          " AND SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERKIRAAN] +
                          " IN (" + accountId + ") " +
                          " GROUP BY ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_NOPERKIRAAN] +
                          " ORDER BY ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_NOPERKIRAAN];

                System.out.println("--->>> SessPL.getEarningSa() sql : "+sql);
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                while(rs.next()){                                    
                    if(rs.getInt(PstPerkiraan.fieldNames[PstPerkiraan.FLD_TANDA_DEBET_KREDIT])==PstPerkiraan.ACC_DEBETSIGN){
                        result = result + (rs.getDouble(PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_DEBET]) -
                        rs.getDouble(PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_KREDIT]));
                    }
                    if(rs.getInt(PstPerkiraan.fieldNames[PstPerkiraan.FLD_TANDA_DEBET_KREDIT])==PstPerkiraan.ACC_KREDITSIGN){
                        result = result + (rs.getDouble(PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_KREDIT]) -
                        rs.getDouble(PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_DEBET]));
                    }
                }                
            }catch(Exception e){
                System.out.println("---eee SessPL.getEarningSa() err : "+e.toString());
            }finally{
                DBResultSet.close(dbrs);
                return result;
            }
        }else{
            return 0;
        }
    }
     */

    /**
     * this method used to get total earning from table SaldoAkhirPeriode
     * algoritm is  : get Earning year of periodId ---> currResult
     *                get Earning year of beforePeriodId (OID of period just before 'periodId') ---> lastResult
     *                result is (currResult-lastResult)
     * @return (currResult-lastResult)
     */
    /*
    public synchronized static double getEarningSa(long periodeId, int currency, double rate, boolean substByBefore){
        double result = 0;
        if(periodeId!=0){
            double lastResult = 0;
            double currResult = 0;
            Vector vectCurrEarning = getCurrentEarningValue(periodeId,currency,rate);
            if(vectCurrEarning!=null && vectCurrEarning.size()>0){
                Vector tempResult = (Vector)vectCurrEarning.get(0);
                SaldoAkhirPeriode sa = (SaldoAkhirPeriode)tempResult.get(1);
                currResult = sa.getKredit();
            }
            if(substByBefore){ 
                long beforePeriodId = SessPeriode.getPeriodIdJustBefore(periodeId);
                Vector vectLastEarning = getCurrentEarningValue(beforePeriodId,currency,rate);
                if(vectLastEarning!=null && vectLastEarning.size()>0){
                    Vector tempResult = (Vector)vectLastEarning.get(0);
                    SaldoAkhirPeriode sa = (SaldoAkhirPeriode)tempResult.get(1);
                    lastResult = sa.getKredit();
                }
            }
            result = currResult-lastResult;
        }
        return result;
    }
     */

    /**
     * used to get current earning year from "Saldo Akhir Periode"
     */
    /*
    public static Vector getCurrentEarningValue(long selectedPeriodId, int currency, double rate){
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        String strEarningYear = PstAccountLink.getLinkAccountStr(CtrlAccountLink.TYPE_CURRENT_EARNING_YR);
        try {
            if(selectedPeriodId!=0){
	            String sql = "";
	            if(currency==PL_ALL){ 
	           	   sql = "SELECT ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_IDPERKIRAAN] +
	               		 ", ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_ID_PARENT] +
	               		 ", ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_LEVEL] +
                                 ", SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERKIRAAN] +
                                 ", SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_KURS] +
                                 ", SUM(IF(SA."+ PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_MATAUANG] +"=" + PstJurnalUmum.CURRENCY_DOLLAR +
                                 ", SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_DEBET] + "*" + rate +
                                 ", SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_DEBET] + ")) " +
                                 ", SUM(IF(SA."+ PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_MATAUANG] +"=" + PstJurnalUmum.CURRENCY_DOLLAR +
                                 ", SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_KREDIT] + "*" + rate +
                                 ", SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_KREDIT] + "))" +
                                 " FROM " + PstPerkiraan.TBL_PERKIRAAN + " AS ACC " +
                                 " INNER JOIN " + PstSaldoAkhirPeriode.TBL_SALDO_AKHIR + " AS SA " +
                                 " ON ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_IDPERKIRAAN] +
                                 " = SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERKIRAAN] +
                                 " WHERE SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERKIRAAN] +
                                 " IN (" + strEarningYear + ") " +
                                 " AND SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERIODE] +
                                 " = " + selectedPeriodId +
                                 " GROUP BY SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERKIRAAN];
	            }else{
	           	   sql = "SELECT ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_IDPERKIRAAN] +
	               		 ", ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_ID_PARENT] +
	               		 ", ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_LEVEL] +
                                 ", SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERKIRAAN] +
                                 ", SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_KURS] +
                                 ", SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_DEBET] +
                                 ", SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_KREDIT] +
                                 " FROM " + PstPerkiraan.TBL_PERKIRAAN + " AS ACC " +
                                 " INNER JOIN " + PstSaldoAkhirPeriode.TBL_SALDO_AKHIR + " AS SA " +
                                 " ON ACC." + PstPerkiraan.fieldNames[PstPerkiraan.FLD_IDPERKIRAAN] +
                                 " = SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERKIRAAN] +
                                 " WHERE SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERKIRAAN] +
                                 " IN (" + strEarningYear + ") " +
                                 " AND SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_MATAUANG] + " = " + currency +
                                 " AND SA." + PstSaldoAkhirPeriode.fieldNames[PstSaldoAkhirPeriode.FLD_IDPERIODE] +
                                 " = " + selectedPeriodId;
	            }
	
	            System.out.println("--->>> SessPL.getCurrentEarningValue() sql : " + sql);
	            dbrs = DBHandler.execQueryResult(sql);
	            ResultSet rs = dbrs.getResultSet();
	            while(rs.next()){
	                Vector tempResult = new Vector();
	                Perkiraan acc = new Perkiraan();
	                SaldoAkhirPeriode sa = new SaldoAkhirPeriode();
	
	                acc.setOID(rs.getLong(1));
	                acc.setIdParent(rs.getLong(2));
	                acc.setLevel(rs.getInt(3));
	                tempResult.add(acc);
	
	                sa.setIdPerkiraan(rs.getLong(4));
	                sa.setKurs(rs.getDouble(5));
	                sa.setDebet(rs.getDouble(6));
	                sa.setKredit(rs.getDouble(7));
	                tempResult.add(sa);
	
	                result.add(tempResult);
	            }
            }
        }catch(Exception e){
            System.out.println("---eee SessPL.getCurrentEarningValue() err : " + e.toString());
        }finally{
            DBResultSet.close(dbrs);
            return result;
        }
    }
     */
    
    /**
     * used to check if current account already exist in vector or not
     * @param <CODE>vectTotalBalance</CODE>vector of total balance
     * @param <CODE>currAcc</CODE>current account will check
     * @return true if current account already exist in vector; false otherwise
     */
    public static boolean existInVector(Vector vectTotalBalance, long currAcc){
        boolean result = false;
        if(vectTotalBalance!=null && vectTotalBalance.size()>0){
            for(int i=0; i<vectTotalBalance.size(); i++){
		       Vector tempTotal = (Vector)vectTotalBalance.get(i);
		       Perkiraan totAcc = (Perkiraan)tempTotal.get(0);
               if(totAcc.getOID()==currAcc){
                	result = true;
                    break;
               }
            }
        }
        return result;
    }  
}
