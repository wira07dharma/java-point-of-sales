/* Generated by Together */
package com.dimata.aiso.form.jurnal;

// import java
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

// import dimata
import com.dimata.util.*;
import com.dimata.util.lang.I_Language;

// import qdep
import com.dimata.qdep.form.*;
import com.dimata.qdep.system.*;
import com.dimata.qdep.form.Control;

// import aiso
import com.dimata.aiso.db.*;
import com.dimata.aiso.entity.jurnal.*;
import com.dimata.aiso.entity.masterdata.BussinessCenterBudget;
import com.dimata.aiso.entity.masterdata.PstBussCenterBudget;
import com.dimata.aiso.entity.periode.*;
import com.dimata.aiso.form.masterdata.CtrlBussCenterBudget;
import com.dimata.aiso.session.jurnal.*;
import com.dimata.aiso.session.masterdata.SessBussCenterBgt;
import com.dimata.aiso.session.masterdata.SessDailyRate;
import com.dimata.aiso.session.specialJournal.SessSpecialJurnal;
import java.sql.Connection;

public class CtrlJurnalUmum extends Control implements I_Language {

    public static int POSTED_JU = 0;
    public static int POSTED_JD = 1;
    public static int LENGTH_PREV = 4;
    public static int LENGTH_VOUCHER = 8;
    public static String STR_BLANK = "0";
    public static int RSLT_OK = 0;
    public static int RSLT_UPDATE = 1;
    public static int RSLT_UNKNOWN_ERROR = 2;
    public static int RSLT_ERR_TRANS_DATE = 3;
    public static int RSLT_ERR_VOUCHER = 4;
    public static int RSLT_ERR_VOUCHER_EXIST = 5;
    public static int RSLT_FORM_INCOMPLETE = 6;
    public static int RSLT_ERR_ON_UPDATE =7;
    public static int RSLT_ERR_ON_INSERT =8;
    public static String[][] resultText =
            {
        {"Jurnal tersimpan ...", "Jurnal terupdate ...", "Tidak dapat diproses ...", "Tanggal transaksi tidak sesuai ...", "No voucher tidak sesuai ...", "No voucher sudah ada ...", "Data tidak lengkap ...", "Error update data","Error insert data"},
        {"Journal saved ...", "Journal updated ...", "Can not process ...", "Transaction date invalid ...", "Voucher no invalid ...", "Voucher no exist ...", "Data incomplete ...","Erro on data update","Error on insert data"}};
    private int iErrCode = 0;
    private String msgString;
    private JurnalUmum jurnalumum;
    private PstJurnalUmum pstJurnalUmum;
    private PstJurnalDetail pstJurnalDetail;
    private FrmJurnalUmum frmJurnalUmum;
    private CtrlJurnalDetail ctrljurnaldetail;
    private int language = LANGUAGE_DEFAULT;
    private String msgBalance;

    public CtrlJurnalUmum() {
    }

    public CtrlJurnalUmum(HttpServletRequest request) {
        msgString = "";
        jurnalumum = new JurnalUmum();
        try {
            pstJurnalUmum = new PstJurnalUmum(0);
        } catch (Exception e) {
        }
        frmJurnalUmum = new FrmJurnalUmum(request, jurnalumum);
    }

    public int getLanguage() {
        return language;
    }

    public void setLanguage(int language) {
        this.language = language;
    }

    private String getSystemMessage(int msgCode) {
        switch (msgCode) {
            case I_DBExceptionInfo.MULTIPLE_ID:
                return resultText[language][RSLT_ERR_VOUCHER_EXIST];
        }
        return resultText[language][RSLT_OK];
    }

    private int getControlMsgId(int msgCode) {
        switch (msgCode) {
            case I_DBExceptionInfo.MULTIPLE_ID:
                return RSLT_ERR_VOUCHER_EXIST;
        }
        return RSLT_OK;
    }

    public JurnalUmum getJurnalUmum() {
        return jurnalumum;
    }

    public FrmJurnalUmum getForm() {
        return frmJurnalUmum;
    }

    public String getMessage() {
        return msgString;
    }

    public int getErrCode() {
        return iErrCode;
    }

    public String getMsgBalance() {
        return msgBalance;
    }

    public int action(int cmd, long jurnalumumId, long userId) {
        long periodeId = 0;
        long oid = 0;
        msgString = "";
        int excCode = I_DBExceptionInfo.NO_EXCEPTION;
        int rsCode = RSLT_OK;

        switch (cmd) {
            case Command.ADD:
                jurnalumum.setVoucherNo("");
                jurnalumum.setKeterangan("");
                break;

            case Command.POST:
                frmJurnalUmum.requestEntityObject(jurnalumum);
                if (frmJurnalUmum.errorSize() > 0) {
                    msgString = resultText[language][RSLT_FORM_INCOMPLETE];
                    return RSLT_FORM_INCOMPLETE;
                }

                // get current period
                String wClause = PstPeriode.fieldNames[PstPeriode.FLD_POSTED] + " = " + PstPeriode.PERIOD_OPEN;
                Vector sessperiode = PstPeriode.list(0, 1, wClause, "");
                Date startDate = null;
                Date dueDate = null;
                if (sessperiode != null && sessperiode.size() == 1) {
                    Periode periode = (Periode) sessperiode.get(0);
                    periodeId = periode.getOID();
                    startDate = periode.getTglAwal();
                    dueDate = periode.getTglAkhir();
                }

                // check transaction date, valid or not
                Date tglTrans = jurnalumum.getTglTransaksi();
                Date tranDate = new Date(tglTrans.getYear(), tglTrans.getMonth(), tglTrans.getDate());
                Date tglEntry = new Date();
                Date entryDate = new Date(tglEntry.getYear(), tglEntry.getMonth(), tglEntry.getDate());
                if (!(jurnalumum != null && SessJurnal.isValidTransactionDate(tranDate, entryDate, startDate, dueDate))) {
                    frmJurnalUmum.addError(PstJurnalUmum.FLD_TGLTRANSAKSI, resultText[language][RSLT_ERR_TRANS_DATE]);
                    msgString = resultText[language][RSLT_ERR_TRANS_DATE];
                    return RSLT_ERR_TRANS_DATE;
                }

                jurnalumum.setOID(jurnalumumId);
                jurnalumum.setUserId(userId);
                jurnalumum.setPeriodeId(periodeId);
                jurnalumum.setTglEntry(new Date());
                //jurnalumum.setSJurnalNumber(stVoucher);
                //jurnalumum.setVoucherNo(strVoucher.substring(0, 4));
                //jurnalumum.setVoucherCounter(Integer.parseInt(strVoucher.substring(5)));

            case Command.EDIT:
                if (jurnalumumId != 0) {
                    try {
                        jurnalumum = (JurnalUmum) pstJurnalUmum.fetchExc(jurnalumumId);

                        try {
                            // get detail data from database depend on jurnalumumId and set it to object jurnalumum
                            String whereClauseJurDetail = PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_JURNALID] + " = " + jurnalumumId +
                                    " AND (" + PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_GENERAL_DETAIL_LINK] + " = 0 " +
                                    " OR (" + PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_GENERAL_DETAIL_LINK] + " <> 0 " +
                                    " AND " + PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_JDETAILID] + " = " +
                                    PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_GENERAL_DETAIL_LINK] + "))";
                            String orderBy = PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_DEBET] + " DESC";
                            long jurDetailId = 0;
                            Vector vectjurnaldetail = PstJurnalDetail.list(0, 0, whereClauseJurDetail, orderBy);
                            int size = vectjurnaldetail.size();
                            for (int i = 0; i < size; i++) {
                                JurnalDetail jurDetail = (JurnalDetail) vectjurnaldetail.get(i);
                                jurDetailId = jurDetail.getOID();
                                if (jurDetail.getGeneralDetailLink() > 0) {
                                    String where = PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_JURNALID] + " = " + jurnalumumId +
                                            " AND " + PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_GENERAL_DETAIL_LINK] + " = " + jurDetail.getGeneralDetailLink() +
                                            " AND " + PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_JDETAILID] + " <> " +
                                            PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_GENERAL_DETAIL_LINK];
                                    String order = PstJurnalDetail.fieldNames[PstJurnalDetail.FLD_DEBET] + " DESC";
                                    Vector vectlinkdetail = PstJurnalDetail.list(0, 0, where, order);
                                    int sizelink = vectlinkdetail.size();
                                    for (int j = 0; j < sizelink; j++) {
                                        JurnalDetail detailLink = (JurnalDetail) vectlinkdetail.get(j);
                                        jurDetail.addDetailLink(j, detailLink);
                                    }
                                    jurnalumum.setIShareTransaction(jurnalumum.getIShareTransaction() + 1);
                                }
                                //try{
                                String whereJd = PstJournalDistribution.fieldNames[PstJournalDistribution.FLD_JOURNAL_DETAIL_ID] + "=" + jurDetail.getOID();
                                Vector vJDistr = jurDetail.getOID()==0 ? new Vector() : PstJournalDistribution.list(0, 1000, whereJd, "");
                                jurDetail.setJournalDistributions(vJDistr);
                                //} catch (Exception exc){
                                //System.out.println("===> EXC : get Jurnal Distribution"+exc);
                                //}
                                jurnalumum.addDetails(i, jurDetail);
                            }
                        } catch (Exception e) {
                            System.out.println("Exc when edit journal : " + e.toString());
                        }
                        jurnalumum.indexSyncronize(jurnalumum.getJurnalDetails());
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }
                }
                break;

            default:

        }
        return rsCode;
    }

    /**
     * this method used to delete journal
     * @param jurnalumumId
     */
    public static void journalDelete(long jurnalumumId) {
        long oid = 0;
        if (jurnalumumId != 0) {
            try {
                oid = PstJurnalDetail.deleteByJurnalIDExc(jurnalumumId);
                if (oid != 0) {
                    PstJurnalUmum pstJurnalUmum = new PstJurnalUmum();
                    oid = pstJurnalUmum.deleteExc(jurnalumumId);
                }
            } catch (Exception e) {
                System.out.println("CtrlJurnalUmum.journalDelete.deleteByJurnalIDExc() err : " + e.toString());
            }
        }
    }

    /**
     * this method used to save object jurnal main and its details into database to substitute Command.SAVE action in action method
     * @param postedType
     * @param oid
     * @param jurUmum
     * @return
     */
    public int JournalPosted(int postedType, long oid, JurnalUmum jurUmum) {
        return JournalPosted(postedType, oid, jurUmum, null);
    }

    public synchronized int JournalPosted(int postedType, long oid, JurnalUmum jurUmum, Connection con) {
        long oidJu = 0;
        long periodeId = 0;
        int intResult = 0;
        Vector vBisnisCntBgt = new Vector();
        // get data from journal main's page
        if (postedType == POSTED_JU) {
            try {
                frmJurnalUmum.requestEntityObject(jurUmum);
                if (frmJurnalUmum.errorSize() > 0) {
                    msgString = resultText[language][RSLT_FORM_INCOMPLETE];
                    return RSLT_FORM_INCOMPLETE;
                }
            } catch (Exception e) {
                System.out.println("Err requestEntityObject : " + e.toString());
            }
        }

        // get current period
        Date startDate = null;
        Date dueDate = null;
        Vector sessperiode = PstPeriode.getCurrPeriod();
        if (sessperiode != null && sessperiode.size() > 0) {
            Periode periode = (Periode) sessperiode.get(0);
            periodeId = periode.getOID();
            startDate = periode.getTglAwal();
            dueDate = periode.getTglAkhir();
        }

        // check transaction date, valid or not
        Date tglTrans = jurUmum.getTglTransaksi();
        Date tranDate = new Date(tglTrans.getYear(), tglTrans.getMonth(), tglTrans.getDate());
        Date tglEntry = new Date();
        Date entryDate = new Date(tglEntry.getYear(), tglEntry.getMonth(), tglEntry.getDate());
        if (!(jurUmum != null && SessJurnal.isValidTransactionDate(tranDate, entryDate, startDate, dueDate))) {
            frmJurnalUmum.addError(PstJurnalUmum.FLD_TGLTRANSAKSI, resultText[language][RSLT_ERR_TRANS_DATE]);
            msgString = resultText[language][RSLT_ERR_TRANS_DATE];
            return RSLT_ERR_TRANS_DATE;
        }



        long lLocalCurrency = SessDailyRate.getIdLocalCurrency();
        double dDefaultForeignCurrRate = SessDailyRate.getDefaultCurrRate();
        double dDefaultForeignCurrStdRate = SessDailyRate.getDefaultFrgStdRate();
        // Insert process because OID==0
        if (oid == 0) {
            try {
                //jurUmum.setSJurnalNumber(stVoucher);
                //jurUmum.setVoucherNo(stringVoucher.substring(0, 4));

                //----------------------- Insert Journal Umum -----------------------
                if (con == null) {
                    oidJu = PstJurnalUmum.insertExcGenerateVoucher(jurUmum);
                } else {
                    oidJu = PstJurnalUmum.insertExcGenerateVoucher(jurUmum, con);
                }

                //---------------------- Insert Journal Detail -----------------------
                for (int i = 0; i < jurUmum.getJurnalDetails().size(); i++) {
                    JurnalDetail jurDetail = (JurnalDetail) jurUmum.getJurnalDetails().get(i);
                    if (jurDetail.getDataStatus() == PstJurnalDetail.DATASTATUS_ADD) {
                        jurDetail.setJurnalIndex(oidJu);
                    }
                    intResult = CtrlJurnalDetail.postedJournalDetail(jurDetail);


                    //---------------------- Insert Journal Distribution -----------------------    
                    for (int d = 0; d < jurDetail.getJournalDistributions().size(); d++) {
                        JournalDistribution objJDistribution = (JournalDistribution) jurDetail.getJournalDistributions().get(d);
                        if((objJDistribution.getBussCenterId()==0) || (objJDistribution.getIdPerkiraan()==0)){
                            continue;
                        }
                        if (objJDistribution.getDataStatus() == PstJurnalDetail.DATASTATUS_ADD) {
                            objJDistribution.setJournalIndex(oidJu);
                        }

                        BussinessCenterBudget bussCntBgt = new BussinessCenterBudget();
                        //System.out.println(" jurDetail.getIdPerkiraan() = "+jurDetail.getIdPerkiraan()+", objJDistribution.getIdPerkiraan() = "+objJDistribution.getIdPerkiraan());
                        //if(jurDetail.getIdPerkiraan() == objJDistribution.getIdPerkiraan()){
                        if (jurDetail.getOID() != 0) {
                            objJDistribution.setJournalDetailId(jurDetail.getOID());
                        }
                        if (objJDistribution.getPeriodeId() == 0) {
                            if (jurUmum.getPeriodeId() != 0) {
                                objJDistribution.setPeriodeId(jurUmum.getPeriodeId());
                            }
                        }

                        if (objJDistribution.getArapMainId() != 0 || objJDistribution.getArapPaymentId() != 0) {
                            objJDistribution.setDataStatus(PstJurnalDetail.DATASTATUS_UPDATE);
                        }


                        intResult = CtrlJournalDistribution.postedJournalDistribution(objJDistribution);
                        bussCntBgt.setIdPerkiraan(objJDistribution.getIdPerkiraan());
                        bussCntBgt.setPeriodeId(objJDistribution.getPeriodeId());
                        bussCntBgt.setBussCenterId(objJDistribution.getBussCenterId());
                        if (objJDistribution.getDebitAmount() > 0 && objJDistribution.getCreditAmount() == 0) {
                            bussCntBgt.setDebitLocalStdRate(objJDistribution.getDebitAmount());
                            bussCntBgt.setDebitLocalTransRate(objJDistribution.getDebitAmount());

                            if (objJDistribution.getCurrencyId() == lLocalCurrency) {
                                bussCntBgt.setDebitForeignTransRate(objJDistribution.getDebitAmount() / dDefaultForeignCurrRate);
                                bussCntBgt.setDebitForeignStdRate(objJDistribution.getDebitAmount() / dDefaultForeignCurrStdRate);
                            } else {
                                bussCntBgt.setDebitForeignTransRate(objJDistribution.getDebitAmount() / objJDistribution.getTransRate());
                                bussCntBgt.setDebitForeignStdRate(objJDistribution.getDebitAmount() / objJDistribution.getStandardRate());
                            }
                        } else {
                            if (objJDistribution.getDebitAmount() == 0 && objJDistribution.getCreditAmount() > 0) {
                                bussCntBgt.setCreditLocalStdRate(objJDistribution.getCreditAmount());
                                bussCntBgt.setCreditLocalTransRate(objJDistribution.getCreditAmount());
                                if (objJDistribution.getCurrencyId() == lLocalCurrency) {
                                    bussCntBgt.setCreditForeignTransRate(objJDistribution.getCreditAmount() / dDefaultForeignCurrRate);
                                    bussCntBgt.setCreditForeignStdRate(objJDistribution.getCreditAmount() / dDefaultForeignCurrStdRate);
                                } else {
                                    bussCntBgt.setCreditForeignTransRate(objJDistribution.getCreditAmount() / objJDistribution.getTransRate());
                                    bussCntBgt.setCreditForeignStdRate(objJDistribution.getCreditAmount() / objJDistribution.getStandardRate());
                                }
                            }
                        }
                        System.out.println("bussCntBgt.getIdPerkiraan() = " + bussCntBgt.getIdPerkiraan() + ", bussCntBgt.getBussCenterId() = " +
                                bussCntBgt.getBussCenterId() + ", = " + bussCntBgt.getDebitLocalTransRate());
                        vBisnisCntBgt.add(bussCntBgt);
                    //}else{
                    //    break;
                    //}
                    }//End looping journal distribution
                }
                //------------------------------------- End Posting Detail ----------------------------------

                long postBnsCntBgt = postingBussCenterBgt(vBisnisCntBgt);

                msgString = FRMMessage.getMsg(FRMMessage.MSG_UPDATED);
            } catch (DBException dbexc) {
                msgString = getSystemMessage(dbexc.getErrorCode());
                return getControlMsgId(dbexc.getErrorCode());
            } catch (Exception exc) {
                System.out.println("Exc when try ro insert journal : " + exc.toString());
            }
            msgString = resultText[language][RSLT_OK];
            return RSLT_OK;
        } // update process because OID!=0
        else {
            try {
                if (con == null) {
                    oidJu = PstJurnalUmum.updateExc(jurUmum);
                } else {
                    oidJu = PstJurnalUmum.updateExc(jurUmum, con);
                }

                for (int i = 0; i < jurUmum.getJurnalDetails().size(); i++) {
                    JurnalDetail jurDetail = (JurnalDetail) jurUmum.getJurnalDetails().get(i);
                    if (jurDetail.getDataStatus() == PstJurnalDetail.DATASTATUS_ADD) {
                        jurDetail.setJurnalIndex(oidJu);
                    }
                    if (con == null) {
                        intResult = CtrlJurnalDetail.postedJournalDetail(jurDetail);
                    } else {
                        intResult = CtrlJurnalDetail.postedJournalDetail(jurDetail, con);
                    }

                    //---------------------- Update Journal Distribution -----------------------    
                    for (int d = 0; d < jurDetail.getJournalDistributions().size(); d++) {
                        JournalDistribution objJDistribution = (JournalDistribution) jurDetail.getJournalDistributions().get(d);
                        if (objJDistribution.getDataStatus() == PstJurnalDetail.DATASTATUS_ADD) {
                            objJDistribution.setJournalIndex(oidJu);
                        }

                        //if(jurDetail.getIdPerkiraan() == objJDistribution.getIdPerkiraan()){
                        if (jurDetail.getOID() != 0) {
                            objJDistribution.setJournalDetailId(jurDetail.getOID());
                        }

                        intResult = CtrlJournalDistribution.postedJournalDistribution(objJDistribution);
                    //}else{
                    //    break;
                    //}

                    }
                }
                msgString = FRMMessage.getMsg(FRMMessage.MSG_UPDATED);
            } catch (DBException dbexc) {
                msgString = getSystemMessage(dbexc.getErrorCode());
                return getControlMsgId(dbexc.getErrorCode());
            } catch (Exception exc) {
                System.out.println("Exc when try ro update journal : " + exc.toString());
            }
            msgString = resultText[language][RSLT_UPDATE];
            return RSLT_OK;
        }
    }

    public static synchronized long postingBussCenterBgt(long arapPaymentId, long bussCntId) {
        long lResult = 0;
        try {
            Vector vBCBgtTrs = CtrlBussCenterBudget.listTransBCBgt(arapPaymentId, bussCntId);
            lResult = postingBussCenterBgt(vBCBgtTrs);
        } catch (Exception e) {
        }
        return lResult;
    }

    public static synchronized long postingBussCenterBgt(Vector vBussCntBgtTransBeforeUpdate) {
        long lResult = 0;
        Vector vBussCntBgtTrans = new Vector();
        try {
            vBussCntBgtTrans = (Vector) setIdBussCenterBgt(vBussCntBgtTransBeforeUpdate);
            if (vBussCntBgtTrans.size() > 0) {
                for (int i = 0; i < vBussCntBgtTrans.size(); i++) {
                    BussinessCenterBudget bCntBgtTrans = (BussinessCenterBudget) vBussCntBgtTrans.get(i);

                    if (bCntBgtTrans.getOID() == 0) {
                        lResult = PstBussCenterBudget.insertExc(bCntBgtTrans);
                    } else {
                        lResult = PstBussCenterBudget.updateExc(bCntBgtTrans);
                    }
                }
            }
        } catch (Exception e) {
        }
        return lResult;
    }

    public static synchronized Vector setIdBussCenterBgt(Vector vBussCntBgtTrans) {
        Vector vResult = new Vector();
        try {

            if (vBussCntBgtTrans.size() > 0) {
                for (int i = 0; i < vBussCntBgtTrans.size(); i++) {
                    BussinessCenterBudget bCntBgtTrans = (BussinessCenterBudget) vBussCntBgtTrans.get(i);
                    long lBCntBgtMaster = SessBussCenterBgt.getIdBussCenterBgtMaster(bCntBgtTrans);
                    BussinessCenterBudget bCntBgtMaster = new BussinessCenterBudget();
                    if (lBCntBgtMaster != 0) {
                        bCntBgtMaster = PstBussCenterBudget.fetchExc(lBCntBgtMaster);

                        bCntBgtTrans.setOID(lBCntBgtMaster);
                        bCntBgtTrans.setDebitLocalStdRate(bCntBgtTrans.getDebitLocalStdRate() + bCntBgtMaster.getDebitLocalStdRate());
                        bCntBgtTrans.setDebitLocalTransRate(bCntBgtTrans.getDebitLocalTransRate() + bCntBgtMaster.getDebitLocalTransRate());
                        bCntBgtTrans.setDebitForeignStdRate(bCntBgtTrans.getDebitForeignStdRate() + bCntBgtMaster.getDebitForeignStdRate());
                        bCntBgtTrans.setDebitForeignTransRate(bCntBgtTrans.getDebitForeignTransRate() + bCntBgtMaster.getDebitForeignTransRate());
                        bCntBgtTrans.setCreditLocalStdRate(bCntBgtTrans.getCreditLocalStdRate() + bCntBgtMaster.getCreditLocalStdRate());
                        bCntBgtTrans.setCreditLocalTransRate(bCntBgtTrans.getCreditLocalTransRate() + bCntBgtMaster.getCreditLocalTransRate());
                        bCntBgtTrans.setCreditForeignStdRate(bCntBgtTrans.getCreditForeignStdRate() + bCntBgtMaster.getCreditForeignStdRate());
                        bCntBgtTrans.setCreditForeignTransRate(bCntBgtTrans.getCreditForeignTransRate() + bCntBgtMaster.getCreditForeignTransRate());
                    }

                    System.out.println("SetIdBussCenterBgt bussCntBgt.getIdPerkiraan() = " + bCntBgtTrans.getIdPerkiraan() + ", bussCntBgt.getBussCenterId() = " +
                            bCntBgtTrans.getBussCenterId() + ", = " + bCntBgtTrans.getDebitLocalTransRate());
                    vResult.add(bCntBgtTrans);
                }
            }
        } catch (Exception e) {
            System.out.println("Exception on setIdBussCenterBgt :::::: " + e.toString());
        }
        return vResult;
    }

    public static void main(String[] vars) {
        CtrlJurnalUmum c = new CtrlJurnalUmum();
        int err = 0;
        c.action(Command.EDIT, 504404406121952989L, err);
    }
}
