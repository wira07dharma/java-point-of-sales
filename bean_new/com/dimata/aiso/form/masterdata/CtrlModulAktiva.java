/* Generated by Together */

package com.dimata.aiso.form.masterdata;


import com.dimata.aiso.db.DBHandler;
import com.dimata.aiso.entity.aktiva.PenyusutanAktiva;
import com.dimata.aiso.entity.aktiva.PstPenyusutanAktiva;
import com.dimata.aiso.entity.aktiva.PstReceiveAktiva;
import javax.servlet.http.*;  

import com.dimata.util.*;
import com.dimata.util.lang.I_Language;
import com.dimata.aiso.entity.masterdata.*;
import com.dimata.aiso.entity.periode.Periode;
import com.dimata.aiso.entity.periode.PstPeriode;
import com.dimata.aiso.entity.report.PstReportFixedAssets;
import com.dimata.aiso.entity.report.ReportFixedAssets;
import com.dimata.aiso.session.aktiva.SessReceiveAktiva;
import com.dimata.interfaces.trantype.I_TransactionType;
import com.dimata.qdep.form.Control;
import java.sql.Connection;
import java.util.Date;
import java.util.Vector;

public class CtrlModulAktiva extends Control implements I_Language {

    public static final int RSLT_OK = 0;
    public static final int RSLT_SAME = 1;
    public static final int RSLT_INCOMPLETE = 2;
    public static final int RSLT_EXIST = 3;
    public static final int RSLT_UNKNOWN = 4;
    public static String resultText[][] = {
        {"OK ...", "Rekening pertama sama dengan rekening kedua ...", "Form belum lengkap ...", "Account link sudah ada ...", "Kesalahan unknown ..."},
        {"OK ...", "First account same as the second one ...", "Form incomplete ...", "Link account already exist ...", "Unknown Error ..."}
    };


    private int start;
    private String msgString;
    private ModulAktiva aktiva;
    private PstModulAktiva pstModulAktiva;
    private FrmModulAktiva frmModulAktiva;
    private int language = LANGUAGE_DEFAULT;

    public CtrlModulAktiva(HttpServletRequest request) {
        msgString = "";
        aktiva = new ModulAktiva();
        try {
            pstModulAktiva = new PstModulAktiva(0);
        } catch (Exception e) {
        }
        frmModulAktiva = new FrmModulAktiva(request, aktiva);
    }

    public int getLanguage() {
        return language;
    }

    public void setLanguage(int language) {
        this.language = language;
    }

    public ModulAktiva getModulAktiva() {
        return aktiva;
    }

    public FrmModulAktiva getForm() {
        return frmModulAktiva;
    }

    public String getMessage() {
        return msgString;
    }
    
    public int action(int cmd, long Oid){
        return action(cmd, Oid, 0, 0, null,0,null);
    }
    
    public int action(int cmd, long Oid, double dAccDep, long lUserId, Date ownDate, int iQty, String sAutoReceive) {
	Connection con = null;
	/*try{
	    con = DBHandler.getDBConnection();
	    con.setAutoCommit(false);
	}catch(Exception e){
	    msgString = resultText[language][RSLT_UNKNOWN];
	    return RSLT_UNKNOWN;
	}*/
	long lInsert = 0;
	long lUpdate = 0;
	PenyusutanAktiva objPenyAktiva = new PenyusutanAktiva();
	Periode objPeriode = new Periode();
	this.start = start;
        int result = RSLT_OK;
        msgString = "";
        switch (cmd) {
            case Command.ADD:
                break;

            case Command.SAVE:
		long lAccDpId = 0;
                if(Oid!=0){
                    try{
                        aktiva = PstModulAktiva.fetchExc(Oid);
			lAccDpId = aktiva.getIdPerkiraanDp();
                    }catch(Exception e){}
                }
                frmModulAktiva.requestEntityObject(aktiva);
                aktiva.setOID(Oid);

                if (frmModulAktiva.errorSize() > 0) {
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }

                if (aktiva.getOID() == 0) {		    
                    try {
                        lInsert = pstModulAktiva.insertExc(this.aktiva);
			ReportFixedAssets objReportFixedAssets = new ReportFixedAssets();
			try{
			    aktiva.setTglPerolehan(ownDate);
			    PstReportFixedAssets.setReportFixedAssetsFrMaster(objReportFixedAssets, aktiva, iQty, dAccDep);
			    long lInsertRFA = PstReportFixedAssets.insertExc(objReportFixedAssets);
			}catch(Exception e){}
                        if(lUserId != 0){
                            if(aktiva.getOID() != 0){
                                long periodId = 0;
                                try{
                                    periodId = PstPeriode.getCurrPeriodId();
                                }catch(Exception e){}
                                if(periodId != 0 && dAccDep != 0){                                
                                    objPenyAktiva.setAktivaId(aktiva.getOID());
                                    objPenyAktiva.setPeriodeId(periodId);
                                    objPenyAktiva.setValue_pny(dAccDep);  
                                    try{
                                        lInsert = PstPenyusutanAktiva.insertExc(objPenyAktiva, con);
                                    }catch(Exception e){} 
                                }
                                
                                if(periodId != 0 && sAutoReceive.equalsIgnoreCase("Y")){ 
                                    lInsert = PstReceiveAktiva.insertReceiveAktiva(periodId,aktiva.getOID(),aktiva,lUserId, ownDate, iQty);  
                                }
                            }
                        }
			
			/*if(lInsert != 0){
			    try{
				con.commit();
				DBHandler.closeConn(con);
				//con.close();
			    }catch(Exception e){
				 msgString = resultText[language][RSLT_UNKNOWN];
				 return RSLT_UNKNOWN;
			    }
			}else{
			    try{
				con.rollback();	
				DBHandler.closeConn(con);
				//con.close();
			    }catch(Exception e){
				msgString = resultText[language][RSLT_UNKNOWN];
				return RSLT_UNKNOWN;
			    }
			}*/
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                } else {
                    try {
                        this.aktiva.setTglPerolehan(ownDate);
                        lUpdate = pstModulAktiva.updateExc(this.aktiva);
			ReportFixedAssets objReportFixedAssets = new ReportFixedAssets();
			long lRptFAId = 0;
			long periodId = 0;
			Date startPeriodDate = new Date();
                        try{
                            periodId = PstPeriode.getCurrPeriodId();
                        }catch(Exception e){}
			try{
			    if(periodId != 0){
				try{
				    objPeriode = PstPeriode.fetchExc(periodId);
				    startPeriodDate = objPeriode.getTglAwal();
				}catch(Exception e){}
				lRptFAId = PstReportFixedAssets.getReportFixedAssetsId(aktiva.getOID(), periodId);
			    }
			    if(lRptFAId != 0){
				objReportFixedAssets = PstReportFixedAssets.fetchExc(lRptFAId);
				PstReportFixedAssets.setReportFixedAssetsFrMaster(objReportFixedAssets, aktiva, iQty, dAccDep);				
				long lUpdateRFA = PstReportFixedAssets.updateExc(objReportFixedAssets);
			    }
			}catch(Exception e){}
                        
			
			lUpdate = updatePenyusutan(aktiva.getOID(),periodId,dAccDep);
			if(sAutoReceive.equalsIgnoreCase("Y")){
			    boolean isPaid = false;
			    long lArapMainId = 0;
			    try{
				lArapMainId = SessReceiveAktiva.getAccountPayabelId(aktiva.getOID());
				isPaid = SessReceiveAktiva.isPaid(lArapMainId);
			    }catch(Exception e){}
			    switch(aktiva.getTransType()){
				case I_TransactionType.TIPE_TRANSACTION_KREDIT:
					if(!isPaid){
					    lUpdate = PstReceiveAktiva.updateReceiveAktiva(aktiva.getOID(),aktiva,lUserId,periodId,ownDate,iQty,dAccDep,lAccDpId);
					}
				    break;
				case I_TransactionType.TIPE_TRANSACTION_CASH:
					if(lArapMainId != 0){
					    if(aktiva.getDownPayment() > 0){
						aktiva.setDownPayment(0);
						try{
						    lUpdate = pstModulAktiva.updateExc(aktiva);
						}catch(Exception e){}
					    }
					    if(!isPaid){
						lUpdate = PstReceiveAktiva.updateReceiveAktiva(aktiva.getOID(),aktiva,lUserId,periodId,ownDate,iQty,dAccDep,lAccDpId);
					    }
					}else{
						lUpdate = PstReceiveAktiva.updateReceiveAktiva(aktiva.getOID(),aktiva,lUserId,periodId,ownDate,iQty,dAccDep,lAccDpId);
					}
				    break;
				case I_TransactionType.TIPE_TRANSACTION_AWAL:
				    if(aktiva.getTglPerolehan().before(startPeriodDate)){
					if(lArapMainId != 0){
					    if(aktiva.getDownPayment() > 0){
						aktiva.setDownPayment(0);
						try{
						    lUpdate = pstModulAktiva.updateExc(aktiva);
						}catch(Exception e){}
					    }
					    if(!isPaid){
						lUpdate = PstReceiveAktiva.updateReceiveAktiva(aktiva.getOID(),aktiva,lUserId,periodId,ownDate,iQty,dAccDep,lAccDpId);
					    }
					}else{
						lUpdate = PstReceiveAktiva.updateReceiveAktiva(aktiva.getOID(),aktiva,lUserId,periodId,ownDate,iQty,dAccDep,lAccDpId);
					}
				    }
				    break;
			    }
			}
			
			/*if(lUpdate != 0){
			    try{
				con.commit();			    
				con.close();
				System.out.println("Connection close  : "+con.isClosed());
			    }catch(Exception e){
				 msgString = resultText[language][RSLT_UNKNOWN];
				 return RSLT_UNKNOWN;
			    }
			}else{
			    try{
				con.rollback();
				con.close();
			    }catch(Exception e){
				 msgString = resultText[language][RSLT_UNKNOWN];
				 return RSLT_UNKNOWN;
			    }
			}*/
                    } catch (Exception exc) {			
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.EDIT:
                if (Oid != 0) {
                    try {
                        aktiva = (ModulAktiva) pstModulAktiva.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.ASK:
                if (Oid != 0) {
                    try {
                        aktiva = (ModulAktiva) pstModulAktiva.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.DELETE:
                if (Oid != 0) {
                    PstModulAktiva pstModulAktiva = new PstModulAktiva();
		    ReportFixedAssets objReportFixedAssets = new ReportFixedAssets();
		    long lPeriodId = 0;
		    long lRptFAId = 0;		    
		    long lDelete = 0;
		    try{
			lPeriodId = PstPeriode.getCurrPeriodId();
		    }catch(Exception e){};
                    try {
                        long oid = pstModulAktiva.deleteExc(Oid);
                        this.start = 0;
			if(lPeriodId != 0){
			    lRptFAId = PstReportFixedAssets.getReportFixedAssetsId(Oid, lPeriodId);
			    if(lRptFAId != 0){
				try{
				    long lDel = PstReportFixedAssets.deleteExc(lRptFAId);
				}catch(Exception e){}
			    }
			}
                        if(dAccDep != 0){
                            lDelete = PstReceiveAktiva.deleteReceiveAktiva(Oid);
                        }
			/*if(lDelete != 0){
			    con.commit();
			}else{
			    con.rollback();
			}*/
                    } catch (Exception exc) {			
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            default:

        }
        return result;
    }
    
    public long updatePenyusutan(long lAktivaId, long lPeriodeId, double dAccPenyusutan){
	return updatePenyusutan(lAktivaId, lPeriodeId, dAccPenyusutan, null);
    }
    
    public long updatePenyusutan(long lAktivaId, long lPeriodeId, double dAccPenyusutan, Connection con){
        long lResult = 0;
            try{
                Vector vPenyusutan = new Vector(1,1);
                String sWhClause = PstPenyusutanAktiva.fieldNames[PstPenyusutanAktiva.FLD_AKTIVA_ID]+" = "+lAktivaId;
                vPenyusutan = PstPenyusutanAktiva.list(0,0,sWhClause,"");
                if(vPenyusutan != null && vPenyusutan.size() > 0){
                    for(int i = 0; i < vPenyusutan.size(); i++){
                        PenyusutanAktiva objPenyAktiva = new PenyusutanAktiva();
                        objPenyAktiva = (PenyusutanAktiva)vPenyusutan.get(i);                        
                        if(objPenyAktiva.getOID() != 0){
                            try{
                                objPenyAktiva.setValue_pny(dAccPenyusutan);
				if(con == null){
				    lResult = PstPenyusutanAktiva.updateExc(objPenyAktiva);
				}else{
				    lResult = PstPenyusutanAktiva.updateExc(objPenyAktiva,con);
				}
                            }catch(Exception e){}
                        }
                    }
                }else{
                    try{
                        PenyusutanAktiva objPenyAktiva = new PenyusutanAktiva();
                        objPenyAktiva.setPeriodeId(lPeriodeId);
                        objPenyAktiva.setAktivaId(lAktivaId);
                        objPenyAktiva.setValue_pny(dAccPenyusutan);
			if(con == null){
			    lResult = PstPenyusutanAktiva.insertExc(objPenyAktiva);
			}else{
			    lResult = PstPenyusutanAktiva.insertExc(objPenyAktiva, con);
			}
                    }catch(Exception e){}
                }
            }catch(Exception e){}
        return lResult;
    }
}
