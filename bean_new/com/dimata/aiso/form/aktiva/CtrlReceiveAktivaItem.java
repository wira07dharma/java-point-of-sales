/* Generated by Together */

package com.dimata.aiso.form.aktiva;

import javax.servlet.http.*;

import com.dimata.util.*;
import com.dimata.util.lang.I_Language;
import com.dimata.aiso.entity.aktiva.PstReceiveAktivaItem;
import com.dimata.aiso.entity.aktiva.ReceiveAktivaItem;
import com.dimata.qdep.form.Control;

public class CtrlReceiveAktivaItem extends Control implements I_Language {

    public static final int RSLT_OK = 0;
    public static final int RSLT_SAME = 1;
    public static final int RSLT_INCOMPLETE = 2;
    public static final int RSLT_EXIST = 3;
    public static final int RSLT_UNKNOWN = 4;
    public static String resultText[][] = {
        {"OK ...", "Rekening pertama sama dengan rekening kedua ...", "Form belum lengkap ...", "Account link sudah ada ...", "Kesalahan unknown ..."},
        {"OK ...", "First account same as the second one ...", "Form incomplete ...", "Link account already exist ...", "Unknown Error ..."}
    };


    private int start;
    private String msgString;
    private ReceiveAktivaItem aktiva;
    private PstReceiveAktivaItem pstAktiva;
    private FrmReceiveAktivaItem frmAktiva;
    private int language = LANGUAGE_DEFAULT;

    public CtrlReceiveAktivaItem(HttpServletRequest request) {
        msgString = "";
        aktiva = new ReceiveAktivaItem();
        try {
            pstAktiva = new PstReceiveAktivaItem(0);
        } catch (Exception e) {
        }
        frmAktiva = new FrmReceiveAktivaItem(request, aktiva);
    }

    public int getLanguage() {
        return language;
    }

    public void setLanguage(int language) {
        this.language = language;
    }

    public ReceiveAktivaItem getReceiveAktivaItem() {
        return aktiva;
    }

    public FrmReceiveAktivaItem getForm() {
        return frmAktiva;
    }

    public String getMessage() {
        return msgString;
    }

    public int action(int cmd, long Oid) {
        this.start = start;
        int result = RSLT_OK;
        msgString = "";
        switch (cmd) {
            case Command.ADD:
                break;

            case Command.SAVE:
                frmAktiva.requestEntityObject(aktiva);
                aktiva.setOID(Oid);

                if (frmAktiva.errorSize() > 0) {
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }

                if (aktiva.getOID() == 0) {
                    try {
                        long oid = pstAktiva.insertExc(this.aktiva);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                } else {
                    try {
                        long oid = pstAktiva.updateExc(this.aktiva);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.EDIT:
                if (Oid != 0) {
                    try {
                        aktiva = (ReceiveAktivaItem) pstAktiva.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.ASK:
                if (Oid != 0) {
                    try {
                        aktiva = (ReceiveAktivaItem) pstAktiva.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.DELETE:
                if (Oid != 0) {
                    PstReceiveAktivaItem pstAktiva = new PstReceiveAktivaItem();
                    try {
                        long oid = pstAktiva.deleteExc(Oid);
                        this.start = 0;
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            default:

        }
        return result;
    }
}
