/* Generated by Together */

package com.dimata.aiso.form.aktiva;

import javax.servlet.http.*;

import com.dimata.util.*;
import com.dimata.util.lang.I_Language;
import com.dimata.aiso.entity.aktiva.PstOrderAktiva;
import com.dimata.aiso.entity.aktiva.OrderAktiva;
import com.dimata.aiso.entity.aktiva.PstPenyusutanAktiva;
import com.dimata.aiso.entity.aktiva.PenyusutanAktiva;
import com.dimata.aiso.entity.masterdata.PstAktiva;
import com.dimata.aiso.entity.masterdata.ModulAktiva;
import com.dimata.aiso.entity.masterdata.Aktiva;
import com.dimata.aiso.entity.masterdata.PstModulAktiva;
import com.dimata.aiso.entity.report.PstReportFixedAssets;
import com.dimata.aiso.entity.report.ReportFixedAssets;
import com.dimata.aiso.session.report.SessWorkSheet;
import com.dimata.qdep.form.Control;

import java.util.Vector;
import java.util.Date;

public class CtrlPenyusutanAktiva extends Control implements I_Language {

    public static final int RSLT_OK = 0;
    public static final int RSLT_SAME = 1;
    public static final int RSLT_INCOMPLETE = 2;
    public static final int RSLT_EXIST = 3;
    public static final int RSLT_UNKNOWN = 4;
    public static String resultText[][] = {
        {"OK ...", "Rekening pertama sama dengan rekening kedua ...", "Form belum lengkap ...", "Account link sudah ada ...", "Kesalahan unknown ..."},
        {"OK ...", "First account same as the second one ...", "Form incomplete ...", "Link account already exist ...", "Unknown Error ..."}
    };


    private int start;
    private String msgString;
    private PenyusutanAktiva aktiva;
    private PstPenyusutanAktiva pstAktiva;
    private FrmPenyusutanAktiva frmAktiva;
    private int language = LANGUAGE_DEFAULT;

    public CtrlPenyusutanAktiva(HttpServletRequest request) {
        msgString = "";
        aktiva = new PenyusutanAktiva();
        try {
            pstAktiva = new PstPenyusutanAktiva(0);
        } catch (Exception e) {
        }
        frmAktiva = new FrmPenyusutanAktiva(request, aktiva);
    }

    public int getLanguage() {
        return language;
    }

    public void setLanguage(int language) {
        this.language = language;
    }

    public PenyusutanAktiva getPenyusutanAktiva() {
        return aktiva;
    }

    public FrmPenyusutanAktiva getForm() {
        return frmAktiva;
    }

    public String getMessage() {
        return msgString;
    }

    public int action(int cmd, long Oid, Vector vect,long oidPeriod) {
        this.start = start;
        int result = RSLT_OK;
        msgString = "";
        switch (cmd) {
            case Command.ADD:
                break;

            case Command.SAVE:
                if (vect != null && vect.size() > 0) {
                    long preOidPeriod = SessWorkSheet.getOidPeriodeLalu(oidPeriod);
                    for (int k = 0; k < vect.size(); k++) {
                        ModulAktiva modulAktiva = (ModulAktiva)vect.get(k);
                        PenyusutanAktiva penyusutanAktiva = PstPenyusutanAktiva.existPenyusutanAktiva(modulAktiva.getOID(),oidPeriod);

                        Aktiva aktiva = new Aktiva();
                        try{
                            aktiva = PstAktiva.fetchExc(modulAktiva.getMetodePenyusutanOid());
                        }catch(Exception e){}

                        double nilaiPenyu = 0.0;
                        Date dateNow = new Date();
                        switch (aktiva.getTypeMetodePenyusutan()) {
                            case PstAktiva.METODE_PENYUSUTAN_GARIS_LURUS:
                                nilaiPenyu = ((modulAktiva.getHargaPerolehan() - modulAktiva.getNilaiResidu()) / modulAktiva.getMasaManfaat()) / 12;
                                if(modulAktiva.getTglPerolehan()!=null){
                                    Date bts = modulAktiva.getTglPerolehan();
                                    bts.setYear(bts.getYear()+modulAktiva.getMasaManfaat());
                                    if(dateNow.after(bts)){
                                        nilaiPenyu = 0;
                                    }
                                }
                                break;
                            case PstAktiva.METODE_PENYUSUTAN_SALDO_MENURUN:
                                /**
                                 * mencari penyusutan periode lalu
                                 */
                                PenyusutanAktiva susutAktivaLalu = PstPenyusutanAktiva.existPenyusutanAktiva(modulAktiva.getOID(),preOidPeriod);
                                nilaiPenyu = ((modulAktiva.getHargaPerolehan() - susutAktivaLalu.getValue_pny()) * modulAktiva.getPersenPenyusutan() / 100) / 12;

                                if(modulAktiva.getTglPerolehan()!=null){
                                    Date btss = modulAktiva.getTglPerolehan();
                                    btss.setYear(btss.getYear()+modulAktiva.getMasaManfaat());
                                    if(dateNow.after(btss)){
                                        double totalSusut = PstPenyusutanAktiva.getTotalNilaiSusut(modulAktiva.getOID());
                                        nilaiPenyu = modulAktiva.getHargaPerolehan() - totalSusut;
                                    }
                                }

                                break;
                        }
                        penyusutanAktiva.setValue_pny(nilaiPenyu);
                        if(penyusutanAktiva.getOID()!=0){
                            try{
                                PstPenyusutanAktiva.updateExc(penyusutanAktiva);
                            }catch(Exception e){}
                        }else{
                            try{
                                penyusutanAktiva.setAktivaId(modulAktiva.getOID());
                                penyusutanAktiva.setPeriodeId(oidPeriod);
                                PstPenyusutanAktiva.insertExc(penyusutanAktiva); 
				
				long lReportFAId = 0;
				ReportFixedAssets objReportFixedAssets = new ReportFixedAssets();
				try{
				    lReportFAId = PstReportFixedAssets.getReportFixedAssetsId(modulAktiva.getOID(), oidPeriod);
				}catch(Exception e){}
				
				if(lReportFAId != 0){
				    double dDepThisMonth = 0.0;
				    double dAqcThisMonth = 0.0;
				    objReportFixedAssets = PstReportFixedAssets.fetchExc(lReportFAId);
				    dAqcThisMonth = objReportFixedAssets.getAqcThisMonth();
				    dDepThisMonth = objReportFixedAssets.getDepThisMonth();
				    objReportFixedAssets.setDepIncrement(penyusutanAktiva.getValue_pny());
				    objReportFixedAssets.setDepThisMonth(dDepThisMonth + penyusutanAktiva.getValue_pny());
				    objReportFixedAssets.setBookValue(dAqcThisMonth - (dDepThisMonth + penyusutanAktiva.getValue_pny()));
				    try{
					long lUpdate = PstReportFixedAssets.updateExc(objReportFixedAssets);
				    }catch(Exception e){}
				}
                                /**
                                 * ini untuk mengupdate modul aktiva
                                 * yang termasuk dalam penyusutan
                                 */
                                ModulAktiva mdlAktiva = new ModulAktiva();
                                mdlAktiva = PstModulAktiva.fetchExc(modulAktiva.getOID());
                                mdlAktiva.setTotalPenyusutan(mdlAktiva.getTotalPenyusutan() + nilaiPenyu);
                                PstModulAktiva.updateExc(mdlAktiva);

                            }catch(Exception e){}
                        }
                    }
                }

                /*frmAktiva.requestEntityObject(aktiva);
                if (frmAktiva.errorSize() > 0) {
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
               if (aktiva.getOID() == 0) {
                    try {
                        long oid = pstAktiva.insertExc(this.aktiva);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                } else {
                    try {
                        long oid = pstAktiva.updateExc(this.aktiva);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }*/
                break;

            case Command.EDIT:
                if (Oid != 0) {
                    try {
                        aktiva = (PenyusutanAktiva) pstAktiva.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.ASK:
                if (Oid != 0) {
                    try {
                        aktiva = (PenyusutanAktiva) pstAktiva.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.DELETE:
                if (Oid != 0) {
                    PstPenyusutanAktiva pstAktiva = new PstPenyusutanAktiva();
                    try {
                        long oid = pstAktiva.deleteExc(Oid);
                        this.start = 0;
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            default:

        }
        return result;
    }
}
