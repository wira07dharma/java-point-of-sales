/* Generated by Together */

package com.dimata.aiso.form.arap;

import javax.servlet.http.*;

import com.dimata.util.*;
import com.dimata.util.lang.I_Language;
import com.dimata.aiso.entity.arap.PstArApMain;
import com.dimata.aiso.entity.arap.ArApMain;
import com.dimata.aiso.entity.arap.PstArApItem;
import com.dimata.aiso.entity.periode.PstPeriode;
import com.dimata.aiso.entity.periode.Periode;
import com.dimata.qdep.form.Control;

import java.util.Date;
import java.util.Vector;

public class CtrlArApMain extends Control implements I_Language {

    public static final int RSLT_OK = 0;
    public static final int RSLT_REFERENCE = 1;
    public static final int RSLT_INCOMPLETE = 2;
    public static final int RSLT_CONTACT = 3;
    public static final int RSLT_UNKNOWN = 4;
    public static final int RSLT_ERR_TRANS_DATE = 5;
    public static final int RSLT_ERR_ENTRY_DATE = 6;
    public static final int RSLT_ERR_AMOUNT = 7;
    public static String resultText[][] = {
        {"OK", "Rekening piutang sama dengan rekening lawan", "Form dengan tanda *) belum diisi data", "Account link sudah ada", 
         "Kesalahan unknown", "Tanggal transaksi tidak sesuai", "Tanggal entry tidak sesuai","Nilai transaksi belum dientry"},
        {"OK", "Both main and opposite account is equal", "Form incomplete.Please check required form data", "Link account already exist", 
         "Unknown Error", "Transaction date invalid", "Entry date invalid","Amount is required"}
    };


    private int start;
    private String msgString;
    private ArApMain arap;
    private PstArApMain pstArAp;
    private FrmArApMain frmArAp;
    private int language = LANGUAGE_DEFAULT;

    public CtrlArApMain(HttpServletRequest request) {
        msgString = "";
        arap = new ArApMain();
        try {
            pstArAp = new PstArApMain(0); 
        } catch (Exception e) {
        }
        frmArAp = new FrmArApMain(request, arap);
    }

    public int getLanguage() {
        return language;
    }

    public void setLanguage(int language) {
        this.language = language;
    }

    public ArApMain getArApMain() {
        return arap;
    }

    public FrmArApMain getForm() {
        return frmArAp;
    }

    public String getMessage() {
        return msgString;
    }

    public int action(int cmd, long Oid) {
        this.start = start;
        int result = RSLT_OK;
        msgString = "";
        switch (cmd) {
            case Command.ADD:
                break;

            case Command.SAVE:
                frmArAp.requestEntityObject(arap);
                arap.setOID(Oid);
                
                if(frmArAp.errorSize() > 0) {
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
                
                if(arap.getNotaNo().length() == 0){
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
                
                
                if(arap.getContactId() == 0){
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
                
                if(arap.getAmount() == 0){
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
                
                if(arap.getIdPerkiraan() == arap.getIdPerkiraanLawan()){
                    msgString = resultText[language][RSLT_REFERENCE];
                    return RSLT_REFERENCE;
                }
                
                // cek tanggal transaksi dan entry
                Date startDate = null;
                Date finishDate = null;
                Date lastDate = null;
                Vector sessperiode = PstPeriode.getCurrPeriod();
                if (sessperiode != null && sessperiode.size() > 0) {
                    Periode periode = (Periode) sessperiode.get(0);
                    startDate = periode.getTglAwal();
                    finishDate = periode.getTglAkhir();
                    lastDate = periode.getTglAkhirEntry();
                }

                if (arap.getNotaDate().before(startDate) || arap.getNotaDate().after(finishDate)) {
                    msgString = resultText[language][RSLT_ERR_TRANS_DATE];
                    return RSLT_ERR_TRANS_DATE;
                }

                if (arap.getVoucherDate().after(lastDate)) {
                    arap.setVoucherDate(new Date());
                    if (arap.getVoucherDate().after(lastDate)) {
                        msgString = resultText[language][RSLT_ERR_ENTRY_DATE];
                        return RSLT_ERR_ENTRY_DATE;
                    }
                }
               
                if (arap.getOID() == 0) {
                    synchronized(this){
                    try {
                        arap = PstArApMain.createOrderNomor(arap);
                        long oid = pstArAp.insertExc(this.arap);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;                    
                    }
                    }
                } else {
                    try {
                        long oid = pstArAp.updateExc(this.arap);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.EDIT:
                if (Oid != 0) {
                    try {
                        arap = (ArApMain) pstArAp.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;
            case Command.SUBMIT:
                frmArAp.requestEntityObject(arap);
                arap.setOID(Oid);
                break;
            case Command.ASK:
                if (Oid != 0) {
                    try {
                        arap = (ArApMain) pstArAp.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.DELETE:
                if (Oid != 0) {
                    PstArApMain pstArAp = new PstArApMain();
                    try {
                        long oid = pstArAp.deleteExc(Oid);
                        PstArApItem.deleteByMainId(Oid);
                        this.start = 0;
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            default:

        }
        return result;
    }
}
