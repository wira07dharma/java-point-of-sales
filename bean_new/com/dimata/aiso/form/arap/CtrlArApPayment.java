/* Generated by Together */

package com.dimata.aiso.form.arap;

import javax.servlet.http.*;

import com.dimata.util.*;
import com.dimata.util.lang.I_Language;
import com.dimata.aiso.entity.arap.PstArApPayment;
import com.dimata.aiso.entity.arap.ArApPayment;
import com.dimata.qdep.form.Control;

public class CtrlArApPayment extends Control implements I_Language {

    public static final int RSLT_OK = 0;
    public static final int RSLT_SAME = 1;
    public static final int RSLT_INCOMPLETE = 2;
    public static final int RSLT_EXIST = 3;
    public static final int RSLT_UNKNOWN = 4;
    public static String resultText[][] = {
        {"OK ...", "Rekening pertama sama dengan rekening kedua ...", "Form belum lengkap ...", "Account link sudah ada ...", "Kesalahan unknown ..."},
        {"OK ...", "First account same as the second one ...", "Form incomplete ...", "Link account already exist ...", "Unknown Error ..."}
    };


    private int start;
    private String msgString;
    private ArApPayment arap;
    private PstArApPayment pstArAp;
    private FrmArApPayment frmArAp;
    private int language = LANGUAGE_DEFAULT;

    public CtrlArApPayment(HttpServletRequest request) {
        msgString = "";
        arap = new ArApPayment();
        try {
            pstArAp = new PstArApPayment(0);
        } catch (Exception e) {
        }
        frmArAp = new FrmArApPayment(request, arap);
    }

    public int getLanguage() {
        return language;
    }

    public void setLanguage(int language) {
        this.language = language;
    }

    public ArApPayment getArApPayment() {
        return arap;
    }

    public FrmArApPayment getForm() {
        return frmArAp;
    }

    public String getMessage() {
        return msgString;
    }

    public int action(int cmd, long Oid) {
        this.start = start;
        int result = RSLT_OK;
        msgString = "";
        switch (cmd) {
            case Command.ADD:
                break;

            case Command.SAVE:
                frmArAp.requestEntityObject(arap);
                arap.setOID(Oid);

                if (frmArAp.errorSize() > 0) {
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }

                if (arap.getOID() == 0) {
                    try {
                        arap = PstArApPayment.createOrderNomor(arap);
                        long oid = pstArAp.insertExc(this.arap);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                } else {
                    try {
                        long oid = pstArAp.updateExc(this.arap);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.EDIT:
                if (Oid != 0) {
                    try {
                        arap = (ArApPayment) pstArAp.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.ASK:
                if (Oid != 0) {
                    try {
                        arap = (ArApPayment) pstArAp.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.DELETE:
                if (Oid != 0) {
                    PstArApPayment pstArAp = new PstArApPayment();
                    try {
                        long oid = pstArAp.deleteExc(Oid);
                        this.start = 0;
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            default:

        }
        return result;
    }
}
