/* Generated by Together */

package com.dimata.util;

import java.util.*;

public class LogicParser
    {
      public static int SIGN_EQUAL=0;
      public static int SIGN_LESS=1;
      public static int SIGN_MORE=2;
      public static int SIGN_OPEN_BRACKET=3;
      public static int SIGN_CLOSE_BRACKET=4;
      public static int SIGN_DOUBLE_QUOTE=5;
      public static int SIGN_COMMA=5;

      public static String[] SIGN= {"=", "<", ">","(",")","\"",","};
      //public static String[] SIGN= {"=", "<", ">","","","\"",","};
      //
      public static boolean isInSign(String str)
      {
        for(int i=0; i<SIGN.length;i++)
        {
            if(SIGN[i].equals(str))
                return true;
        }
        return false;
      }
      //
      public static int WORD_OR=0;
      public static int WORD_AND=1;
      public static int WORD_LIKE=2;

      public static String[] ENGLISH= {"OR", "AND", "LIKE"};

      //
      public static boolean isInLogEnglish(String str)
      {
        for(int i=0; i<ENGLISH.length;i++)
        {
            if(ENGLISH[i].equals(str))
                return true;
        }
        return false;
      }
   /**
   * This  methode will parse text sentence into logical part defided by whitespace,
   * and return them as vector.
   * A word with wildcarts will translated into 'like' sintax, e.g   things* =>  ( LIKE things* )
   * Words inside an double quote or words separated by white space will be intepreted as a word.
   * e.g. "Nusa Dusa"  or  Nusa Dua
   * Example:
   * Bali and Nusa Dua or (Lombok and Kuta Beach) or "Bali West"
   * will be translated into vector
   * 0=Bali 1=and 2=Nusa Dua 3=or 4=( 5=Lombok 6=and 7=Kuta Beach 8=) 9=or 10=Bali West
   * Furthermore this methode will replace comma "," into OR. eb. Bali, Lombok => Bali OR Lombok
   */
    public static Vector textSentence(String sentence)
    {
        Vector vct = new Vector(1,1);

        if(  (sentence==null) ||(sentence.length()<1))
            return vct;

        // replace all commas with OR
        String strTemp1 = "";
        String strTemp2 = "";
        String  strSentence ="";
        StringTokenizer st0 = new StringTokenizer(sentence.toUpperCase(),",");
        int iTemp=0;
        while (st0.hasMoreTokens()) {
            strTemp1 = st0.nextToken();
            strSentence=strSentence + " " + strTemp1 + " "+ENGLISH[WORD_OR];
            iTemp++;
        }
        if(iTemp>0)
           strSentence = strSentence.substring(0,strSentence.length()-1- ENGLISH[WORD_OR].length());

        StringTokenizer st = new StringTokenizer(strSentence);
        String strWord  = "";
        strTemp1 = "";
        strTemp2 = "";
        int iEnd =-1;
        int iStart =-1 ;

        while (st.hasMoreTokens()) {
            strTemp1 = st.nextToken();

            iStart = strTemp1.indexOf(SIGN[SIGN_DOUBLE_QUOTE]);
            if(iStart>-1)
            {
               strTemp1=strTemp1.substring(0,iStart) + strTemp1.substring(iStart+1);
               if(strWord.length()<1){
               		strWord = strTemp1;
            	}else{
                	strWord = strWord +" "+ strTemp1;
            	}

               if(iStart>0)
                {
                   vct.add(strWord);
                   strWord="";
                }
            }
             else
             {
                  if( (strTemp1.equals(SIGN[SIGN_OPEN_BRACKET])) || (strTemp1.equals(SIGN[SIGN_CLOSE_BRACKET]))
                    )
                  {
                      vct.add(strTemp1);
                  }
                   else
                   {
                      if( (strTemp1.equals(ENGLISH[WORD_OR])) ||  (strTemp1.equals(ENGLISH[WORD_AND])) ||
                          (strTemp1.equals(ENGLISH[WORD_LIKE])) 
                        )
                      {
                          vct.add(strWord);
                          strWord="";
                          vct.add(strTemp1);
                      }
                      else
                      {
                         iStart = strTemp1.indexOf(SIGN[SIGN_OPEN_BRACKET]);
                         while (iStart>-1)
                         {
                          vct.add(SIGN[SIGN_OPEN_BRACKET]);
                          strTemp1 = strTemp1.substring(iStart+1);
                          iStart = strTemp1.indexOf(SIGN[SIGN_OPEN_BRACKET]);
                         }
      
                         iEnd = strTemp1.indexOf(SIGN[SIGN_CLOSE_BRACKET]);
      
                         if(iEnd>-1)
                         {
                          strTemp2 = strTemp1.substring(iEnd+1);
                          strTemp1 = strTemp1.substring(0,iEnd);
			               if(strWord.length()<1){
			               		strWord = strTemp1;
			            	}else{
			                	strWord = strWord +" "+ strTemp1;
			            	}
                          vct.add(strWord);
                          strWord="";
                          vct.add(SIGN[SIGN_CLOSE_BRACKET]);
      
                          iEnd = strTemp2.indexOf(SIGN[SIGN_CLOSE_BRACKET]);
                          int iLastEnd = 0;
                          while(iEnd>-1)
                              {
                                  strTemp1 = strTemp2.substring(iEnd+1);
                                  vct.add(SIGN[SIGN_CLOSE_BRACKET]);
                                  iLastEnd = iEnd;
                                  iEnd = strTemp2.indexOf(SIGN[SIGN_CLOSE_BRACKET], iEnd+1);
                              }
                          if(iLastEnd< (strTemp2.length()-1))
                          {
                            vct.add(strTemp2.substring(iLastEnd+1));
                          }
                         }
                         else
			               if(strWord.length()<1){
			               		strWord = strTemp1;
			            	}else{
			                	strWord = strWord +" "+ strTemp1;
			            	}
                            // strWord = strWord +" "+ strTemp1;
                      }
                   }
             }
        }

        if(strWord.length()>0)
            vct.add(strWord); // add for the last word
        return vct;
    }

    /*
    public static Vector cleaningVctLogic(Vector dirtyVct) {
        // clean "" string

        String tmp = "";
        Vector cln = new Vector();
        Vector cln2 = new Vector();
        for(int i = 0; i < dirtyVct.size(); i++) {
            tmp = (String)dirtyVct.get(i);
        	if(tmp.length() != 0) {
              	cln.add(tmp);
        	}
        }

        int opt = 0;
        for(int i = 0; i < cln.size(); i++) {
            tmp = (String)cln.get(i);
        	if(isInLogEnglish(tmp)) {
				opt++;
                if(opt <= 1)
                    cln2.add(tmp);

        	}else {
            	opt = cln2.add(tmp);
                if(opt > 0)
                	opt--;
        	}
        }

        return cln2;
    } */

 }  // end of LogicParser
