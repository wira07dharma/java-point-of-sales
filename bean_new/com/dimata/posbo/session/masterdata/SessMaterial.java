/* Generated by Together */
package com.dimata.posbo.session.masterdata;

import java.util.*;
import java.sql.*;

import com.dimata.util.*;
import com.dimata.posbo.db.*;
import com.dimata.posbo.entity.search.*;
import com.dimata.posbo.entity.warehouse.*;
import com.dimata.posbo.entity.purchasing.PstPurchaseOrderItem;
import com.dimata.common.entity.contact.*;
import com.dimata.common.entity.payment.PstStandartRate;
import com.dimata.common.entity.payment.PstCurrencyType;
import com.dimata.posbo.entity.masterdata.*;
import com.dimata.posbo.entity.warehouse.PstMatCostingItem;
import com.dimata.pos.entity.billing.PstBillDetail;
import com.dimata.common.entity.location.PstLocation;
import com.dimata.common.entity.payment.CurrencyType;
import com.dimata.common.entity.payment.PstDiscountType;

//adding priceType
import com.dimata.common.entity.payment.PriceType;
import com.dimata.common.entity.payment.PstPriceType;
import com.dimata.common.entity.payment.StandartRate;
import com.dimata.common.entity.periode.Periode;
import com.dimata.common.entity.periode.PstPeriode;
import com.dimata.common.entity.system.AppValue;
import com.dimata.common.entity.system.PstSystemProperty;

/* project package */
public class SessMaterial {

    public static final String SESS_SRC_MATERIAL = "SESSION_SRC_MATERIAL";
    public static final String SESS_SRC_MATERIAL_EDIT_ALL = "SESS_SRC_MATERIAL_EDIT_ALL";
    public static final String SESS_SRC_PRINT_BARCODE = "SESS_SRC_PRINT_BARCODE";

    public static Vector searchMaterial(SrcMaterial srcmaterial, int start, int recordToGet) {
        return searchMaterial(srcmaterial, start, recordToGet, "");
    }

    public static Vector searchMaterial(SrcMaterial srcmaterial, int start, int recordToGet, String whereAdd) {
        String strCode = srcmaterial.getMatcode();
        Vector vectMaterialCode = new Vector(1, 1);
        if (!strCode.equals("")) {
            vectMaterialCode.add(strCode);
        }

        /*Vector vectMaterialCode = LogicParser.textSentence(strCode); // srcmaterial.getMatcode()
         for (int i = 0; i < vectMaterialCode.size(); i++) {
         String code = (String) vectMaterialCode.get(i);
         if ((code.equals(LogicParser.SIGN)) || (code.equals(LogicParser.ENGLISH[0])))
         vectMaterialCode.remove(i);
         }*/
        String strName = srcmaterial.getMatname();
        Vector vectMaterialName = new Vector(1, 1);
        if (!strName.equals("")) {
            vectMaterialName.add(strName);
        }
        /*Vector vectMaterialName = LogicParser.textSentence(strName);
         for (int i = 0; i < vectMaterialName.size(); i++) {
         String name = (String) vectMaterialName.get(i);
         if ((name.equals(LogicParser.SIGN)) || (name.equals(LogicParser.ENGLISH[0])))
         vectMaterialName.remove(i);
         }*/
        return getListMaterial(vectMaterialCode, vectMaterialName, srcmaterial, start, recordToGet, whereAdd);
    }

    public static int getCountSearchPrice(SrcMaterial srcmaterial, String whereAdd) {
        String strCode = srcmaterial.getMatcode();
        Vector vectMaterialCode = new Vector(1, 1);
        vectMaterialCode.add(strCode);

        String strName = srcmaterial.getMatname();
        Vector vectMaterialName = new Vector();
        vectMaterialName.add(strName);
        /*Vector vectMaterialCode = LogicParser.textSentence(strCode);
         for (int i = 0; i < vectMaterialCode.size(); i++) {
         String code = (String) vectMaterialCode.get(i);
         if ((code.equals(LogicParser.SIGN)) || (code.equals(LogicParser.ENGLISH[0])))
         vectMaterialCode.remove(i);
         }
         
         String strName = srcmaterial.getMatname();
         Vector vectMaterialName = LogicParser.textSentence(strName);
         for (int i = 0; i < vectMaterialName.size(); i++) {
         String name = (String) vectMaterialName.get(i);
         if ((name.equals(LogicParser.SIGN)) || (name.equals(LogicParser.ENGLISH[0])))
         vectMaterialName.remove(i);
         } */

        return getCountListMaterialPrice(vectMaterialCode, vectMaterialName, srcmaterial, whereAdd);
    }

    public static int getCountListMaterialPrice(Vector vtMaterialCode, Vector vtMaterialName, SrcMaterial srcmaterial, String whereAdd) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT COUNT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " ) AS CNT FROM (" + PstMaterial.TBL_MATERIAL
                    + " MAT LEFT JOIN " + PstCategory.TBL_CATEGORY
                    + " CAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + ")";
            /*" INNER JOIN " + PstSubCategory.TBL_SUB_CATEGORY +
             " SCAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
             " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID];*/

            //            if(srcmaterial.getMerkId()!=0){
            sql = sql + " LEFT JOIN " + PstMerk.TBL_MAT_MERK + " AS MERK "
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
                    + " = MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID];
            //            }

            if (srcmaterial.getDesignMat() == 1) {//integrasi dengan hanoman
                if (srcmaterial.getSellLocation().size() > 0) {
                    sql = sql + " LEFT JOIN " + PstMatMappLocation.TBL_POS_MAT_LOCATION + " AS PL "
                            + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                            + " = PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_MATERIAL_ID];
                }
            }

            String strMaterialCode = "";
            if (srcmaterial.getJenisCode() == 0) {
                if (vtMaterialCode != null && vtMaterialCode.size() > 0) {
                    for (int a = 0; a < vtMaterialCode.size(); a++) {
                        if (strMaterialCode.length() == 0) {
                            strMaterialCode = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        } else {
                            strMaterialCode = strMaterialCode + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR " + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        }
                    }
                    strMaterialCode = "( " + strMaterialCode + " )";
                }
            } else {
                if (srcmaterial.getMatcode().length() > 0) {
                    strMaterialCode = " SUBSTRING(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",3,3) = '" + srcmaterial.getMatcode() + "'";
                }
                if (srcmaterial.getCodeShip().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcmaterial.getCodeShip() + "'";
                    } else {
                        strMaterialCode = " LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcmaterial.getCodeShip() + "'";
                    }
                }
                if (srcmaterial.getCodeCounter().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcmaterial.getCodeCounter().length() + ") = '" + srcmaterial.getCodeCounter() + "'";
                    } else {
                        strMaterialCode = " RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcmaterial.getCodeCounter().length() + ") = '" + srcmaterial.getCodeCounter() + "'";
                    }
                }

                if (strMaterialCode.length() > 0) {
                    strMaterialCode = "(" + strMaterialCode + ")";
                }
            }

            String strMaterialName = "";
            if (vtMaterialName != null && vtMaterialName.size() > 0) {
                for (int a = 0; a < vtMaterialName.size(); a++) {
                    if (strMaterialName.length() == 0) {
                        strMaterialName = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    } else {
                        strMaterialName = strMaterialName + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    }
                }
                strMaterialName = "( " + strMaterialName + " )";
            }

            String strMerk = "";
            if (srcmaterial.getMerkId() != -1) {
                strMerk = " MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
                        + " = " + srcmaterial.getMerkId();
            }

            //update opie-eyek 20131218 show yg menggunakan serial number saja
            String showSerialNumber = "";
            if (srcmaterial.getUseSerialNumber() == 1) {
                showSerialNumber = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_REQUIRED_SERIAL_NUMBER]
                        + " = '1'";
            }

            String sellLocation = "";
            if (srcmaterial.getDesignMat() == 1) {//integrasi dengan hanoman
                if (srcmaterial.getSellLocation().size() > 0 && srcmaterial.getSellLocation() != null) {
                    for (int a = 0; a < srcmaterial.getSellLocation().size(); a++) {
                        if (sellLocation.length() == 0) {
                            sellLocation = "(PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_LOCATION_ID] + " = '" + srcmaterial.getSellLocation().get(a) + "')";
                        } else {
                            sellLocation = sellLocation + " OR (PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_LOCATION_ID] + " = '" + srcmaterial.getSellLocation().get(a) + "')";
                        }
                    }
                    sellLocation = "( " + sellLocation + " )";
                }
            }

//            String strGroup = "";
//            if (srcmaterial.getCategoryId() != -1) {
//                strGroup = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID] +
//                        " = " + srcmaterial.getCategoryId();
//            }
            String strGroup = "";
            if (srcmaterial.getCategoryId() > 0) {
                //buatkan seperti
                strGroup = " ( MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                        + " = " + srcmaterial.getCategoryId();

                String where = PstCategory.fieldNames[PstCategory.FLD_CAT_PARENT_ID] + "='" + srcmaterial.getCategoryId() + "' OR "
                        + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + "='" + srcmaterial.getCategoryId() + "'";

                Vector masterCatAcak = PstCategory.list(0, 0, where, PstCategory.fieldNames[PstCategory.FLD_CAT_PARENT_ID]);

                if (masterCatAcak.size() > 1) {
                    //Vector materGroup = PstCategory.structureList(masterCatAcak) ;
                    //Vector<Long> levelParent = new Vector<Long>();
                    for (int i = 0; i < masterCatAcak.size(); i++) {
                        Category mGroup = (Category) masterCatAcak.get(i);
                        strGroup = strGroup + " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                                + " = " + mGroup.getOID();
                    }
                }

                strGroup = strGroup + ")";

            }

            String strSubCategory = "";
            if (srcmaterial.getSubCategoryId() != 0) {
                strSubCategory = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID]
                        + " = " + srcmaterial.getSubCategoryId();
            }

            String strItemType = "";
            if (srcmaterial.getTypeItem() != -1) {
                if (srcmaterial.getTypeItem() == 0) {//not for gift
                    //                    strItemType = " MAT."+PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT] +
                    //                    " = 0 ";
                } else {// for gift
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT]
                            + " > 0 ";
                }
            }

            String strCodeRange = "";
            if (srcmaterial.getOidCodeRange() != 0) {
                try {
                    CodeRange codeRange = PstCodeRange.fetchExc(srcmaterial.getOidCodeRange());
                    strCodeRange = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                            + " BETWEEN '" + codeRange.getFromRangeCode() + "' AND '" + codeRange.getToRangeCode() + "'";
                } catch (Exception e) {
                }
            }

            //group Item
            String strGroupTypeItem = "";
            if (srcmaterial.getGroupItem() != -1) {
                if (srcmaterial.getGroupItem() == PstMaterial.MATERIAL_TYPE_REGULAR) { // for material
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_REGULAR;
                } else if (srcmaterial.getGroupItem() == PstMaterial.MAT_TYPE_COMPOSITE) {// for composite
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_COMPOSITE;
                } else if (srcmaterial.getGroupItem() == PstMaterial.MAT_TYPE_SERVICE) {// for service
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_SERVICE;
                }
            }

            String statusMaterial = "";
            if (srcmaterial.getStatusMaterial() == 4) {
                statusMaterial = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_EDIT_MATERIAL]
                        + " = '" + PstMaterial.EDIT_NON_AKTIVE + "'";
            }

            if (srcmaterial.getStatusMaterial() == 0) {
                statusMaterial = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_EDIT_MATERIAL]
                        + " != '" + PstMaterial.EDIT_NON_AKTIVE + "'";
            }

            String whereClause = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_PROCESS_STATUS] + " != " + PstMaterial.DELETE;

            if (strMaterialCode.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialCode;
                } else {
                    whereClause = whereClause + " AND " + strMaterialCode;
                }
            }

            if (strMaterialName.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialName;
                } else {
                    whereClause = whereClause + " AND " + strMaterialName;
                }
            }

            //update opie-eyek 20131218 show yg menggunakan serial number saja
            if (showSerialNumber.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + showSerialNumber;
                } else {
                    whereClause = whereClause + " AND " + showSerialNumber;
                }
            }

            if (strMerk.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMerk;
                } else {
                    whereClause = whereClause + " AND " + strMerk;
                }
            }

            if (strGroup.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroup;
                } else {
                    whereClause = whereClause + " AND " + strGroup;
                }
            }

            if (strSubCategory.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSubCategory;
                } else {
                    whereClause = whereClause + " AND " + strSubCategory;
                }
            }

            if (strItemType.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strItemType;
                } else {
                    whereClause = whereClause + " AND " + strItemType;
                }
            }

            if (strCodeRange.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strCodeRange;
                } else {
                    whereClause = whereClause + " AND " + strCodeRange;
                }
            }

            if (sellLocation.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + sellLocation;
                } else {
                    whereClause = whereClause + " AND " + sellLocation;
                }
            }

            if (strGroupTypeItem.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroupTypeItem;
                } else {
                    whereClause = whereClause + " AND " + strGroupTypeItem;
                }
            }

            //update opie-eyek 20140415 untuk status barang aktive dan non aktive
            if (statusMaterial.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + statusMaterial;
                } else {
                    whereClause = whereClause + " AND " + statusMaterial;
                }
            }

            String strfromDate = Formater.formatDate(srcmaterial.getDateFrom(), "yyyy-MM-dd 00:00:00");
            String strtoDate = Formater.formatDate(srcmaterial.getDateTo(), "yyyy-MM-dd 23:59:59");
            if (srcmaterial.getShowUpdateCatalog() == 1) {
                // whereClause = whereClause;
                //}
                if (whereClause.length() == 0) {
                    //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                } else {
                    //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                }
            } else {
                whereClause = whereClause;
            }
            //if (srcmaterial.getShowUpdateCatalog()== 1) {
            //get name material > 2
            if (whereClause.length() == 0) {
                //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            } else {
                //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " AND LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            }
            // }

            //added by dewok 2018-01-17
            if (whereAdd.length() > 0) {
                whereClause += whereAdd;
            }

            if (whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Count get list material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static Vector searchPrice(SrcMaterial srcmaterial, int start, int recordToGet) {
        return searchPrice(srcmaterial, start, recordToGet, "");
    }

    // add by fitra 28-02-2014
    public static Vector searchPrice(SrcMaterial srcmaterial, int start, int recordToGet, String whereAdd) {
        String strCode = srcmaterial.getMatcode();
        Vector vectMaterialCode = new Vector(1, 1);
        vectMaterialCode.add(strCode);

        /*Vector vectMaterialCode = LogicParser.textSentence(strCode); // srcmaterial.getMatcode()
         for (int i = 0; i < vectMaterialCode.size(); i++) {
         String code = (String) vectMaterialCode.get(i);
         if ((code.equals(LogicParser.SIGN)) || (code.equals(LogicParser.ENGLISH[0])))
         vectMaterialCode.remove(i);
         }*/
        String strName = srcmaterial.getMatname();
        Vector vectMaterialName = LogicParser.textSentence(strName);
        for (int i = 0; i < vectMaterialName.size(); i++) {
            String name = (String) vectMaterialName.get(i);
            if ((name.equals(LogicParser.SIGN)) || (name.equals(LogicParser.ENGLISH[0]))) {
                vectMaterialName.remove(i);
            }
        }

        return getListPrice(vectMaterialCode, vectMaterialName, srcmaterial, start, recordToGet, whereAdd);
    }

    public static Vector getListPrice(Vector vtMaterialCode, Vector vtMaterialName, SrcMaterial srcmaterial, int start, int recordToGet) {
        return getListPrice(vtMaterialCode, vtMaterialName, srcmaterial, start, recordToGet, "");
    }

    public static Vector getListPrice(Vector vtMaterialCode, Vector vtMaterialName, SrcMaterial srcmaterial, int start, int recordToGet, String whereAdd) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1, 1);
        try {
            String sql = "SELECT MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_SUPPLIER_TYPE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_PRICE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_COST]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CODE]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CODE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_STOCK_UNIT_ID]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_GONDOLA_CODE];

            //if(srcmaterial.getMerkId()!=0){
            sql = sql + " ,MERK." + PstMerk.fieldNames[PstMerk.FLD_NAME] + " AS MERKNM ";
            //}

            if (srcmaterial.getLocationId() != 0) {
                sql = sql + " ,MC." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_QTY] + " AS QTY_REAL ";
            }

            sql = sql + " FROM " + PstMaterial.TBL_MATERIAL
                    + " MAT LEFT JOIN " + PstCategory.TBL_CATEGORY
                    + " CAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + "";
            /*" INNER JOIN " + PstSubCategory.TBL_SUB_CATEGORY +
             " SCAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
             " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID] +
             " ) ";*/

            //if(srcmaterial.getMerkId()!=0){
            sql = sql + " LEFT JOIN " + PstMerk.TBL_MAT_MERK + " AS MERK "
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
                    + " = MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID];
            //}

            if (srcmaterial.getDesignMat() == 1) {//integrasi dengan hanoman
                if (srcmaterial.getSellLocation().size() > 0) {
                    sql = sql + " LEFT JOIN " + PstMatMappLocation.TBL_POS_MAT_LOCATION + " AS PL "
                            + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                            + " = PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_MATERIAL_ID];
                }
            }

            if (srcmaterial.getSupplierId() != -1) {
                sql = sql + " INNER JOIN " + PstMatVendorPrice.TBL_MATERIAL_VENDOR_PRICE + " VDR "
                        + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID]
                        + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                        + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " CNT"
                        + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + " = CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            }

            String strStockReal = "";
            if (srcmaterial.getLocationId() != 0) {
                sql = sql + " LEFT JOIN " + PstMaterialStock.TBL_MATERIAL_STOCK + " AS MC "
                        + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                        + " = MC." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_MATERIAL_UNIT_ID];

                Periode maPeriode = PstPeriode.getPeriodeRunning();
                strStockReal = "MC." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_PERIODE_ID] + "=" + maPeriode.getOID() + " AND MC." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_LOCATION_ID] + "=" + srcmaterial.getLocationId();
            }

            String strMaterialCode = "";
            if (srcmaterial.getJenisCode() == 0) {
                if (vtMaterialCode != null && vtMaterialCode.size() > 0) {
                    for (int a = 0; a < vtMaterialCode.size(); a++) {
                        if (strMaterialCode.length() == 0) {
                            strMaterialCode = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        } else {
                            strMaterialCode = strMaterialCode + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR " + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        }
                    }
                    strMaterialCode = "( " + strMaterialCode + " )";
                }
            } else {
                if (srcmaterial.getMatcode().length() > 0) {
                    strMaterialCode = " SUBSTRING(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",3,3) = '" + srcmaterial.getMatcode() + "'";
                }
                if (srcmaterial.getCodeShip().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcmaterial.getCodeShip() + "'";
                    } else {
                        strMaterialCode = " LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcmaterial.getCodeShip() + "'";
                    }
                }
                if (srcmaterial.getCodeCounter().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcmaterial.getCodeCounter().length() + ") = '" + srcmaterial.getCodeCounter() + "'";
                    } else {
                        strMaterialCode = " RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcmaterial.getCodeCounter().length() + ") = '" + srcmaterial.getCodeCounter() + "'";
                    }
                }

                if (strMaterialCode.length() > 0) {
                    strMaterialCode = "(" + strMaterialCode + ")";
                }
            }

            String strMaterialName = "";
            if (vtMaterialName != null && vtMaterialName.size() > 0) {
                for (int a = 0; a < vtMaterialName.size(); a++) {
                    if (strMaterialName.length() == 0) {
                        strMaterialName = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    } else {
                        strMaterialName = strMaterialName + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    }
                }
                strMaterialName = "( " + strMaterialName + " )";
            }

            String strSupplier = "";
            if (srcmaterial.getSupplierId() > 0) {
                strSupplier = " VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + " = " + srcmaterial.getSupplierId();
            }

            String strSubCategory = "";
            if (srcmaterial.getSubCategoryId() > 0) {
                strSubCategory = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID]
                        + " = " + srcmaterial.getSubCategoryId();
            }

            String strGondola = "";
            if (srcmaterial.getGondolaId() > 0) {
                strGondola = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_GONDOLA_CODE]
                        + " = " + srcmaterial.getGondolaId();
            }

            String sellLocation = "";
            if (srcmaterial.getDesignMat() == 1) {//integrasi dengan hanoman
                if (srcmaterial.getSellLocation().size() > 0 && srcmaterial.getSellLocation() != null) {
                    for (int a = 0; a < srcmaterial.getSellLocation().size(); a++) {
                        if (sellLocation.length() == 0) {
                            sellLocation = "(PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_LOCATION_ID] + " = '" + srcmaterial.getSellLocation().get(a) + "')";
                        } else {
                            sellLocation = sellLocation + " OR (PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_LOCATION_ID] + " = '" + srcmaterial.getSellLocation().get(a) + "')";
                        }
                    }
                    sellLocation = "( " + sellLocation + " )";
                }
            }

            //update opie-eyek 20131218 show yg menggunakan serial number saja
            String showSerialNumber = "";

            String strMerk = "";
            if (srcmaterial.getMerkId() > 0) {
                strMerk = " MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
                        + " = " + srcmaterial.getMerkId();
            }

            String strGroup = "";
            if (srcmaterial.getCategoryId() > 0) {
                //buatkan seperti
                strGroup = " ( MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                        + " = " + srcmaterial.getCategoryId();

                String where = PstCategory.fieldNames[PstCategory.FLD_CAT_PARENT_ID] + "='" + srcmaterial.getCategoryId() + "' OR "
                        + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + "='" + srcmaterial.getCategoryId() + "'";
                Vector masterCatAcak = PstCategory.list(0, 0, where, PstCategory.fieldNames[PstCategory.FLD_CAT_PARENT_ID]);

                if (masterCatAcak.size() > 1) {
                    //Vector materGroup = PstCategory.list(masterCatAcak) ;
                    Vector<Long> levelParent = new Vector<Long>();
                    for (int i = 0; i < masterCatAcak.size(); i++) {
                        Category mGroup = (Category) masterCatAcak.get(i);
                        strGroup = strGroup + " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                                + " = " + mGroup.getOID();
                    }
                }

                strGroup = strGroup + ")";

            }

            String strItemType = "";
            if (srcmaterial.getTypeItem() != -1) {
                if (srcmaterial.getTypeItem() == 0) {//not for gift
                    //strItemType = " MAT."+PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT] +
                    //    " = 0 ";
                } else {// for gift
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT]
                            + " > 0 ";
                }
            }

            String strCodeRange = "";
            if (srcmaterial.getOidCodeRange() != 0) {
                try {
                    CodeRange codeRange = PstCodeRange.fetchExc(srcmaterial.getOidCodeRange());
                    strCodeRange = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                            + " BETWEEN '" + codeRange.getFromRangeCode() + "' AND '" + codeRange.getToRangeCode() + "'";
                } catch (Exception e) {
                }
            }

            //group Item
            String strGroupTypeItem = "";
            if (srcmaterial.getGroupItem() != -1) {
                if (srcmaterial.getGroupItem() == PstMaterial.MATERIAL_TYPE_REGULAR) { // for material
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_REGULAR;
                } else if (srcmaterial.getGroupItem() == PstMaterial.MAT_TYPE_COMPOSITE) {// for composite
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_COMPOSITE;
                } else if (srcmaterial.getGroupItem() == PstMaterial.MAT_TYPE_SERVICE) {// for service
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_SERVICE;
                }
            }

            String whereClause = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_PROCESS_STATUS] + " != " + PstMaterial.DELETE;

            if (strMaterialCode.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialCode;
                } else {
                    whereClause = whereClause + " AND " + strMaterialCode;
                }
            }

            if (strMaterialName.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialName;
                } else {
                    whereClause = whereClause + " AND " + strMaterialName;
                }
            }

            if (strSupplier.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSupplier;
                } else {
                    whereClause = whereClause + " AND " + strSupplier;
                }
            }

            if (strMerk.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMerk;
                } else {
                    whereClause = whereClause + " AND " + strMerk;
                }
            }
            //update opie-eyek 20131218 show yg menggunakan serial number saja
            if (showSerialNumber.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + showSerialNumber;
                } else {
                    whereClause = whereClause + " AND " + showSerialNumber;
                }
            }

            if (strGroup.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroup;
                } else {
                    whereClause = whereClause + " AND " + strGroup;
                }
            }

            if (strSubCategory.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSubCategory;
                } else {
                    whereClause = whereClause + " AND " + strSubCategory;
                }
            }

            if (strGondola.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGondola;
                } else {
                    whereClause = whereClause + " AND " + strGondola;
                }
            }

            if (strItemType.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strItemType;
                } else {
                    whereClause = whereClause + " AND " + strItemType;
                }
            }

            if (strCodeRange.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strCodeRange;
                } else {
                    whereClause = whereClause + " AND " + strCodeRange;
                }
            }

            if (sellLocation.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + sellLocation;
                } else {
                    whereClause = whereClause + " AND " + sellLocation;
                }
            }

            if (strGroupTypeItem.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroupTypeItem;
                } else {
                    whereClause = whereClause + " AND " + strGroupTypeItem;
                }
            }

            if (strStockReal.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strStockReal;
                } else {
                    whereClause = whereClause + " AND " + strStockReal;
                }
            }

            //query update harga jual pada katalog
            String strfromDate = Formater.formatDate(srcmaterial.getDateFrom(), "yyyy-MM-dd 00:00:00");
            String strtoDate = Formater.formatDate(srcmaterial.getDateTo(), "yyyy-MM-dd 23:59:59");
            if (srcmaterial.getShowUpdateCatalog() == 1) {
                // whereClause = whereClause;
                //}
                if (whereClause.length() == 0) {
                    //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                } else {
                    //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                }
            } else {
                whereClause = whereClause;
            }
            //if (srcmaterial.getShowUpdateCatalog()== 1) {
            //get name material > 2
            if (whereClause.length() == 0) {
                //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            } else {
                //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " AND LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            }
            //}

            String statusMaterial = "";
            if (srcmaterial.getStatusMaterial() == 4) {
                statusMaterial = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_EDIT_MATERIAL]
                        + " = '" + PstMaterial.EDIT_NON_AKTIVE + "'";
            }

            if (srcmaterial.getStatusMaterial() == 0) {
                statusMaterial = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_EDIT_MATERIAL]
                        + " != '" + PstMaterial.EDIT_NON_AKTIVE + "'";
            }

            //update opie-eyek 20140415 untuk status barang aktive dan non aktive
            if (statusMaterial.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + statusMaterial;
                } else {
                    whereClause = whereClause + " AND " + statusMaterial;
                }
            }

            //added by dewok 2018-01-17
            if (whereAdd.length() > 0) {
                whereClause += whereAdd;
            }

            if (whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            String separator = PstSystemProperty.getValueByName("SEPARATOR_SKU");
            switch (srcmaterial.getSortby()) {
                case 0:
                    //added by dewok 2018 for litama
                    int cekTypeOfBusinessDetail = Integer.parseInt(AppValue.getValueByKey("TYPE_OF_BUSINESS_DETAIL"));
                    if (cekTypeOfBusinessDetail == 2) {
                        sql = sql + " ORDER BY RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",7) ASC";
                    } else {
                        //update opie-eyek 20130731
                        if (separator.equals("")) {
                            sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU];
                        } else {
                            // ORDER BY CONVERT((LEFT(sku,LOCATE('.',sku)-1)),SIGNED INTEGER),CONVERT((SUBSTRING(sku,LOCATE('.',sku)+1)),SIGNED INTEGER);
                            sql = sql + " ORDER BY CONVERT((LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",LOCATE('" + separator + "',MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ")-1)),SIGNED INTEGER),CONVERT((SUBSTRING(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",LOCATE('" + separator + "',MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ")+1)),SIGNED INTEGER)";
                        }
                    }

                    break;
                case 1:
                    sql = sql + " ORDER BY CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME];
                    break;
                case 2:
                    sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME];
                    break;
                case 3:
                    sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " ASC ";
                    break;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (start == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + start + "," + recordToGet;
                    }
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (start == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + start;
                    }
                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    ;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                Material material = new Material();
                Category category = new Category();
                SubCategory subCategory = new SubCategory();
                ContactList cnt = new ContactList();

                material.setOID(rs.getLong(1));
                material.setSku(rs.getString(2));
                material.setBarCode(rs.getString(3));
                material.setName(rs.getString(4));
                material.setDefaultSupplierType(rs.getInt(5));
                material.setDefaultPrice(rs.getDouble(6));
                material.setDefaultCost(rs.getDouble(7));
                material.setCategoryId(rs.getLong(PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]));
                material.setMerkId(rs.getLong(PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]));
                material.setDefaultStockUnitId(rs.getLong(PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_STOCK_UNIT_ID]));
                material.setSubCategoryId(rs.getLong(PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID]));
                material.setGondolaCode(rs.getLong(PstMaterial.fieldNames[PstMaterial.FLD_GONDOLA_CODE]));
                temp.add(material);

                category.setName(rs.getString(8));
                category.setCode(rs.getString(9));
                temp.add(category);

                //subCategory.setName(rs.getString(10));
                //subCategory.setCode(rs.getString(11));
                temp.add(subCategory);

                Merk merk = new Merk();
                merk.setName(rs.getString("MERKNM"));
                temp.add(merk);

                MaterialStock materialStock = new MaterialStock();
                materialStock.setQty(rs.getDouble("QTY_REAL"));
                temp.add(materialStock);

                result.add(temp);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Err get list opname material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    //adding search for reposting stok
    // by mirahu 20120731
    public static Vector searchMaterialRepostingStock(SrcMaterialRepostingStock srcMaterialRepostingStock, int start, int recordToGet) {
        String strCode = srcMaterialRepostingStock.getMatcode();
        Vector vectMaterialCode = new Vector(1, 1);
        vectMaterialCode.add(strCode);

        /*Vector vectMaterialCode = LogicParser.textSentence(strCode); // srcmaterial.getMatcode()
         for (int i = 0; i < vectMaterialCode.size(); i++) {
         String code = (String) vectMaterialCode.get(i);
         if ((code.equals(LogicParser.SIGN)) || (code.equals(LogicParser.ENGLISH[0])))
         vectMaterialCode.remove(i);
         }*/
        String strName = srcMaterialRepostingStock.getMatname();
        Vector vectMaterialName = new Vector(1, 1);
        vectMaterialName.add(strName);

        /*Vector vectMaterialName = LogicParser.textSentence(strName);
         for (int i = 0; i < vectMaterialName.size(); i++) {
         String name = (String) vectMaterialName.get(i);
         if ((name.equals(LogicParser.SIGN)) || (name.equals(LogicParser.ENGLISH[0])))
         vectMaterialName.remove(i);
         }*/
        return getListMaterialRepostingStock(vectMaterialCode, vectMaterialName, srcMaterialRepostingStock, start, recordToGet);
    }

    //adding search price tag 
    //by mirahu 20120420
    //add update opie-eyek 20130805
    public static Vector searchMaterialPriceTag(SrcMaterial srcmaterial, int start, int recordToGet, long oidPriceType) {
        String strCode = srcmaterial.getMatcode();
        Vector vectMaterialCode = new Vector(1, 1);
        vectMaterialCode.add(strCode);

        /*Vector vectMaterialCode = LogicParser.textSentence(strCode); // srcmaterial.getMatcode()
         for (int i = 0; i < vectMaterialCode.size(); i++) {
         String code = (String) vectMaterialCode.get(i);
         if ((code.equals(LogicParser.SIGN)) || (code.equals(LogicParser.ENGLISH[0])))
         vectMaterialCode.remove(i);
         }*/
        String strName = srcmaterial.getMatname();
        Vector vectMaterialName = new Vector(1, 1);
        vectMaterialName.add(strName);

        /*Vector vectMaterialName = LogicParser.textSentence(strName);
         for (int i = 0; i < vectMaterialName.size(); i++) {
         String name = (String) vectMaterialName.get(i);
         if ((name.equals(LogicParser.SIGN)) || (name.equals(LogicParser.ENGLISH[0])))
         vectMaterialName.remove(i);
         }*/
        return getListMaterialPriceTag(vectMaterialCode, vectMaterialName, srcmaterial, start, recordToGet, oidPriceType);
    }

    public static Vector getListMaterial(Vector vtMaterialCode, Vector vtMaterialName, SrcMaterial srcmaterial, int start, int recordToGet) {
        return getListMaterial(vtMaterialCode, vtMaterialName, srcmaterial, start, recordToGet, "");
    }

    public static Vector getListMaterial(Vector vtMaterialCode, Vector vtMaterialName,
            SrcMaterial srcmaterial, int start, int recordToGet, String whereAdd) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1, 1);

        String useForRaditya = PstSystemProperty.getValueByName("USE_FOR_RADITYA");
        long standardRate = 0;
        if (srcmaterial.getViewHppvsPrice() == 2) {
            Vector listCurrStandard = PstStandartRate.listCurrStandard(1);
            for (int i = 0; i < listCurrStandard.size(); i++) {
                Vector temp = (Vector) listCurrStandard.get(i);
                CurrencyType currencyType = (CurrencyType) temp.get(0);
                StandartRate sRate = (StandartRate) temp.get(1);
                standardRate = sRate.getOID();
            }
        }

        try {
            String sql = "SELECT MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_SUPPLIER_TYPE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_PRICE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_COST]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_AVERAGE_PRICE]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CODE]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_KENAIKAN_HARGA]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CODE];
            if (useForRaditya.equals("0")) {
                if (srcmaterial.getSupplierId() != -1) {
                    sql = sql + " ,CNT." + PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]
                            + " ,CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE];
                }
            }
            //if(srcmaterial.getMerkId()!=0){
            sql = sql + " ,MERK." + PstMerk.fieldNames[PstMerk.FLD_NAME] + " AS MERKNM ";
            sql = sql + " ,SUBC." + PstSubCategory.fieldNames[PstSubCategory.FLD_NAME] + " AS SUBCNM ";
            sql = sql + " ,UNIT." + PstUnit.fieldNames[PstUnit.FLD_CODE] + " AS UNITSTOCK ";
            sql = sql + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + " AS CATOID ";
            sql = sql + " ,KSG." + PstKsg.fieldNames[PstKsg.FLD_NAME] + " AS GONDOLA ";
            sql = sql + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID] + " AS MATCATEGORY ";
            sql = sql + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_COLOR_ID] + " AS MATCOLOR ";
            //}
            sql = sql + " FROM " + PstMaterial.TBL_MATERIAL
                    + " MAT LEFT JOIN " + PstCategory.TBL_CATEGORY
                    + " CAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + "";
            /*" INNER JOIN " + PstSubCategory.TBL_SUB_CATEGORY +
             " SCAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
             " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID] +
             " ) ";*/
                if (useForRaditya.equals("0")) {
                    if (srcmaterial.getSupplierId() != -1) {
                        sql = sql + " INNER JOIN " + PstMatVendorPrice.TBL_MATERIAL_VENDOR_PRICE + " VDR "
                                + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID]
                                + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                                + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " CNT"
                                + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                                + " = CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
                    }
                }

                //inner join dengan pos_price_type_mapping
                if (srcmaterial.getViewHppvsPrice() == 2) {
                    sql = sql + " INNER JOIN pos_price_type_mapping AS ppt "
                            + " ON ppt.MATERIAL_ID=MAT.MATERIAL_ID ";
                }

                //if(srcmaterial.getMerkId()!=0){
                sql = sql + " LEFT JOIN " + PstMerk.TBL_MAT_MERK + " AS MERK "
                        + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
                        + " = MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID];
                //}
                sql = sql + " LEFT JOIN " + PstSubCategory.TBL_SUB_CATEGORY + " AS SUBC "
                        + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID]
                        + " = SUBC." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID];

                sql = sql + " LEFT JOIN " + PstUnit.TBL_P2_UNIT + " AS UNIT "
                        + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_STOCK_UNIT_ID]
                        + " = UNIT." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID];

                sql = sql + " LEFT JOIN " + PstKsg.TBL_MAT_KSG + " AS KSG "
                        + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_GONDOLA_CODE]
                        + " = KSG." + PstKsg.fieldNames[PstKsg.FLD_KSG_ID];

                if (srcmaterial.getDesignMat() == 1) {//integrasi dengan hanoman
                    if (srcmaterial.getSellLocation().size() > 0) {
                        sql = sql + " LEFT JOIN " + PstMatMappLocation.TBL_POS_MAT_LOCATION + " AS PL "
                                + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                                + " = PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_MATERIAL_ID];
                    }
                }

                String strMaterialCode = "";
                if (srcmaterial.getJenisCode() == 0) {
                    if (vtMaterialCode != null && vtMaterialCode.size() > 0) {
                        for (int a = 0; a < vtMaterialCode.size(); a++) {
                            if (strMaterialCode.length() == 0) {
                                strMaterialCode = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                                strMaterialCode += " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                            } else {
                                strMaterialCode = strMaterialCode + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                                strMaterialCode += " OR " + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                            }
                        }
                        strMaterialCode = "( " + strMaterialCode + " )";
                    }
                } else {
                    if (srcmaterial.getMatcode().length() > 0) {
                        strMaterialCode = " SUBSTRING(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",3,3) = '" + srcmaterial.getMatcode() + "'";
                    }
                    if (srcmaterial.getCodeShip().length() > 0) {
                        if (strMaterialCode.length() > 0) {
                            strMaterialCode = strMaterialCode + " AND LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcmaterial.getCodeShip() + "'";
                        } else {
                            strMaterialCode = " LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcmaterial.getCodeShip() + "'";
                        }
                    }
                    if (srcmaterial.getCodeCounter().length() > 0) {
                        if (strMaterialCode.length() > 0) {
                            strMaterialCode = strMaterialCode + " AND RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcmaterial.getCodeCounter().length() + ") = '" + srcmaterial.getCodeCounter() + "'";
                        } else {
                            strMaterialCode = " RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcmaterial.getCodeCounter().length() + ") = '" + srcmaterial.getCodeCounter() + "'";
                        }
                    }

                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = "(" + strMaterialCode + ")";
                    }
                }

                String strMaterialName = "";
                if (vtMaterialName != null && vtMaterialName.size() > 0) {
                    for (int a = 0; a < vtMaterialName.size(); a++) {
                        if (strMaterialName.length() == 0) {
                            strMaterialName = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                        } else {
                            strMaterialName = strMaterialName + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                        }
                    }
                    strMaterialName = "( " + strMaterialName + " )";
                }

                String sellLocation = "";
                if (srcmaterial.getDesignMat() == 1) {//integrasi dengan hanoman
                    if (srcmaterial.getSellLocation().size() > 0 && srcmaterial.getSellLocation() != null) {
                        for (int a = 0; a < srcmaterial.getSellLocation().size(); a++) {
                            if (sellLocation.length() == 0) {
                                sellLocation = "(PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_LOCATION_ID] + " = '" + srcmaterial.getSellLocation().get(a) + "')";
                            } else {
                                sellLocation = sellLocation + " OR (PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_LOCATION_ID] + " = '" + srcmaterial.getSellLocation().get(a) + "')";
                            }
                        }
                        sellLocation = "( " + sellLocation + " )";
                    }
                }

                String strSupplier = "";
                if (srcmaterial.getSupplierId() > 0) { 
                    strSupplier = " VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                            + " = " + srcmaterial.getSupplierId();
                }

                //update opie-eyek 20131218 show yg menggunakan serial number saja
                String showSerialNumber = "";
                if (srcmaterial.getUseSerialNumber() == 1) {
                    showSerialNumber = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_REQUIRED_SERIAL_NUMBER]
                            + " = '1'";
                }

                String strMerk = "";
                if (srcmaterial.getMerkId() > 0) {
                    strMerk = " MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
                            + " = " + srcmaterial.getMerkId();
                }

                String strGroup = "";
                if (srcmaterial.getCategoryId() > 0) {
                    //buatkan seperti
                    strGroup = " ( MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                            + " = " + srcmaterial.getCategoryId();

                    String where = "";
                    Vector masterCatAcak = PstCategory.list(0, 0, where, PstCategory.fieldNames[PstCategory.FLD_CAT_PARENT_ID]);
                    if (masterCatAcak.size() > 1) {
                        Vector materGroup = PstCategory.structureList(masterCatAcak, srcmaterial.getCategoryId());
                        for (int i = 0; i < materGroup.size(); i++) {
                            Category mGroup = (Category) materGroup.get(i);
                            strGroup = strGroup + " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                                    + " = " + mGroup.getOID();
                        }
                    }

                    strGroup = strGroup + ")";

                }

                String strSubCategory = "";
                if (srcmaterial.getSubCategoryId() != 0 && srcmaterial.getSubCategoryId() != -1) {
                    strSubCategory = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID]
                            + " = " + srcmaterial.getSubCategoryId();
                }

                String strItemType = "";
                if (srcmaterial.getTypeItem() != -1) {
                    if (srcmaterial.getTypeItem() == 0) {//not for gift
                        //strItemType = " MAT."+PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT] +
                        //    " = 0 ";
                    } else {// for gift
                        strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT]
                                + " > 0 ";
                    }
                }

                String strCodeRange = "";
                if (srcmaterial.getOidCodeRange() != 0) {
                    try {
                        CodeRange codeRange = PstCodeRange.fetchExc(srcmaterial.getOidCodeRange());
                        strCodeRange = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                                + " BETWEEN '" + codeRange.getFromRangeCode() + "' AND '" + codeRange.getToRangeCode() + "'";
                    } catch (Exception e) {
                    }
                }

                //group Item
                String strGroupTypeItem = "";
                if (srcmaterial.getGroupItem() != -1) {
                    if (srcmaterial.getGroupItem() == PstMaterial.MATERIAL_TYPE_REGULAR) { // for material
                        strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                                + " = " + PstMaterial.MAT_TYPE_REGULAR;
                    } else if (srcmaterial.getGroupItem() == PstMaterial.MAT_TYPE_COMPOSITE) {// for composite
                        strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                                + " = " + PstMaterial.MAT_TYPE_COMPOSITE;
                    } else if (srcmaterial.getGroupItem() == PstMaterial.MAT_TYPE_SERVICE) {// for service
                        strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                                + " = " + PstMaterial.MAT_TYPE_SERVICE;
                    }
                }

                //update opie-eyek 20160623
                String showgondola = "";
                if (srcmaterial.getGondolaId() != 0) {
                    showgondola = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_GONDOLA_CODE]
                            + " = '" + srcmaterial.getGondolaId() + "'";
                }

                //update opie-eyek 20140415 untuk status barang aktive dan non aktive
                String statusMaterial = "";
                if (srcmaterial.getStatusMaterial() == 4) {
                    statusMaterial = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_EDIT_MATERIAL]
                            + " = '" + PstMaterial.EDIT_NON_AKTIVE + "'";
                }

                if (srcmaterial.getStatusMaterial() == 0) {
                    statusMaterial = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_EDIT_MATERIAL]
                            + " != '" + PstMaterial.EDIT_NON_AKTIVE + "'";
                }

                String statusViewHppVsPrice = "";
                if (srcmaterial.getViewHppvsPrice() == 1) {
                    statusViewHppVsPrice = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_AVERAGE_PRICE]
                            + " = '0'";
                }

                //20161021
                String statusViewHppBesariDariPrice = "";
                if (srcmaterial.getViewHppvsPrice() == 2) {
                    statusViewHppBesariDariPrice = " ppt.PRICE_TYPE_ID='" + srcmaterial.getSelectPriceTypeId() + "' AND ppt.STANDART_RATE_ID='" + standardRate
                            + "' AND MAT.AVERAGE_PRICE > ppt.PRICE";
                }

                String whereClause = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_PROCESS_STATUS] + " != " + PstMaterial.DELETE;

                if (strMaterialCode.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + strMaterialCode;
                    } else {
                        whereClause = whereClause + " AND " + strMaterialCode;
                    }
                }

                if (strMaterialName.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + strMaterialName;
                    } else {
                        whereClause = whereClause + " AND " + strMaterialName;
                    }
                }

                if (sellLocation.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + sellLocation;
                    } else {
                        whereClause = whereClause + " AND " + sellLocation;
                    }
                }

                if (strSupplier.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + strSupplier;
                    } else {
                        whereClause = whereClause + " AND " + strSupplier;
                    }
                }

                if (strMerk.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + strMerk;
                    } else {
                        whereClause = whereClause + " AND " + strMerk;
                    }
                }
                //update opie-eyek 20131218 show yg menggunakan serial number saja
                if (showSerialNumber.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + showSerialNumber;
                    } else {
                        whereClause = whereClause + " AND " + showSerialNumber;
                    }
                }

                if (strGroup.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + strGroup;
                    } else {
                        whereClause = whereClause + " AND " + strGroup;
                    }
                }

                if (strSubCategory.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + strSubCategory;
                    } else {
                        whereClause = whereClause + " AND " + strSubCategory;
                    }
                }

                if (strItemType.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + strItemType;
                    } else {
                        whereClause = whereClause + " AND " + strItemType;
                    }
                }

                if (strCodeRange.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + strCodeRange;
                    } else {
                        whereClause = whereClause + " AND " + strCodeRange;
                    }
                }
                if (strGroupTypeItem.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + strGroupTypeItem;
                    } else {
                        whereClause = whereClause + " AND " + strGroupTypeItem;
                    }
                }

                //update opie-eyek 20140415 untuk status barang aktive dan non aktive
                if (statusMaterial.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + statusMaterial;
                    } else {
                        whereClause = whereClause + " AND " + statusMaterial;
                    }
                }

                //untuk hpp=0
                if (statusViewHppVsPrice.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + statusViewHppVsPrice;
                    } else {
                        whereClause = whereClause + " AND " + statusViewHppVsPrice;
                    }
                }

                //untuk hpp > price
                if (statusViewHppBesariDariPrice.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + statusViewHppBesariDariPrice;
                    } else {
                        whereClause = whereClause + " AND " + statusViewHppBesariDariPrice;
                    }
                }

                //showgondola update opie-eyek 20160623
                if (showgondola.length() > 0) {
                    if (whereClause.length() == 0) {
                        whereClause = whereClause + showgondola;
                    } else {
                        whereClause = whereClause + " AND " + showgondola;
                    }
                }
                //query update harga jual pada katalog
                String strfromDate = Formater.formatDate(srcmaterial.getDateFrom(), "yyyy-MM-dd 00:00:00");
                String strtoDate = Formater.formatDate(srcmaterial.getDateTo(), "yyyy-MM-dd 23:59:59");
                if (srcmaterial.getShowUpdateCatalog() == 1) {
                    // whereClause = whereClause;
                    //}
                    if (whereClause.length() == 0) {
                        //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                        whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    } else {
                        //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                        whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    }
                } else {
                    whereClause = whereClause;
                }
                //if (srcmaterial.getShowUpdateCatalog()== 1) {
                //get name material > 2
                if (whereClause.length() == 0) {
                    //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                    //whereClause = whereClause + " LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
                } else {
                    //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                    //whereClause = whereClause + " AND LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
                }
                //}

                if (whereClause.length() > 0) {
                    sql = sql + " WHERE " + whereClause;
                }

                //added by dewok 2018-02-08
                if (whereAdd.length() > 0) {
                    sql += whereAdd;
                }

                String separator = PstSystemProperty.getValueByName("SEPARATOR_SKU");
                switch (srcmaterial.getSortby()) {
                    case 0:
                        //added by dewok 2018 for litama
                        int cekTypeOfBusinessDetail = Integer.parseInt(AppValue.getValueByKey("TYPE_OF_BUSINESS_DETAIL"));
                        if (cekTypeOfBusinessDetail == 2) {
                            sql = sql + " ORDER BY RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",7) ASC";
                        } else {
                            //update opie-eyek 20130731
                            if (separator.equals("")) {
                                sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU];
                            } else {
                                // ORDER BY CONVERT((LEFT(sku,LOCATE('.',sku)-1)),SIGNED INTEGER),CONVERT((SUBSTRING(sku,LOCATE('.',sku)+1)),SIGNED INTEGER);
                                sql = sql + " ORDER BY CONVERT((LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",LOCATE('" + separator + "',MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ")-1)),SIGNED INTEGER),CONVERT((SUBSTRING(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",LOCATE('" + separator + "',MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ")+1)),SIGNED INTEGER)";
                            }
                        }

                        break;
                    case 1:
                        sql = sql + " ORDER BY CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME];
                        break;
                    case 2:
                        sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME];
                        break;
                }

                switch (DBHandler.DBSVR_TYPE) {
                    case DBHandler.DBSVR_MYSQL:
                        if (start == 0 && recordToGet == 0) {
                            sql = sql + "";
                        } else {
                            sql = sql + " LIMIT " + start + "," + recordToGet;
                        }
                        break;

                    case DBHandler.DBSVR_POSTGRESQL:
                        if (start == 0 && recordToGet == 0) {
                            sql = sql + "";
                        } else {
                            sql = sql + " LIMIT " + recordToGet + " OFFSET " + start;
                        }
                        break;

                    case DBHandler.DBSVR_SYBASE:
                        break;

                    case DBHandler.DBSVR_ORACLE:
                        break;

                    case DBHandler.DBSVR_MSSQL:
                        break;

                    default: 
                    ;
                }
                System.out.println("Query Material Data : " + sql);
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) { 
                    Vector temp = new Vector();
                    Material material = new Material();
                    Category category = new Category(); 
                    SubCategory subCategory = new SubCategory();
                    Merk merk = new Merk();
                    Unit unit = new Unit();
                    Ksg ksg = new Ksg();

                    material.setOID(rs.getLong(1));
                    material.setSku(rs.getString(2));
                    material.setBarCode(rs.getString(3));
                    material.setName(rs.getString(4));
                    material.setDefaultSupplierType(rs.getInt(5));
                    material.setDefaultPrice(rs.getDouble(6));
                    material.setDefaultCost(rs.getDouble(7));
                    material.setAveragePrice(rs.getDouble(8));
                    material.setCategoryId(rs.getLong("MATCATEGORY")); 
                    material.setPosColor(rs.getLong("MATCOLOR"));
                    temp.add(material);//0

                    category.setName(rs.getString(9));
                    category.setCode(rs.getString(10));
                    category.setKenaikanHarga(rs.getInt(11));
                    category.setOID(rs.getLong("CATOID"));
                    temp.add(category);//1

                    subCategory.setName(rs.getString("SUBCNM"));
                    temp.add(subCategory);//2

                    merk.setName(rs.getString("MERKNM"));
                    temp.add(merk);//3

                    unit.setCode(rs.getString("UNITSTOCK"));
                    temp.add(unit);//4

                    ksg.setName(rs.getString("GONDOLA"));
                    temp.add(ksg);//4

                    result.add(temp);
                }
                rs.close();

            }catch (Exception e) {
            System.out.println("Err get list opname material : " + e.toString());
        }finally {
            DBResultSet.close(dbrs);
        }
            return result;
        }
        //add getListMaterial for reposting stok
        //by mirahu 20120730
    public static Vector getListMaterialRepostingStock(Vector vtMaterialCode, Vector vtMaterialName,
            SrcMaterialRepostingStock srcMaterialRepostingStock, int start, int recordToGet) {
        DBResultSet dbrs = null;

        Vector result = new Vector(1, 1);
        try {
            String sql = "SELECT MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_SUPPLIER_TYPE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_PRICE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_COST]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CODE]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CODE];
            //" ,SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_NAME] +
            //" ,SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_CODE];
            if (srcMaterialRepostingStock.getSupplierId() != -1) {
                sql = sql + " ,CNT." + PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]
                        + " ,CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE];
            }
            //if(srcmaterial.getMerkId()!=0){
            sql = sql + " ,MERK." + PstMerk.fieldNames[PstMerk.FLD_NAME] + " AS MERKNM ";
            //}
            sql = sql + " FROM " + PstMaterial.TBL_MATERIAL
                    + " MAT LEFT JOIN " + PstCategory.TBL_CATEGORY
                    + " CAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + "";
            /*" INNER JOIN " + PstSubCategory.TBL_SUB_CATEGORY +
             " SCAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
             " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID] +
             " ) ";*/
            if (srcMaterialRepostingStock.getSupplierId() != -1) {
                sql = sql + " INNER JOIN " + PstMatVendorPrice.TBL_MATERIAL_VENDOR_PRICE + " VDR "
                        + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID]
                        + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                        + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " CNT"
                        + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + " = CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            }
            //if(srcmaterial.getMerkId()!=0){
            sql = sql + " LEFT JOIN " + PstMerk.TBL_MAT_MERK + " AS MERK "
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
                    + " = MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID];
            //}

            String strMaterialCode = "";
            if (srcMaterialRepostingStock.getJenisCode() == 0) {
                if (vtMaterialCode != null && vtMaterialCode.size() > 0) {
                    for (int a = 0; a < vtMaterialCode.size(); a++) {
                        if (strMaterialCode.length() == 0) {
                            strMaterialCode = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        } else {
                            strMaterialCode = strMaterialCode + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR " + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        }
                    }
                    strMaterialCode = "( " + strMaterialCode + " )";
                }
            } else {
                if (srcMaterialRepostingStock.getMatcode().length() > 0) {
                    strMaterialCode = " SUBSTRING(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",3,3) = '" + srcMaterialRepostingStock.getMatcode() + "'";
                }
                if (srcMaterialRepostingStock.getCodeShip().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcMaterialRepostingStock.getCodeShip() + "'";
                    } else {
                        strMaterialCode = " LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcMaterialRepostingStock.getCodeShip() + "'";
                    }
                }
                if (srcMaterialRepostingStock.getCodeCounter().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcMaterialRepostingStock.getCodeCounter().length() + ") = '" + srcMaterialRepostingStock.getCodeCounter() + "'";
                    } else {
                        strMaterialCode = " RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcMaterialRepostingStock.getCodeCounter().length() + ") = '" + srcMaterialRepostingStock.getCodeCounter() + "'";
                    }
                }

                if (strMaterialCode.length() > 0) {
                    strMaterialCode = "(" + strMaterialCode + ")";
                }
            }

            String strMaterialName = "";
            if (vtMaterialName != null && vtMaterialName.size() > 0) {
                for (int a = 0; a < vtMaterialName.size(); a++) {
                    if (strMaterialName.length() == 0) {
                        strMaterialName = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    } else {
                        strMaterialName = strMaterialName + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    }
                }
                strMaterialName = "( " + strMaterialName + " )";
            }

            String strSupplier = "";
            if (srcMaterialRepostingStock.getSupplierId() > 0) {
                strSupplier = " VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + " = " + srcMaterialRepostingStock.getSupplierId();
            }

            String strMerk = "";
            if (srcMaterialRepostingStock.getMerkId() > 0) {
                strMerk = " MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
                        + " = " + srcMaterialRepostingStock.getMerkId();
            }

            String strGroup = "";
            if (srcMaterialRepostingStock.getCategoryId() > 0) {
                strGroup = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                        + " = " + srcMaterialRepostingStock.getCategoryId();
            }

            String strSubCategory = "";
            if (srcMaterialRepostingStock.getSubCategoryId() > 0) {
                //strSubCategory = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
                //       " = " + srcmaterial.getSubCategoryId();
            }

            String strItemType = "";
            if (srcMaterialRepostingStock.getTypeItem() != -1) {
                if (srcMaterialRepostingStock.getTypeItem() == 0) {//not for gift
                    //strItemType = " MAT."+PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT] +
                    //    " = 0 ";
                } else {// for gift
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT]
                            + " > 0 ";
                }
            }

            String strCodeRange = "";
            if (srcMaterialRepostingStock.getOidCodeRange() != 0) {
                try {
                    CodeRange codeRange = PstCodeRange.fetchExc(srcMaterialRepostingStock.getOidCodeRange());
                    strCodeRange = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                            + " BETWEEN '" + codeRange.getFromRangeCode() + "' AND '" + codeRange.getToRangeCode() + "'";
                } catch (Exception e) {
                }
            }

            //group Item
            String strGroupTypeItem = "";
            if (srcMaterialRepostingStock.getGroupItem() != -1) {
                if (srcMaterialRepostingStock.getGroupItem() == PstMaterial.MATERIAL_TYPE_REGULAR) { // for material
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_REGULAR;
                } else if (srcMaterialRepostingStock.getGroupItem() == PstMaterial.MAT_TYPE_COMPOSITE) {// for composite
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_COMPOSITE;
                } else if (srcMaterialRepostingStock.getGroupItem() == PstMaterial.MAT_TYPE_SERVICE) {// for service
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_SERVICE;
                }
            }

            String whereClause = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_PROCESS_STATUS] + " != " + PstMaterial.DELETE;

            if (strMaterialCode.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialCode;
                } else {
                    whereClause = whereClause + " AND " + strMaterialCode;
                }
            }

            if (strMaterialName.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialName;
                } else {
                    whereClause = whereClause + " AND " + strMaterialName;
                }
            }

            if (strSupplier.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSupplier;
                } else {
                    whereClause = whereClause + " AND " + strSupplier;
                }
            }

            if (strMerk.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMerk;
                } else {
                    whereClause = whereClause + " AND " + strMerk;
                }
            }

            if (strGroup.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroup;
                } else {
                    whereClause = whereClause + " AND " + strGroup;
                }
            }

            if (strSubCategory.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSubCategory;
                } else {
                    whereClause = whereClause + " AND " + strSubCategory;
                }
            }

            if (strItemType.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strItemType;
                } else {
                    whereClause = whereClause + " AND " + strItemType;
                }
            }

            if (strCodeRange.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strCodeRange;
                } else {
                    whereClause = whereClause + " AND " + strCodeRange;
                }
            }
            if (strGroupTypeItem.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroupTypeItem;
                } else {
                    whereClause = whereClause + " AND " + strGroupTypeItem;
                }
            }

            //query update harga jual pada katalog
            String strfromDate = Formater.formatDate(srcMaterialRepostingStock.getDateFrom(), "yyyy-MM-dd 00:00:00");
            String strtoDate = Formater.formatDate(srcMaterialRepostingStock.getDateTo(), "yyyy-MM-dd 23:59:59");
            if (srcMaterialRepostingStock.getShowUpdateCatalog() == 1) {
                // whereClause = whereClause;
                //}
                if (whereClause.length() == 0) {
                    //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                } else {
                    //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                }
            } else {
                whereClause = whereClause;
            }
            //if (srcmaterial.getShowUpdateCatalog()== 1) {
            //get name material > 2
            if (whereClause.length() == 0) {
                //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            } else {
                //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " AND LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            }
            //}

            if (whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            switch (srcMaterialRepostingStock.getSortby()) {
                case 0:
                    sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU];
                    break;
                case 1:
                    sql = sql + " ORDER BY CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME];
                    break;
                case 2:
                    sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME];
                    break;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (start == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + start + "," + recordToGet;
                    }
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (start == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + start;
                    }
                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    ;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                Material material = new Material();
                Category category = new Category();
                SubCategory subCategory = new SubCategory();
                ContactList cnt = new ContactList();

                material.setOID(rs.getLong(1));
                material.setSku(rs.getString(2));
                material.setBarCode(rs.getString(3));
                material.setName(rs.getString(4));
                material.setDefaultSupplierType(rs.getInt(5));
                material.setDefaultPrice(rs.getDouble(6));
                material.setDefaultCost(rs.getDouble(7));
                temp.add(material);

                category.setName(rs.getString(8));
                category.setCode(rs.getString(9));
                temp.add(category);

                //subCategory.setName(rs.getString(10));
                //subCategory.setCode(rs.getString(11));
                temp.add(subCategory);

                Merk merk = new Merk();
                merk.setName(rs.getString("MERKNM"));
                temp.add(merk);
                //
                //cnt.setCompName(rs.getString(12));
                //cnt.setContactCode(rs.getString(13));
                //temp.add(cnt);

                result.add(temp);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Err get list opname material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    /**
     * update opie-eyek 20130805
     *
     * @param vtMaterialCode
     * @param vtMaterialName
     * @param srcmaterial
     * @param start
     * @param recordToGet
     * @param oidPriceType
     * @return
     */
    public static Vector getListMaterialPriceTag(Vector vtMaterialCode, Vector vtMaterialName,
            SrcMaterial srcmaterial, int start, int recordToGet, long oidPriceType) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1, 1);
        try {
            String sql = "SELECT MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_SUPPLIER_TYPE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_PRICE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_COST]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CODE]
                    + " ,PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE];
            //" ,SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_NAME] +
            //" ,SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_CODE];
            if (srcmaterial.getSupplierId() != -1) {
                sql = sql + " ,CNT." + PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]
                        + " ,CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE];
            }
            //if(srcmaterial.getMerkId()!=0){
            sql = sql + " ,MERK." + PstMerk.fieldNames[PstMerk.FLD_NAME] + " AS MERKNM ";
            //}
            sql = sql + " FROM " + PstMaterial.TBL_MATERIAL
                    + " MAT LEFT JOIN " + PstCategory.TBL_CATEGORY
                    + " CAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
                    + //adding price type
                    " LEFT JOIN " + PstPriceTypeMapping.TBL_POS_PRICE_TYPE_MAPPING
                    + " PRC ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " = PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_MATERIAL_ID] + "";
            if (srcmaterial.getSupplierId() != -1) {
                sql = sql + " INNER JOIN " + PstMatVendorPrice.TBL_MATERIAL_VENDOR_PRICE + " VDR "
                        + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID]
                        + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                        + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " CNT"
                        + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + " = CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            }
            //if(srcmaterial.getMerkId()!=0){
            sql = sql + " LEFT JOIN " + PstMerk.TBL_MAT_MERK + " AS MERK "
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
                    + " = MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID];
            //}

            String strMaterialCode = "";
            if (srcmaterial.getJenisCode() == 0) {
                if (vtMaterialCode != null && vtMaterialCode.size() > 0) {
                    for (int a = 0; a < vtMaterialCode.size(); a++) {
                        if (strMaterialCode.length() == 0) {
                            strMaterialCode = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        } else {
                            strMaterialCode = strMaterialCode + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR " + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        }
                    }
                    strMaterialCode = "( " + strMaterialCode + " )";
                }
            } else {
                if (srcmaterial.getMatcode().length() > 0) {
                    strMaterialCode = " SUBSTRING(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",3,3) = '" + srcmaterial.getMatcode() + "'";
                }
                if (srcmaterial.getCodeShip().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcmaterial.getCodeShip() + "'";
                    } else {
                        strMaterialCode = " LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcmaterial.getCodeShip() + "'";
                    }
                }
                if (srcmaterial.getCodeCounter().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcmaterial.getCodeCounter().length() + ") = '" + srcmaterial.getCodeCounter() + "'";
                    } else {
                        strMaterialCode = " RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcmaterial.getCodeCounter().length() + ") = '" + srcmaterial.getCodeCounter() + "'";
                    }
                }

                if (strMaterialCode.length() > 0) {
                    strMaterialCode = "(" + strMaterialCode + ")";
                }
            }

            String strMaterialName = "";
            if (vtMaterialName != null && vtMaterialName.size() > 0) {
                for (int a = 0; a < vtMaterialName.size(); a++) {
                    if (strMaterialName.length() == 0) {
                        strMaterialName = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    } else {
                        strMaterialName = strMaterialName + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    }
                }
                strMaterialName = "( " + strMaterialName + " )";
            }

            String strSupplier = "";
            if (srcmaterial.getSupplierId() > 0) {
                strSupplier = " VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + " = " + srcmaterial.getSupplierId();
            }

            String standartRate = "";
            if (srcmaterial.getSelectCurrencyTypeId() > 0) {
                standartRate = " PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_STANDART_RATE_ID]
                        + " = " + srcmaterial.getSelectCurrencyTypeId();
            }

            String strMerk = "";
            if (srcmaterial.getMerkId() > 0) {
                strMerk = " MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
                        + " = " + srcmaterial.getMerkId();
            }

            String strGroup = "";
            if (srcmaterial.getCategoryId() > 0) {
                strGroup = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                        + " = " + srcmaterial.getCategoryId();
            }

            String strSubCategory = "";
            if (srcmaterial.getSubCategoryId() > 0) {
                //strSubCategory = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
                //       " = " + srcmaterial.getSubCategoryId();
            }

            String strItemType = "";
            if (srcmaterial.getTypeItem() != -1) {
                if (srcmaterial.getTypeItem() == 0) {//not for gift
                    //strItemType = " MAT."+PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT] +
                    //    " = 0 ";
                } else {// for gift
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT]
                            + " > 0 ";
                }
            }

            String strCodeRange = "";
            if (srcmaterial.getOidCodeRange() != 0) {
                try {
                    CodeRange codeRange = PstCodeRange.fetchExc(srcmaterial.getOidCodeRange());
                    strCodeRange = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                            + " BETWEEN '" + codeRange.getFromRangeCode() + "' AND '" + codeRange.getToRangeCode() + "'";
                } catch (Exception e) {
                }
            }

            //group Item
            String strGroupTypeItem = "";
            if (srcmaterial.getGroupItem() != -1) {
                if (srcmaterial.getGroupItem() == PstMaterial.MATERIAL_TYPE_REGULAR) { // for material
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_REGULAR;
                } else if (srcmaterial.getGroupItem() == PstMaterial.MAT_TYPE_COMPOSITE) {// for composite
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_COMPOSITE;
                } else if (srcmaterial.getGroupItem() == PstMaterial.MAT_TYPE_SERVICE) {// for service
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_SERVICE;
                }
            }

            String strPriceType = "";
            if (oidPriceType > 0) {
                strPriceType = " PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE_TYPE_ID]
                        + " = " + oidPriceType;
            }

            String whereClause = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_PROCESS_STATUS] + " != " + PstMaterial.DELETE;

            if (strMaterialCode.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialCode;
                } else {
                    whereClause = whereClause + " AND " + strMaterialCode;
                }
            }

            if (strMaterialName.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialName;
                } else {
                    whereClause = whereClause + " AND " + strMaterialName;
                }
            }

            if (strSupplier.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSupplier;
                } else {
                    whereClause = whereClause + " AND " + strSupplier;
                }
            }

            if (strMerk.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMerk;
                } else {
                    whereClause = whereClause + " AND " + strMerk;
                }
            }

            if (standartRate.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + standartRate;
                } else {
                    whereClause = whereClause + " AND " + standartRate;
                }
            }

            if (strGroup.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroup;
                } else {
                    whereClause = whereClause + " AND " + strGroup;
                }
            }

            if (strSubCategory.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSubCategory;
                } else {
                    whereClause = whereClause + " AND " + strSubCategory;
                }
            }

            if (strItemType.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strItemType;
                } else {
                    whereClause = whereClause + " AND " + strItemType;
                }
            }

            if (strCodeRange.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strCodeRange;
                } else {
                    whereClause = whereClause + " AND " + strCodeRange;
                }
            }
            if (strGroupTypeItem.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroupTypeItem;
                } else {
                    whereClause = whereClause + " AND " + strGroupTypeItem;
                }
            }

            if (strPriceType.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strPriceType;
                } else {
                    whereClause = whereClause + " AND " + strPriceType;
                }
            }

            //query update harga jual pada katalog
            String strfromDate = Formater.formatDate(srcmaterial.getDateFrom(), "yyyy-MM-dd 00:00:00");
            String strtoDate = Formater.formatDate(srcmaterial.getDateTo(), "yyyy-MM-dd 23:59:59");
            if (srcmaterial.getShowUpdateCatalog() == 1) {
                // whereClause = whereClause;
                //}
                if (whereClause.length() == 0) {
                    //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                } else {
                    //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                }
            } else {
                whereClause = whereClause;
            }
            //if (srcmaterial.getShowUpdateCatalog()== 1) {
            //get name material > 2
            if (whereClause.length() == 0) {
                //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            } else {
                //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " AND LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            }
            //}

            if (whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            switch (srcmaterial.getSortby()) {
                case 0:
                    sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU];
                    break;
                case 1:
                    sql = sql + " ORDER BY CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME];
                    break;
                case 2:
                    sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME];
                    break;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (start == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + start + "," + recordToGet;
                    }
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (start == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + start;
                    }
                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    ;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                Material material = new Material();
                Category category = new Category();
                SubCategory subCategory = new SubCategory();
                ContactList cnt = new ContactList();

                material.setOID(rs.getLong(1));
                material.setSku(rs.getString(2));
                material.setBarCode(rs.getString(3));
                material.setName(rs.getString(4));
                material.setDefaultSupplierType(rs.getInt(5));
                material.setDefaultPrice(rs.getDouble(6));
                material.setDefaultCost(rs.getDouble(7));
                temp.add(material);

                category.setName(rs.getString(8));
                category.setCode(rs.getString(9));
                temp.add(category);

                //subCategory.setName(rs.getString(10));
                //subCategory.setCode(rs.getString(11));
                temp.add(subCategory);

                Merk merk = new Merk();
                merk.setName(rs.getString("MERKNM"));
                temp.add(merk);

                PriceTypeMapping priceTypeMapping = new PriceTypeMapping();
                priceTypeMapping.setPrice(rs.getDouble(10));
                temp.add(priceTypeMapping);
                //
                //cnt.setCompName(rs.getString(12));
                //cnt.setContactCode(rs.getString(13));
                //temp.add(cnt);

                result.add(temp);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Err get list opname material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    /*
     * Get list PriceType 
     * by Mirahu
     * 20120420 
     */
    public static Vector listPriceType(SrcMaterial srcMaterial) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT PRC." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID]
                    + " ,PRC." + PstPriceType.fieldNames[PstPriceType.FLD_CODE]
                    + " ,PRC." + PstPriceType.fieldNames[PstPriceType.FLD_NAME]
                    + " FROM " + PstPriceType.TBL_POS_PRICE_TYPE + " PRC ";

            String strPriceType = "";
            if (srcMaterial.getPriceTypeId() != null && srcMaterial.getPriceTypeId().size() > 0) {
                for (int b = 0; b < srcMaterial.getPriceTypeId().size(); b++) {
                    if (strPriceType.length() != 0) {
                        strPriceType = strPriceType + " OR " + "(PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE_TYPE_ID] + " =" + srcMaterial.getPriceTypeId().get(b) + ")";
                    } else {
                        strPriceType = "(PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE_TYPE_ID] + " =" + srcMaterial.getPriceTypeId().get(b) + ")";
                    }
                }
                strPriceType = "(" + strPriceType + ")";
            }

            String whereClause = "";

            if (strPriceType.length() > 0) {
                whereClause = " WHERE " + strPriceType;

            }

            sql = sql + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                PriceType priceType = new PriceType();

                priceType.setOID(rs.getLong(1));
                priceType.setCode(rs.getString(2));
                priceType.setName(rs.getString(3));
                lists.add(priceType);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static Vector getListPointMaterial(int start, int recordToGet) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1, 1);
        try {
            String sql = "SELECT MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_SUPPLIER_TYPE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_PRICE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_COST]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CODE]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CODE]
                    + //" ,SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_NAME] +
                    //" ,SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_CODE]+
                    " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT];

            sql = sql + " FROM ((" + PstMaterial.TBL_MATERIAL
                    + " MAT INNER JOIN " + PstCategory.TBL_CATEGORY
                    + " CAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + ")";

            /*" INNER JOIN " + PstSubCategory.TBL_SUB_CATEGORY +
             " SCAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
             " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID] +
             " ) ";*/
            sql = sql + " WHERE MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT] + " > 0 "
                    + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT] + " DESC "
                    + ", MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU];

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (start == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + start + "," + recordToGet;
                    }
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (start == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + start;
                    }
                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    ;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                Material material = new Material();
                Category category = new Category();
                SubCategory subCategory = new SubCategory();
                ContactList cnt = new ContactList();

                material.setOID(rs.getLong(1));
                material.setSku(rs.getString(2));
                material.setBarCode(rs.getString(3));
                material.setName(rs.getString(4));
                material.setDefaultSupplierType(rs.getInt(5));
                material.setDefaultPrice(rs.getDouble(6));
                material.setDefaultCost(rs.getDouble(7));
                material.setMinimumPoint(rs.getInt(12));
                temp.add(material);

                category.setName(rs.getString(8));
                category.setCode(rs.getString(9));
                temp.add(category);

                //subCategory.setName(rs.getString(10));
                //subCategory.setCode(rs.getString(11));
                temp.add(subCategory);
                //
                //cnt.setCompName(rs.getString(12));
                //cnt.setContactCode(rs.getString(13));
                //temp.add(cnt);

                result.add(temp);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Err get list point material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    public static int getCountSearch(SrcMaterial srcmaterial) {
        return getCountSearch(srcmaterial, "");
    }

    public static int getCountSearch(SrcMaterial srcmaterial, String whereAdd) {
        String strCode = srcmaterial.getMatcode();
        Vector vectMaterialCode = new Vector(1, 1);
        vectMaterialCode.add(strCode);

        String strName = srcmaterial.getMatname();
        Vector vectMaterialName = new Vector();
        vectMaterialName.add(strName);
        /*Vector vectMaterialCode = LogicParser.textSentence(strCode);
         for (int i = 0; i < vectMaterialCode.size(); i++) {
         String code = (String) vectMaterialCode.get(i);
         if ((code.equals(LogicParser.SIGN)) || (code.equals(LogicParser.ENGLISH[0])))
         vectMaterialCode.remove(i);
         }
         
         String strName = srcmaterial.getMatname();
         Vector vectMaterialName = LogicParser.textSentence(strName);
         for (int i = 0; i < vectMaterialName.size(); i++) {
         String name = (String) vectMaterialName.get(i);
         if ((name.equals(LogicParser.SIGN)) || (name.equals(LogicParser.ENGLISH[0])))
         vectMaterialName.remove(i);
         } */

        return getCountListMaterial(vectMaterialCode, vectMaterialName, srcmaterial, whereAdd);
    }

    public static int getCountSearchRepostingStok(SrcMaterialRepostingStock srcMaterialRepostingStock) {
        String strCode = srcMaterialRepostingStock.getMatcode();
        Vector vectMaterialCode = new Vector(1, 1);
        vectMaterialCode.add(strCode);

        String strName = srcMaterialRepostingStock.getMatname();
        Vector vectMaterialName = new Vector();
        vectMaterialName.add(strName);
        /*Vector vectMaterialCode = LogicParser.textSentence(strCode);
         for (int i = 0; i < vectMaterialCode.size(); i++) {
         String code = (String) vectMaterialCode.get(i);
         if ((code.equals(LogicParser.SIGN)) || (code.equals(LogicParser.ENGLISH[0])))
         vectMaterialCode.remove(i);
         }
         
         String strName = srcmaterial.getMatname();
         Vector vectMaterialName = LogicParser.textSentence(strName);
         for (int i = 0; i < vectMaterialName.size(); i++) {
         String name = (String) vectMaterialName.get(i);
         if ((name.equals(LogicParser.SIGN)) || (name.equals(LogicParser.ENGLISH[0])))
         vectMaterialName.remove(i);
         } */

        return getCountListMaterialRepostingStok(vectMaterialCode, vectMaterialName, srcMaterialRepostingStock);
    }

    public static int getCountSearchPriceTag(SrcMaterial srcmaterial) {
        String strCode = srcmaterial.getMatcode();
        Vector vectMaterialCode = new Vector(1, 1);
        vectMaterialCode.add(strCode);

        String strName = srcmaterial.getMatname();
        Vector vectMaterialName = new Vector();
        vectMaterialName.add(strName);
        /*Vector vectMaterialCode = LogicParser.textSentence(strCode);
         for (int i = 0; i < vectMaterialCode.size(); i++) {
         String code = (String) vectMaterialCode.get(i);
         if ((code.equals(LogicParser.SIGN)) || (code.equals(LogicParser.ENGLISH[0])))
         vectMaterialCode.remove(i);
         }
         
         String strName = srcmaterial.getMatname();
         Vector vectMaterialName = LogicParser.textSentence(strName);
         for (int i = 0; i < vectMaterialName.size(); i++) {
         String name = (String) vectMaterialName.get(i);
         if ((name.equals(LogicParser.SIGN)) || (name.equals(LogicParser.ENGLISH[0])))
         vectMaterialName.remove(i);
         } */

        return getCountListMaterial(vectMaterialCode, vectMaterialName, srcmaterial);
    }

    public static int getCountListMaterial(Vector vtMaterialCode, Vector vtMaterialName, SrcMaterial srcmaterial) {
        return getCountListMaterial(vtMaterialCode, vtMaterialName, srcmaterial, "");
    }

    public static int getCountListMaterial(Vector vtMaterialCode, Vector vtMaterialName, SrcMaterial srcmaterial, String whereAdd) {
        DBResultSet dbrs = null;
        int count = 0;

        long standardRate = 0;
        if (srcmaterial.getViewHppvsPrice() == 2) {
            Vector listCurrStandard = PstStandartRate.listCurrStandard(1);
            for (int i = 0; i < listCurrStandard.size(); i++) {
                Vector temp = (Vector) listCurrStandard.get(i);
                CurrencyType currencyType = (CurrencyType) temp.get(0);
                StandartRate sRate = (StandartRate) temp.get(1);
                standardRate = sRate.getOID();
            }
        }
        try {
            String sql = "SELECT COUNT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " ) AS CNT FROM (" + PstMaterial.TBL_MATERIAL
                    + " MAT LEFT JOIN " + PstCategory.TBL_CATEGORY
                    + " CAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + ")";
            /*" INNER JOIN " + PstSubCategory.TBL_SUB_CATEGORY +
             " SCAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
             " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID];*/
            if (srcmaterial.getSupplierId() != -1) {
                sql = sql + " INNER JOIN " + PstMatVendorPrice.TBL_MATERIAL_VENDOR_PRICE + " VDR "
                        + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID]
                        + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                        + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " CNT"
                        + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + " = CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            }

            if (srcmaterial.getViewHppvsPrice() == 2) {
                sql = sql + " INNER JOIN pos_price_type_mapping AS ppt "
                        + " ON ppt.MATERIAL_ID=MAT.MATERIAL_ID ";
            }

            //            if(srcmaterial.getMerkId()!=0){
            sql = sql + " LEFT JOIN " + PstMerk.TBL_MAT_MERK + " AS MERK "
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
                    + " = MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID];
            //            }

            if (srcmaterial.getDesignMat() == 1) {//integrasi dengan hanoman
                if (srcmaterial.getSellLocation().size() > 0) {
                    sql = sql + " LEFT JOIN " + PstMatMappLocation.TBL_POS_MAT_LOCATION + " AS PL "
                            + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                            + " = PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_MATERIAL_ID];
                }
            }

            String strMaterialCode = "";
            if (srcmaterial.getJenisCode() == 0) {
                if (vtMaterialCode != null && vtMaterialCode.size() > 0) {
                    for (int a = 0; a < vtMaterialCode.size(); a++) {
                        if (strMaterialCode.length() == 0) {
                            strMaterialCode = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        } else {
                            strMaterialCode = strMaterialCode + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR " + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        }
                    }
                    strMaterialCode = "( " + strMaterialCode + " )";
                }
            } else {
                if (srcmaterial.getMatcode().length() > 0) {
                    strMaterialCode = " SUBSTRING(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",3,3) = '" + srcmaterial.getMatcode() + "'";
                }
                if (srcmaterial.getCodeShip().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcmaterial.getCodeShip() + "'";
                    } else {
                        strMaterialCode = " LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcmaterial.getCodeShip() + "'";
                    }
                }
                if (srcmaterial.getCodeCounter().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcmaterial.getCodeCounter().length() + ") = '" + srcmaterial.getCodeCounter() + "'";
                    } else {
                        strMaterialCode = " RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcmaterial.getCodeCounter().length() + ") = '" + srcmaterial.getCodeCounter() + "'";
                    }
                }

                if (strMaterialCode.length() > 0) {
                    strMaterialCode = "(" + strMaterialCode + ")";
                }
            }

            String strMaterialName = "";
            if (vtMaterialName != null && vtMaterialName.size() > 0) {
                for (int a = 0; a < vtMaterialName.size(); a++) {
                    if (strMaterialName.length() == 0) {
                        strMaterialName = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    } else {
                        strMaterialName = strMaterialName + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    }
                }
                strMaterialName = "( " + strMaterialName + " )";
            }

            String sellLocation = "";
            if (srcmaterial.getDesignMat() == 1) {//integrasi dengan hanoman
                if (srcmaterial.getSellLocation().size() > 0 && srcmaterial.getSellLocation() != null) {
                    for (int a = 0; a < srcmaterial.getSellLocation().size(); a++) {
                        if (sellLocation.length() == 0) {
                            sellLocation = "(PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_LOCATION_ID] + " = '" + srcmaterial.getSellLocation().get(a) + "')";
                        } else {
                            sellLocation = sellLocation + " OR (PL." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_LOCATION_ID] + " = '" + srcmaterial.getSellLocation().get(a) + "')";
                        }
                    }
                    sellLocation = "( " + sellLocation + " )";
                }
            }

            String strSupplier = "";
            if (srcmaterial.getSupplierId() != -1) {
                strSupplier = " VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + " = " + srcmaterial.getSupplierId();
            }

            String strMerk = "";
            if (srcmaterial.getMerkId() != -1) {
                strMerk = " MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
                        + " = " + srcmaterial.getMerkId();
            }

            //update opie-eyek 20131218 show yg menggunakan serial number saja
            String showSerialNumber = "";
            if (srcmaterial.getUseSerialNumber() == 1) {
                showSerialNumber = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_REQUIRED_SERIAL_NUMBER]
                        + " = '1'";
            }

            //gondola opie-eyek 20160623
            String showgondola = "";
            if (srcmaterial.getGondolaId() != 0) {
                showgondola = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_GONDOLA_CODE]
                        + " = '" + srcmaterial.getGondolaId() + "'";
            }

//            String strGroup = "";
//            if (srcmaterial.getCategoryId() != -1) {
//                strGroup = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID] +
//                        " = " + srcmaterial.getCategoryId();
//            }
            String strGroup = "";
            if (srcmaterial.getCategoryId() > 0) {
                //buatkan seperti
                strGroup = " ( MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                        + " = " + srcmaterial.getCategoryId();
                Vector masterCatAcak = PstCategory.list(0, 0, "", PstCategory.fieldNames[PstCategory.FLD_CAT_PARENT_ID]);
                if (masterCatAcak.size() > 1) {
                    Vector materGroup = PstCategory.structureList(masterCatAcak, srcmaterial.getCategoryId());
                    for (int i = 0; i < materGroup.size(); i++) {
                        Category mGroup = (Category) materGroup.get(i);
                        strGroup = strGroup + " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                                + " = " + mGroup.getOID();
                    }
                }

                strGroup = strGroup + ")";

            }

            String strSubCategory = "";
            if (srcmaterial.getSubCategoryId() != 0) {
                strSubCategory = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID]
                        + " = " + srcmaterial.getSubCategoryId();
            }

            String strItemType = "";
            if (srcmaterial.getTypeItem() != -1) {
                if (srcmaterial.getTypeItem() == 0) {//not for gift
                    //                    strItemType = " MAT."+PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT] +
                    //                    " = 0 ";
                } else {// for gift
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT]
                            + " > 0 ";
                }
            }

            String strCodeRange = "";
            if (srcmaterial.getOidCodeRange() != 0) {
                try {
                    CodeRange codeRange = PstCodeRange.fetchExc(srcmaterial.getOidCodeRange());
                    strCodeRange = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                            + " BETWEEN '" + codeRange.getFromRangeCode() + "' AND '" + codeRange.getToRangeCode() + "'";
                } catch (Exception e) {
                }
            }

            //group Item
            String strGroupTypeItem = "";
            if (srcmaterial.getGroupItem() != -1) {
                if (srcmaterial.getGroupItem() == PstMaterial.MATERIAL_TYPE_REGULAR) { // for material
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_REGULAR;
                } else if (srcmaterial.getGroupItem() == PstMaterial.MAT_TYPE_COMPOSITE) {// for composite
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_COMPOSITE;
                } else if (srcmaterial.getGroupItem() == PstMaterial.MAT_TYPE_SERVICE) {// for service
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_SERVICE;
                }
            }

            String statusMaterial = "";
            if (srcmaterial.getStatusMaterial() == 4) {
                statusMaterial = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_EDIT_MATERIAL]
                        + " = '" + PstMaterial.EDIT_NON_AKTIVE + "'";
            }

            if (srcmaterial.getStatusMaterial() == 0) {
                statusMaterial = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_EDIT_MATERIAL]
                        + " != '" + PstMaterial.EDIT_NON_AKTIVE + "'";
            }

            String statusViewHppVsPrice = "";
            if (srcmaterial.getViewHppvsPrice() == 1) {
                statusViewHppVsPrice = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_AVERAGE_PRICE]
                        + " = '0'";
            }

            if (srcmaterial.getViewHppvsPrice() == 1) {
                statusViewHppVsPrice = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_AVERAGE_PRICE]
                        + " = '0'";
            }

            //20161021
            String statusViewHppBesariDariPrice = "";
            if (srcmaterial.getViewHppvsPrice() == 2) {
                statusViewHppBesariDariPrice = " ppt.PRICE_TYPE_ID='" + srcmaterial.getSelectPriceTypeId() + "' AND ppt.STANDART_RATE_ID='" + standardRate
                        + "' AND MAT.AVERAGE_PRICE > ppt.PRICE";
            }

            String whereClause = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_PROCESS_STATUS] + " != " + PstMaterial.DELETE;

            if (strMaterialCode.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialCode;
                } else {
                    whereClause = whereClause + " AND " + strMaterialCode;
                }
            }

            if (strMaterialName.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialName;
                } else {
                    whereClause = whereClause + " AND " + strMaterialName;
                }
            }

            if (sellLocation.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + sellLocation;
                } else {
                    whereClause = whereClause + " AND " + sellLocation;
                }
            }

            if (strSupplier.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSupplier;
                } else {
                    whereClause = whereClause + " AND " + strSupplier;
                }
            }

            //update opie-eyek 20131218 show yg menggunakan serial number saja
            if (showSerialNumber.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + showSerialNumber;
                } else {
                    whereClause = whereClause + " AND " + showSerialNumber;
                }
            }

            if (strMerk.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMerk;
                } else {
                    whereClause = whereClause + " AND " + strMerk;
                }
            }

            if (strGroup.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroup;
                } else {
                    whereClause = whereClause + " AND " + strGroup;
                }
            }

            if (strSubCategory.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSubCategory;
                } else {
                    whereClause = whereClause + " AND " + strSubCategory;
                }
            }

            if (strItemType.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strItemType;
                } else {
                    whereClause = whereClause + " AND " + strItemType;
                }
            }

            //showgondola update opie-eyek 20160623
            if (showgondola.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + showgondola;
                } else {
                    whereClause = whereClause + " AND " + showgondola;
                }
            }

            if (strCodeRange.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strCodeRange;
                } else {
                    whereClause = whereClause + " AND " + strCodeRange;
                }
            }

            if (strGroupTypeItem.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroupTypeItem;
                } else {
                    whereClause = whereClause + " AND " + strGroupTypeItem;
                }
            }

            //update opie-eyek 20140415 untuk status barang aktive dan non aktive
            if (statusMaterial.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + statusMaterial;
                } else {
                    whereClause = whereClause + " AND " + statusMaterial;
                }
            }

            //update cek hppnya = 0
            if (statusViewHppVsPrice.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + statusViewHppVsPrice;
                } else {
                    whereClause = whereClause + " AND " + statusViewHppVsPrice;
                }
            }

            if (statusViewHppBesariDariPrice.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + statusViewHppBesariDariPrice;
                } else {
                    whereClause = whereClause + " AND " + statusViewHppBesariDariPrice;
                }
            }

            String strfromDate = Formater.formatDate(srcmaterial.getDateFrom(), "yyyy-MM-dd 00:00:00");
            String strtoDate = Formater.formatDate(srcmaterial.getDateTo(), "yyyy-MM-dd 23:59:59");
            if (srcmaterial.getShowUpdateCatalog() == 1) {
                // whereClause = whereClause;
                //}
                if (whereClause.length() == 0) {
                    //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                } else {
                    //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                }
            } else {
                whereClause = whereClause;
            }
            //if (srcmaterial.getShowUpdateCatalog()== 1) {
            //get name material > 2
            if (whereClause.length() == 0) {
                //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            } else {
                //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " AND LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            }
            // }

            if (whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            //added by dewok 2018-02-08
            if (whereAdd.length() > 0) {
                sql += whereAdd;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Count get list material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static int getCountListMaterialRepostingStok(Vector vtMaterialCode, Vector vtMaterialName, SrcMaterialRepostingStock srcMaterialRepostingStock) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT COUNT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " ) AS CNT FROM (" + PstMaterial.TBL_MATERIAL
                    + " MAT LEFT JOIN " + PstCategory.TBL_CATEGORY
                    + " CAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + ")";
            /*" INNER JOIN " + PstSubCategory.TBL_SUB_CATEGORY +
             " SCAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
             " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID];*/
            if (srcMaterialRepostingStock.getSupplierId() != -1) {
                sql = sql + " INNER JOIN " + PstMatVendorPrice.TBL_MATERIAL_VENDOR_PRICE + " VDR "
                        + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID]
                        + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                        + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " CNT"
                        + " ON VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + " = CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            }
            //            if(srcmaterial.getMerkId()!=0){
            sql = sql + " LEFT JOIN " + PstMerk.TBL_MAT_MERK + " AS MERK "
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
                    + " = MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID];
            //            }

            String strMaterialCode = "";
            if (srcMaterialRepostingStock.getJenisCode() == 0) {
                if (vtMaterialCode != null && vtMaterialCode.size() > 0) {
                    for (int a = 0; a < vtMaterialCode.size(); a++) {
                        if (strMaterialCode.length() == 0) {
                            strMaterialCode = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        } else {
                            strMaterialCode = strMaterialCode + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + vtMaterialCode.get(a) + "%'";
                            strMaterialCode += " OR " + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + vtMaterialCode.get(a) + "%')";
                        }
                    }
                    strMaterialCode = "( " + strMaterialCode + " )";
                }
            } else {
                if (srcMaterialRepostingStock.getMatcode().length() > 0) {
                    strMaterialCode = " SUBSTRING(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",3,3) = '" + srcMaterialRepostingStock.getMatcode() + "'";
                }
                if (srcMaterialRepostingStock.getCodeShip().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcMaterialRepostingStock.getCodeShip() + "'";
                    } else {
                        strMaterialCode = " LEFT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ",2) = '" + srcMaterialRepostingStock.getCodeShip() + "'";
                    }
                }
                if (srcMaterialRepostingStock.getCodeCounter().length() > 0) {
                    if (strMaterialCode.length() > 0) {
                        strMaterialCode = strMaterialCode + " AND RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcMaterialRepostingStock.getCodeCounter().length() + ") = '" + srcMaterialRepostingStock.getCodeCounter() + "'";
                    } else {
                        strMaterialCode = " RIGHT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + "," + srcMaterialRepostingStock.getCodeCounter().length() + ") = '" + srcMaterialRepostingStock.getCodeCounter() + "'";
                    }
                }

                if (strMaterialCode.length() > 0) {
                    strMaterialCode = "(" + strMaterialCode + ")";
                }
            }

            String strMaterialName = "";
            if (vtMaterialName != null && vtMaterialName.size() > 0) {
                for (int a = 0; a < vtMaterialName.size(); a++) {
                    if (strMaterialName.length() == 0) {
                        strMaterialName = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    } else {
                        strMaterialName = strMaterialName + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + vtMaterialName.get(a) + "%')";
                    }
                }
                strMaterialName = "( " + strMaterialName + " )";
            }

            String strSupplier = "";
            if (srcMaterialRepostingStock.getSupplierId() != -1) {
                strSupplier = " VDR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + " = " + srcMaterialRepostingStock.getSupplierId();
            }

            String strMerk = "";
            if (srcMaterialRepostingStock.getMerkId() != -1) {
                strMerk = " MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
                        + " = " + srcMaterialRepostingStock.getMerkId();
            }

            String strGroup = "";
            if (srcMaterialRepostingStock.getCategoryId() != -1) {
                strGroup = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                        + " = " + srcMaterialRepostingStock.getCategoryId();
            }

            String strSubCategory = "";
            if (srcMaterialRepostingStock.getSubCategoryId() != -1) {
                //strSubCategory = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
                //        " = " + srcmaterial.getSubCategoryId();
            }

            String strItemType = "";
            if (srcMaterialRepostingStock.getTypeItem() != -1) {
                if (srcMaterialRepostingStock.getTypeItem() == 0) {//not for gift
                    //                    strItemType = " MAT."+PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT] +
                    //                    " = 0 ";
                } else {// for gift
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT]
                            + " > 0 ";
                }
            }

            String strCodeRange = "";
            if (srcMaterialRepostingStock.getOidCodeRange() != 0) {
                try {
                    CodeRange codeRange = PstCodeRange.fetchExc(srcMaterialRepostingStock.getOidCodeRange());
                    strCodeRange = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                            + " BETWEEN '" + codeRange.getFromRangeCode() + "' AND '" + codeRange.getToRangeCode() + "'";
                } catch (Exception e) {
                }
            }

            //group Item
            String strGroupTypeItem = "";
            if (srcMaterialRepostingStock.getGroupItem() != -1) {
                if (srcMaterialRepostingStock.getGroupItem() == PstMaterial.MATERIAL_TYPE_REGULAR) { // for material
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_REGULAR;
                } else if (srcMaterialRepostingStock.getGroupItem() == PstMaterial.MAT_TYPE_COMPOSITE) {// for composite
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_COMPOSITE;
                } else if (srcMaterialRepostingStock.getGroupItem() == PstMaterial.MAT_TYPE_SERVICE) {// for service
                    strItemType = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_TYPE]
                            + " = " + PstMaterial.MAT_TYPE_SERVICE;
                }
            }

            String whereClause = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_PROCESS_STATUS] + " != " + PstMaterial.DELETE;

            if (strMaterialCode.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialCode;
                } else {
                    whereClause = whereClause + " AND " + strMaterialCode;
                }
            }

            if (strMaterialName.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialName;
                } else {
                    whereClause = whereClause + " AND " + strMaterialName;
                }
            }

            if (strSupplier.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSupplier;
                } else {
                    whereClause = whereClause + " AND " + strSupplier;
                }
            }

            if (strMerk.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMerk;
                } else {
                    whereClause = whereClause + " AND " + strMerk;
                }
            }

            if (strGroup.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroup;
                } else {
                    whereClause = whereClause + " AND " + strGroup;
                }
            }

            if (strSubCategory.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSubCategory;
                } else {
                    whereClause = whereClause + " AND " + strSubCategory;
                }
            }

            if (strItemType.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strItemType;
                } else {
                    whereClause = whereClause + " AND " + strItemType;
                }
            }

            if (strCodeRange.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strCodeRange;
                } else {
                    whereClause = whereClause + " AND " + strCodeRange;
                }
            }

            if (strGroupTypeItem.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroupTypeItem;
                } else {
                    whereClause = whereClause + " AND " + strGroupTypeItem;
                }
            }

            String strfromDate = Formater.formatDate(srcMaterialRepostingStock.getDateFrom(), "yyyy-MM-dd 00:00:00");
            String strtoDate = Formater.formatDate(srcMaterialRepostingStock.getDateTo(), "yyyy-MM-dd 23:59:59");
            if (srcMaterialRepostingStock.getShowUpdateCatalog() == 1) {
                // whereClause = whereClause;
                //}
                if (whereClause.length() == 0) {
                    //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                } else {
                    //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                    whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_LAST_UPDATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                }
            } else {
                whereClause = whereClause;
            }
            //if (srcmaterial.getShowUpdateCatalog()== 1) {
            //get name material > 2
            if (whereClause.length() == 0) {
                //whereClause = whereClause + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            } else {
                //whereClause = whereClause + " AND MAT." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + strfromDate + "' AND '" + strtoDate + "'";
                //update by dewok 2018-01-22 (CASE : di jewelry nama itememas boleh kosong)
                //whereClause = whereClause + " AND LENGTH(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ")>2";
            }
            // }

            if (whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Count get list material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static int getCountListPointMaterial() {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT COUNT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " ) AS CNT FROM (" + PstMaterial.TBL_MATERIAL
                    + " MAT INNER JOIN " + PstCategory.TBL_CATEGORY
                    + " CAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + ")";

            /*" INNER JOIN " + PstSubCategory.TBL_SUB_CATEGORY +
             " SCAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
             " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID];*/
            sql = sql + " WHERE MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MINIMUM_POINT] + " > 0 ";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Count get list point material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    // ------------------- used to search material with multiple supplier ----------
    public static Vector searchMaterialWithMultiSupp(SrcMaterial srcmaterial, int start, int recordToGet) {
        Vector vectMaterialCode = LogicParser.textSentence(srcmaterial.getMatcode());
        for (int i = 0; i < vectMaterialCode.size(); i++) {
            String code = (String) vectMaterialCode.get(i);
            if ((code.equals(LogicParser.SIGN)) || (code.equals(LogicParser.ENGLISH[0]))) {
                vectMaterialCode.remove(i);
            }
        }

        Vector vectMaterialName = LogicParser.textSentence(srcmaterial.getMatname());
        for (int i = 0; i < vectMaterialName.size(); i++) {
            String name = (String) vectMaterialName.get(i);
            if ((name.equals(LogicParser.SIGN)) || (name.equals(LogicParser.ENGLISH[0]))) {
                vectMaterialName.remove(i);
            }
        }

        return getListMaterialWithMultiSupp(vectMaterialCode, vectMaterialName, srcmaterial, start, recordToGet);
    }

    /**
     * @param vtMaterialCode
     * @param vtMaterialName
     * @param srcmaterial
     * @param start
     * @param recordToGet
     * @return
     */
    public static Vector getListMaterialWithMultiSupp(Vector vtMaterialCode, Vector vtMaterialName,
            SrcMaterial srcmaterial, int start, int recordToGet) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1, 1);
        try {
            String sql = "SELECT MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_SUPPLIER_TYPE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_PRICE]
                    + " ,MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_COST]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_CODE]
                    + //" ,SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_NAME] +
                    //" ,SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_CODE] +
                    " ,CNT." + PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]
                    + " ,CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE]
                    + " FROM ((" + PstMaterial.TBL_MATERIAL + " MAT"
                    + " INNER JOIN " + PstCategory.TBL_CATEGORY + " CAT"
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + ")"
                    + // " INNER JOIN " + PstSubCategory.TBL_SUB_CATEGORY + " SCAT" +
                    // " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
                    // " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID] + ")" +
                    " INNER JOIN " + PstMatVendorPrice.TBL_MATERIAL_VENDOR_PRICE + " VND"
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " = VND." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID] + ")"
                    + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " CNT"
                    + " ON VND." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                    + " = CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];

            String strMaterialCode = "";
            if (vtMaterialCode != null && vtMaterialCode.size() > 0) {
                for (int a = 0; a < vtMaterialCode.size(); a++) {
                    if (strMaterialCode.length() == 0) {
                        strMaterialCode = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '" + vtMaterialCode.get(a) + "%')";
                    } else {
                        strMaterialCode = strMaterialCode + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '" + vtMaterialCode.get(a) + "%')";
                    }
                }
                strMaterialCode = "( " + strMaterialCode + " )";
            }

            String strMaterialName = "";
            if (vtMaterialName != null && vtMaterialName.size() > 0) {
                for (int a = 0; a < vtMaterialName.size(); a++) {
                    if (strMaterialName.length() == 0) {
                        strMaterialName = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '" + vtMaterialName.get(a) + "%')";
                    } else {
                        strMaterialName = strMaterialName + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '" + vtMaterialName.get(a) + "%')";
                    }
                }
                strMaterialName = "( " + strMaterialName + " )";
            }

            String strSupplier = "";
            if (srcmaterial.getSupplierId() != -1) {
                strSupplier = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUPPLIER_ID]
                        + " = " + srcmaterial.getSupplierId();
            }

            String strGroup = "";
            if (srcmaterial.getCategoryId() != -1) {
                strGroup = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                        + " = " + srcmaterial.getCategoryId();
            }

            String strSubCategory = "";
            if (srcmaterial.getSubCategoryId() != -1) {
                //strSubCategory = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
                //        " = " + srcmaterial.getSubCategoryId();
            }

            String whereClause = "";

            if (strMaterialCode.length() > 0) {
                whereClause = strMaterialCode;
            }

            if (strMaterialName.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialName;
                } else {
                    whereClause = whereClause + " AND " + strMaterialName;
                }
            }

            if (strSupplier.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSupplier;
                } else {
                    whereClause = whereClause + " AND " + strSupplier;
                }
            }

            if (strGroup.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroup;
                } else {
                    whereClause = whereClause + " AND " + strGroup;
                }
            }

            if (strSubCategory.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSubCategory;
                } else {
                    whereClause = whereClause + " AND " + strSubCategory;
                }
            }

            if (whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            switch (srcmaterial.getSortby()) {
                case 0:
                    sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU];
                    break;
                case 1:
                    sql = sql + " ORDER BY CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME];
                    break;
                case 2:
                    sql = sql + " ORDER BY MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME];
                    break;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (start == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + start + "," + recordToGet;
                    }
                    break;

                case DBHandler.DBSVR_POSTGRESQL:
                    if (start == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + start;
                    }
                    break;

                case DBHandler.DBSVR_SYBASE:
                    break;

                case DBHandler.DBSVR_ORACLE:
                    break;

                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    ;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                Material material = new Material();
                Category category = new Category();
                SubCategory subCategory = new SubCategory();
                ContactList cnt = new ContactList();

                material.setOID(rs.getLong(1));
                material.setSku(rs.getString(2));
                material.setBarCode(rs.getString(3));
                material.setName(rs.getString(4));
                material.setDefaultSupplierType(rs.getInt(5));
                material.setDefaultPrice(rs.getDouble(6));
                material.setDefaultCost(rs.getDouble(7));
                temp.add(material);

                category.setName(rs.getString(8));
                category.setCode(rs.getString(9));
                temp.add(category);

                //subCategory.setName(rs.getString(10));
                //subCategory.setCode(rs.getString(11));
                temp.add(subCategory);

                cnt.setCompName(rs.getString(10));
                cnt.setContactCode(rs.getString(11));
                temp.add(cnt);

                result.add(temp);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Err get list opname material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    /**
     * @param srcmaterial
     * @return
     */
    public static int getCountSearchWithMultiSupp(SrcMaterial srcmaterial) {
        Vector vectMaterialCode = LogicParser.textSentence(srcmaterial.getMatcode());
        for (int i = 0; i < vectMaterialCode.size(); i++) {
            String code = (String) vectMaterialCode.get(i);
            if ((code.equals(LogicParser.SIGN)) || (code.equals(LogicParser.ENGLISH[0]))) {
                vectMaterialCode.remove(i);
            }
        }

        Vector vectMaterialName = LogicParser.textSentence(srcmaterial.getMatname());
        for (int i = 0; i < vectMaterialName.size(); i++) {
            String name = (String) vectMaterialName.get(i);
            if ((name.equals(LogicParser.SIGN)) || (name.equals(LogicParser.ENGLISH[0]))) {
                vectMaterialName.remove(i);
            }
        }

        return getCountListMaterialWithMultiSupp(vectMaterialCode, vectMaterialName, srcmaterial);
    }

    /**
     * @param vtMaterialCode
     * @param vtMaterialName
     * @param srcmaterial
     * @return
     */
    public static int getCountListMaterialWithMultiSupp(Vector vtMaterialCode, Vector vtMaterialName, SrcMaterial srcmaterial) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            /*
             String sql = "SELECT COUNT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] +
             " ) AS CNT FROM (" + PstMaterial.TBL_MATERIAL +
             " MAT LEFT JOIN " + PstCategory.TBL_CATEGORY +
             " CAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID] +
             " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + ")" +
             " LEFT JOIN " + PstSubCategory.TBL_SUB_CATEGORY +
             " SCAT ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID] +
             " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID];
             */

            String sql = "SELECT COUNT(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + ")"
                    + " FROM ((" + PstMaterial.TBL_MATERIAL + " MAT"
                    + " LEFT JOIN " + PstCategory.TBL_CATEGORY + " CAT"
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + ")"
                    + " LEFT JOIN " + PstSubCategory.TBL_SUB_CATEGORY + " SCAT"
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID]
                    + " = SCAT." + PstSubCategory.fieldNames[PstSubCategory.FLD_SUB_CATEGORY_ID] + ")"
                    + " LEFT JOIN " + PstMatVendorPrice.TBL_MATERIAL_VENDOR_PRICE + " VND"
                    + " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " = VND." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID] + ")"
                    + " LEFT JOIN " + PstContactList.TBL_CONTACT_LIST + " CNT"
                    + " ON VND." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                    + " = CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];

            String strMaterialCode = "";
            if (vtMaterialCode != null && vtMaterialCode.size() > 0) {
                for (int a = 0; a < vtMaterialCode.size(); a++) {
                    if (strMaterialCode.length() == 0) {
                        strMaterialCode = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '" + vtMaterialCode.get(a) + "%')";
                    } else {
                        strMaterialCode = strMaterialCode + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '" + vtMaterialCode.get(a) + "%')";
                    }
                }
                strMaterialCode = "( " + strMaterialCode + " )";
            }

            String strMaterialName = "";
            if (vtMaterialName != null && vtMaterialName.size() > 0) {
                for (int a = 0; a < vtMaterialName.size(); a++) {
                    if (strMaterialName.length() == 0) {
                        strMaterialName = "(MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '" + vtMaterialName.get(a) + "%')";
                    } else {
                        strMaterialName = strMaterialName + " OR (MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '" + vtMaterialName.get(a) + "%')";
                    }
                }
                strMaterialName = "( " + strMaterialName + " )";
            }

            String strSupplier = "";
            if (srcmaterial.getSupplierId() != -1) {
                strSupplier = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUPPLIER_ID]
                        + " = " + srcmaterial.getSupplierId();
            }

            String strGroup = "";
            if (srcmaterial.getCategoryId() != -1) {
                strGroup = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                        + " = " + srcmaterial.getCategoryId();
            }

            String strSubCategory = "";
            if (srcmaterial.getSubCategoryId() != -1) {
                strSubCategory = " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SUB_CATEGORY_ID]
                        + " = " + srcmaterial.getSubCategoryId();
            }

            String whereClause = "";

            if (strMaterialCode.length() > 0) {
                whereClause = strMaterialCode;
            }

            if (strMaterialName.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strMaterialName;
                } else {
                    whereClause = whereClause + " AND " + strMaterialName;
                }
            }

            if (strSupplier.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSupplier;
                } else {
                    whereClause = whereClause + " AND " + strSupplier;
                }
            }

            if (strGroup.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strGroup;
                } else {
                    whereClause = whereClause + " AND " + strGroup;
                }
            }

            if (strSubCategory.length() > 0) {
                if (whereClause.length() == 0) {
                    whereClause = whereClause + strSubCategory;
                } else {
                    whereClause = whereClause + " AND " + strSubCategory;
                }
            }

            if (whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Count get list material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * untuk pengecekan barang apakah sudah pernah terjadi transaksi jika ya
     * maka return false, sebaliknya
     *
     * @return
     */
    public static boolean readyDataToDelete(long materialId) {
        boolean status = true;
        try {
            // pengecekan di item PO
            String where = PstPurchaseOrderItem.fieldNames[PstPurchaseOrderItem.FLD_MATERIAL_ID] + "=" + materialId;
            Vector vlist = PstPurchaseOrderItem.list(0, 0, where, "");
            if (vlist != null && vlist.size() > 0) {
                status = false;
            } else {
                // pengecekan di penerimaan
                where = PstMatReceiveItem.fieldNames[PstMatReceiveItem.FLD_MATERIAL_ID] + "=" + materialId;
                vlist = PstMatReceiveItem.list(0, 0, where, "");
                if (vlist != null && vlist.size() > 0) {
                    status = false;
                } else {
                    // pengecekan di return
                    where = PstMatReturnItem.fieldNames[PstMatReturnItem.FLD_MATERIAL_ID] + "=" + materialId;
                    vlist = PstMatReturnItem.list(0, 0, where, "");
                    if (vlist != null && vlist.size() > 0) {
                        status = false;
                    } else {
                        // pengecekan di dispatch
                        where = PstMatDispatchItem.fieldNames[PstMatDispatchItem.FLD_MATERIAL_ID] + "=" + materialId;
                        vlist = PstMatDispatchItem.list(0, 0, where, "");
                        if (vlist != null && vlist.size() > 0) {
                            status = false;
                        } else {
                            // pengecekan di costing
                            where = PstMatCostingItem.fieldNames[PstMatCostingItem.FLD_MATERIAL_ID] + "=" + materialId;
                            vlist = PstMatCostingItem.list(0, 0, where, "");
                            if (vlist != null && vlist.size() > 0) {
                                status = false;
                            } else {
                                // pengecekan di opname barang
                                where = PstMatStockOpnameItem.fieldNames[PstMatStockOpnameItem.FLD_MATERIAL_ID] + "=" + materialId;
                                vlist = PstMatStockOpnameItem.list(0, 0, where, "");
                                if (vlist != null && vlist.size() > 0) {
                                    status = false;
                                } else {
                                    // pengecekan di penjualan barang
                                    where = PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + "=" + materialId;
                                    vlist = PstBillDetail.list(0, 0, where, "");
                                    if (vlist != null && vlist.size() > 0) {
                                        status = false;
                                    }
                                    /*else {
                                     // pengecekan di stock barang
                                     where = PstMaterialStock.fieldNames[PstMaterialStock.FLD_MATERIAL_UNIT_ID] + "=" + materialId;
                                     vlist = PstMaterialStock.list(0, 0, where, "");
                                     if (vlist != null && vlist.size() > 0) {
                                     status = false;
                                     }
                                     }*/

                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
        }
        return status;
    }

    /**
     * @return
     */
    public static Vector getDoubleGoodsOnOpname() {
        DBResultSet dbrs = null;
        Vector result = new Vector(1, 1);
        try {
            String sql = "SELECT SO.STOCK_OPNAME_NUMBER, SOI.MATERIAL_ID, MAT. NAME "
                    + "FROM POS_STOCK_OPNAME AS SO "
                    + "INNER JOIN POS_STOCK_OPNAME_ITEM SOI "
                    + "ON SO.STOCK_OPNAME_ID = SOI.STOCK_OPNAME_ID "
                    + "INNER JOIN POS_MATERIAL MAT "
                    + "ON SOI.MATERIAL_ID = MAT.MATERIAL_ID "
                    + "ORDER BY SOI.MATERIAL_ID";
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector vectTemp = new Vector(1, 1);
                vectTemp.add(rs.getString(1));
                vectTemp.add(rs.getString(2));
                vectTemp.add(rs.getString(3));

                result.add(vectTemp);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Count get list material : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /* get sales price from price mapping */
    public static double getPriceSale(Material material) {
        double priceSale = 0;
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT (PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE]
                    + " * STD." + PstStandartRate.fieldNames[PstStandartRate.FLD_SELLING_RATE]
                    + ") FROM " + PstPriceTypeMapping.TBL_POS_PRICE_TYPE_MAPPING + " AS PRC "
                    + " INNER JOIN " + PstStandartRate.TBL_POS_STANDART_RATE + " AS STD "
                    + " ON PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_STANDART_RATE_ID]
                    + " = STD." + PstStandartRate.fieldNames[PstStandartRate.FLD_STANDART_RATE_ID]
                    + " INNER JOIN " + PstCurrencyType.TBL_POS_CURRENCY_TYPE + " AS CURR "
                    + " ON STD." + PstStandartRate.fieldNames[PstStandartRate.FLD_CURRENCY_TYPE_ID]
                    + " = CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]
                    + " INNER JOIN " + PstPriceType.TBL_POS_PRICE_TYPE + " AS PRT "
                    + " ON PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE_TYPE_ID]
                    + " = PRT." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID]
                    + " INNER JOIN " + PstMemberGroup.TBL_MEMBER_GROUP + " AS MBR "
                    + " ON PRT." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID]
                    + " = MBR." + PstMemberGroup.fieldNames[PstMemberGroup.FLD_PRICE_TYPE_ID]
                    + " WHERE PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_MATERIAL_ID]
                    + " = " + material.getOID()
                    + " AND CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_TAB_INDEX]
                    + " = 1 "
                    + " AND MBR." + PstMemberGroup.fieldNames[PstMemberGroup.FLD_GROUP_TYPE]
                    + " = " + PstMemberGroup.UMUM;
            System.out.println("com.dimata.posbo.session.masterdata.SessMaterial.getPriceSale() :" +sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                priceSale = rs.getDouble(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err price sale : " + e.toString());
            e.printStackTrace();
        } finally {
            DBResultSet.close(dbrs);
            return priceSale;
        }
    }

    /**
     * get sales price from price mapping update opie-eyek 20130805
     */
    public static double getPriceSaleInTypePrice(Material material, long oidPriceType) {
        double priceSale = 0;
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT (PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE]
                    + " * STD." + PstStandartRate.fieldNames[PstStandartRate.FLD_SELLING_RATE]
                    + ") FROM " + PstPriceTypeMapping.TBL_POS_PRICE_TYPE_MAPPING + " AS PRC "
                    + " INNER JOIN " + PstStandartRate.TBL_POS_STANDART_RATE + " AS STD "
                    + " ON PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_STANDART_RATE_ID]
                    + " = STD." + PstStandartRate.fieldNames[PstStandartRate.FLD_STANDART_RATE_ID]
                    + " INNER JOIN " + PstCurrencyType.TBL_POS_CURRENCY_TYPE + " AS CURR "
                    + " ON STD." + PstStandartRate.fieldNames[PstStandartRate.FLD_CURRENCY_TYPE_ID]
                    + " = CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]
                    + " INNER JOIN " + PstPriceType.TBL_POS_PRICE_TYPE + " AS PRT "
                    + " ON PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE_TYPE_ID]
                    + " = PRT." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID]
                    + " INNER JOIN " + PstMemberGroup.TBL_MEMBER_GROUP + " AS MBR "
                    + " ON PRT." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID]
                    + " = MBR." + PstMemberGroup.fieldNames[PstMemberGroup.FLD_PRICE_TYPE_ID]
                    + " WHERE PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_MATERIAL_ID]
                    + " = " + material.getOID()
                    + " AND CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_TAB_INDEX]
                    + " = 1 "
                    + " AND PRC." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID]
                    + " = '" + oidPriceType + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                priceSale = rs.getDouble(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err price sale : " + e.toString());
            e.printStackTrace();
        } finally {
            DBResultSet.close(dbrs);
            return priceSale;
        }
    }

    public static Hashtable<String, PriceTypeMapping> getPriceSaleInTypePriceMember(SrcMaterial srcmaterial, Material material, long oidmatera) {

        Hashtable<String, PriceTypeMapping> priceSale = null;
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE]
                    + ",PRT." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID]
                    + ",PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_MATERIAL_ID]
                    + ",PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_STANDART_RATE_ID]
                    + " FROM " + PstPriceTypeMapping.TBL_POS_PRICE_TYPE_MAPPING + " AS PRC "
                    + " INNER JOIN " + PstStandartRate.TBL_POS_STANDART_RATE + " AS STD "
                    + " ON PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_STANDART_RATE_ID]
                    + " = STD." + PstStandartRate.fieldNames[PstStandartRate.FLD_STANDART_RATE_ID]
                    + " INNER JOIN " + PstCurrencyType.TBL_POS_CURRENCY_TYPE + " AS CURR "
                    + " ON STD." + PstStandartRate.fieldNames[PstStandartRate.FLD_CURRENCY_TYPE_ID]
                    + " = CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]
                    + " INNER JOIN " + PstPriceType.TBL_POS_PRICE_TYPE + " AS PRT "
                    + " ON PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE_TYPE_ID]
                    + " = PRT." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID];

            String strMaterialId = "";
            if (srcmaterial.getPriceTypeId() != null && srcmaterial.getPriceTypeId().size() > 0) {
                for (int b = 0; b < srcmaterial.getPriceTypeId().size(); b++) {
                    if (strMaterialId.length() != 0) {
                        strMaterialId = strMaterialId + " OR " + "(PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE_TYPE_ID] + " =" + srcmaterial.getPriceTypeId().get(b) + ")";
                    } else {
                        strMaterialId = "(PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE_TYPE_ID] + " =" + srcmaterial.getPriceTypeId().get(b) + ")";
                    }
                }

            }

            String whereClause = "";
            if (material != null && material.getOID() != 0) {
                sql += " WHERE PRC." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_MATERIAL_ID] + "=" + material.getOID();
            } else {
                sql += " WHERE (1=1)";
            }

            //where strMaterialId
            if (strMaterialId.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause = " AND ( " + strMaterialId + " )";
                } else {
                    whereClause = " ( " + strMaterialId + ")";
                }
            }

            if (whereClause.length() > 0) {
                sql = sql + " AND " + whereClause;
            }

            //sql = sql + " GROUP BY "+ "PRT." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID];
            //System.out.println("SQL Lap.DiscountQtyMapping : " +sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                if (priceSale == null) {
                    priceSale = new Hashtable();
                }
                PriceTypeMapping priceTypeMapping = new PriceTypeMapping();
                priceTypeMapping.setMaterialId(rs.getLong("PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_MATERIAL_ID]));
                priceTypeMapping.setPriceTypeId(rs.getLong("PRT." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID]));
                priceTypeMapping.setStandartRateId(rs.getLong("PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_STANDART_RATE_ID]));
                priceTypeMapping.setPrice(rs.getDouble("PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_PRICE]));

                String keyPrice = "" + rs.getLong("PRT." + PstPriceType.fieldNames[PstPriceType.FLD_PRICE_TYPE_ID]) + "_" + rs.getLong("PRC." + PstPriceTypeMapping.fieldNames[PstPriceTypeMapping.FLD_STANDART_RATE_ID]);

                priceSale.put(keyPrice, priceTypeMapping);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err price sale : " + e.toString());
            e.printStackTrace();
        } finally {
            DBResultSet.close(dbrs);
            return priceSale;
        }
    }

    /**
     * Fungsi ini digunakan untuk pengecekan data qty po berdasarkan oid
     * material
     *
     * @param list
     * @param oidMaterial
     * @return
     */
    public static double getOidMaterialByVector(Vector list, long oidMaterial) {
        double qty = 0;
        try {
            if (list != null && list.size() > 0) {
                for (int k = 0; k < list.size(); k++) {
                    Vector v1 = (Vector) list.get(k);
                    long oidmat = Long.parseLong((String) v1.get(0));
                    if (oidMaterial == oidmat) {
                        qty = Double.parseDouble((String) v1.get(1));
                        break;
                    }
                }
            }
        } catch (Exception e) {
        }
        return qty;
    }

    public static Vector getListItemForPO(Vector v1) {
        DBResultSet dbrs = null;
        Vector v2 = new Vector();
        try {
            String sql = "SELECT " + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID];
            sql += ", " + PstMaterial.fieldNames[PstMaterial.FLD_SKU];
            sql += ", " + PstMaterial.fieldNames[PstMaterial.FLD_NAME];
            sql += ", " + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_STOCK_UNIT_ID];
            sql += " FROM " + PstMaterial.TBL_MATERIAL;
            String where = "";
            if (v1 != null && v1.size() > 0) {
                for (int i = 0; i < v1.size(); i++) {
                    Vector list = (Vector) v1.get(i);
                    long materialOid = Long.parseLong((String) list.get(0));
                    if (where.length() > 0) {
                        where = where + " OR (" + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + "=" + materialOid + ")";
                    } else {
                        where = "(" + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + "=" + materialOid + ")";
                    }
                }
            }

            if (where.length() > 0) {
                sql = sql + " WHERE " + where;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector v3 = new Vector();
                Material material = new Material();
                material.setOID(rs.getLong(PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]));
                material.setSku(rs.getString(PstMaterial.fieldNames[PstMaterial.FLD_SKU]));
                material.setName(rs.getString(PstMaterial.fieldNames[PstMaterial.FLD_NAME]));
                material.setDefaultStockUnitId(rs.getLong(PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_STOCK_UNIT_ID]));
                v3.add(material);

                double qty = getOidMaterialByVector(v1, material.getOID());
                v3.add(String.valueOf(qty));

                v2.add(v3);
            }
        } catch (Exception e) {
            System.out.println("Errr getListItemForPO : " + e.toString());
        }
        return v2;
    }

    public static Vector getListItemForPRMinimumStock(Vector v1) {
        DBResultSet dbrs = null;
        Vector v2 = new Vector();
        try {
            String sql = "SELECT PM." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID];
            sql += ", PM." + PstMaterial.fieldNames[PstMaterial.FLD_SKU];
            sql += ", PM." + PstMaterial.fieldNames[PstMaterial.FLD_NAME];
            sql += ", PM." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_STOCK_UNIT_ID];
            sql += ", UN." + PstUnit.fieldNames[PstUnit.FLD_CODE];
            sql += " FROM " + PstMaterial.TBL_MATERIAL + " AS PM ";
            sql += " LEFT JOIN " + PstUnit.TBL_P2_UNIT + " AS UN ON UN." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID] + "=PM." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_STOCK_UNIT_ID];
            String where = "";
            if (v1 != null && v1.size() > 0) {
                for (int i = 0; i < v1.size(); i++) {
                    Vector list = (Vector) v1.get(i);
                    long materialOid = Long.parseLong((String) list.get(0));
                    if (where.length() > 0) {
                        where = where + " OR (PM." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + "=" + materialOid + ")";
                    } else {
                        where = "(PM." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + "=" + materialOid + ")";
                    }
                }
            }

            if (where.length() > 0) {
                sql = sql + " WHERE " + where;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector v3 = new Vector();
                Material material = new Material();
                material.setOID(rs.getLong("PM." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]));
                material.setSku(rs.getString("PM." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]));
                material.setName(rs.getString("PM." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]));
                material.setDefaultStockUnitId(rs.getLong("PM." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_STOCK_UNIT_ID]));
                v3.add(material);

                double qty = getOidMaterialByVector(v1, material.getOID());
                v3.add(String.valueOf(qty));

                Unit unit = new Unit();
                unit.setCode(rs.getString("UN." + PstUnit.fieldNames[PstUnit.FLD_CODE]));
                v3.add(unit);

                v2.add(v3);
            }
        } catch (Exception e) {
            System.out.println("Errr getListItemForPO : " + e.toString());
        }
        return v2;
    }

    /**
     * @param srcDiscountQtyMapping
     * @return
     * @created and modified by Mirah
     */
    public static Vector getDiscountQtyMapping(SrcMaterial srcmaterial, long materialId) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1, 1);
        try {
            String sql = "SELECT "
                    + " DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_DISCOUNT_TYPE_ID]
                    + ", DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_CURRENCY_TYPE_ID]
                    + ", DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_LOCATION_ID]
                    + ", DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_MATERIAL_ID]
                    + //" CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_CODE] +
                    //", DISC." + PstDiscountType.fieldNames[PstDiscountType.FLD_CODE] +
                    //", LOC." + PstLocation.fieldNames[PstLocation.FLD_CODE] +
                    //", MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] +
                    ", DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_START_QTY]
                    + ", DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_TO_QTY]
                    + ", DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_DISCOUNT_VALUE]
                    + ", DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_DISCOUNT_TYPE]
                    + " FROM " + PstDiscountQtyMapping.TBL_POS_DISCOUNT_QTY_MAPPING + " DISCQTY "
                    + " INNER JOIN " + com.dimata.common.entity.payment.PstDiscountType.TBL_POS_DISCOUNT_TYPE + " DISC "
                    + " ON DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_DISCOUNT_TYPE_ID]
                    + " = DISC." + com.dimata.common.entity.payment.PstDiscountType.fieldNames[PstDiscountType.FLD_DISCOUNT_TYPE_ID]
                    + " INNER JOIN " + PstCurrencyType.TBL_POS_CURRENCY_TYPE + " CURR "
                    + " ON DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_CURRENCY_TYPE_ID]
                    + " = CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]
                    + " INNER JOIN " + PstLocation.TBL_P2_LOCATION + " LOC "
                    + " ON DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_LOCATION_ID]
                    + " = LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID]
                    + " INNER JOIN " + PstMaterial.TBL_MATERIAL + " MAT "
                    + " ON DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_MATERIAL_ID]
                    + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID];

            // String strMaterialId = "";
            //strMaterialId = " DISCQTY. "+PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_MATERIAL_ID]+"="+materialId;
            String strMemberTypeId = "";
            if (srcmaterial.getMemberTypeId() != null && srcmaterial.getMemberTypeId().size() > 0) {
                for (int b = 0; b < srcmaterial.getMemberTypeId().size(); b++) {
                    if (strMemberTypeId.length() != 0) {
                        strMemberTypeId = strMemberTypeId + " OR " + "(DISCQTY ." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_DISCOUNT_TYPE_ID] + " =" + srcmaterial.getMemberTypeId().get(b) + ")";
                    } else {
                        strMemberTypeId = "(DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_DISCOUNT_TYPE_ID] + " =" + srcmaterial.getMemberTypeId().get(b) + ")";
                    }
                }
            }

            String strDate = "";
            if ((srcmaterial.getDateFrom() != null) && (srcmaterial.getDateTo() != null)) {
                String startDate = Formater.formatDate(srcmaterial.getDateFrom(), "yyyy-MM-dd");
                String endDate = Formater.formatDate(srcmaterial.getDateTo(), "yyyy-MM-dd");
                strDate = " DISCQTY." + PstMaterial.fieldNames[PstMaterial.FLD_UPDATE_DATE] + " BETWEEN '" + startDate + " 00:00:01' AND '" + endDate + " 23:23:59'";
            }

            String whereClause = "";

            //where strMemberTypeId
            if (strMemberTypeId.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause = whereClause + " AND " + strMemberTypeId;
                } else {
                    whereClause = whereClause + strMemberTypeId;
                }
            }

            if (strDate.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause = whereClause + " AND " + strDate;
                } else {
                    whereClause = whereClause + strDate;
                }
            }

            sql += " WHERE DISCQTY. " + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_MATERIAL_ID] + "=" + materialId;

            if (whereClause.length() > 0) {
                sql = sql + " AND " + whereClause;
            }

            sql = sql + " ORDER BY LOC." + PstLocation.fieldNames[PstLocation.FLD_CODE]
                    + ", DISC." + com.dimata.common.entity.payment.PstDiscountType.fieldNames[PstDiscountType.FLD_CODE]
                    + ", CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_CODE]
                    + ", DISCQTY." + PstDiscountQtyMapping.fieldNames[PstDiscountQtyMapping.FLD_DISCOUNT_TYPE];

            System.out.println("SQL Lap.DiscountQtyMapping : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                DiscountQtyMapping discountqtymapping = new DiscountQtyMapping();

                discountqtymapping.setDiscountTypeId(rs.getLong(1));
                discountqtymapping.setCurrencyTypeId(rs.getLong(2));
                discountqtymapping.setLocationId(rs.getLong(3));
                discountqtymapping.setMaterialId(rs.getLong(4));
                discountqtymapping.setStartQty(rs.getDouble(5));
                discountqtymapping.setToQty(rs.getDouble(6));
                discountqtymapping.setDiscountValue(rs.getDouble(7));
                discountqtymapping.setDiscountType(rs.getInt(8));
                result.add(discountqtymapping);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println("Err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    public static Vector getListSales(String where) {
        DBResultSet dbrs = null;
        Vector vListReturn = new Vector(1, 1);
        Vector listCurrStandard = PstStandartRate.listCurrStandard(1);
        long standardRate = 0;
        for (int i = 0; i < listCurrStandard.size(); i++) {
            Vector temp = (Vector) listCurrStandard.get(i);
            CurrencyType currencyType = (CurrencyType) temp.get(0);
            StandartRate sRate = (StandartRate) temp.get(1);
            standardRate = sRate.getOID();
        }
        try {
            String sql = "SELECT COUNT(MATERIAL_ID) AS CNT, -1 AS STATUS FROM pos_material WHERE AVERAGE_PRICE='0' AND EDIT_MATERIAL !=4 ";
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector vlist = new Vector(1, 1);
                vlist.add(rs.getInt("CNT"));
                vlist.add(rs.getInt("STATUS"));
                vlist.add("Item");
                vListReturn.add(vlist);
            }
            rs.close();

            if (standardRate != 0) {
                String ordPrice = PstPriceType.fieldNames[PstPriceType.FLD_INDEX]; //PstPriceType.fieldNames[PstPriceType.FLD_CODE]+", "+PstPriceType.fieldNames[PstPriceType.FLD_NAME];
                Vector listPriceType = PstPriceType.list(0, 0, "", ordPrice);

                if (listPriceType != null && listPriceType.size() > 0) {
                    for (int i = 0; i < listPriceType.size(); i++) {
                        PriceType prType = (PriceType) listPriceType.get(i);
                        sql = "SELECT COUNT(pm.MATERIAL_ID) AS CNT, 1 AS STATUS FROM pos_material pm "
                                + "INNER JOIN pos_price_type_mapping AS ppt "
                                + "ON ppt.MATERIAL_ID=pm.MATERIAL_ID WHERE  "
                                + "pm.EDIT_MATERIAL !=4 AND "
                                + "ppt.PRICE_TYPE_ID='" + prType.getOID() + "' "
                                + "AND  "
                                + "ppt.STANDART_RATE_ID='" + standardRate + "' "
                                + "AND "
                                + "pm.AVERAGE_PRICE > ppt.PRICE AND pm.EDIT_MATERIAL !=4";
                        dbrs = DBHandler.execQueryResult(sql);
                        ResultSet rsx = dbrs.getResultSet();
                        while (rsx.next()) {
                            Vector vlist = new Vector(1, 1);
                            vlist.add(rsx.getInt("CNT"));
                            vlist.add(rsx.getInt("STATUS"));
                            vlist.add("" + prType.getName());
                            vListReturn.add(vlist);
                        }
                        rsx.close();
                    }
                }
            }

            return vListReturn;
        } catch (Exception e) {
            System.out.println("SessMatReturn.getListReturnMaterialInformation() err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector(1, 1);
    }

    public static String setItemNameForLitama(long oidMaterial) {
        String itemName = "";
        try {
            Material mat = new Material();
            Category cat = new Category();
            Color col = new Color();

            if (oidMaterial > 0 && PstMaterial.checkOID(oidMaterial)) {
                mat = PstMaterial.fetchExc(oidMaterial);
            }
            if (mat.getCategoryId() > 0 && PstCategory.checkOID(mat.getCategoryId())) {
                cat = PstCategory.fetchExc(mat.getCategoryId());
            }
            if (mat.getPosColor() > 0 && PstColor.checkOID(mat.getPosColor())) {
                col = PstColor.fetchExc(mat.getPosColor());
            }

            switch (mat.getMaterialJenisType()) {
                case Material.MATERIAL_TYPE_EMAS:
                    itemName = "" + cat.getName() + " " + col.getColorName() + " " + mat.getName();
                    break;
                case Material.MATERIAL_TYPE_BERLIAN:
                    itemName = "" + cat.getName() + " " + col.getColorName() + " Berlian " + mat.getName();
                    break;
                case Material.MATERIAL_TYPE_EMAS_LANTAKAN:
                    itemName = "" + mat.getName();
                    break;
                default:
                    itemName = "" + mat.getName();
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return itemName;
    }

    public static Vector listMaterial(int start, int recordToGet, String whereClause, String order, int lokasi, int supplier) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT DISTINCT"
                    + " MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + ", MAT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
                    + ", MAT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
                    + ", MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
                    + ", MAT." + PstMaterial.fieldNames[PstMaterial.FLD_AVERAGE_PRICE]
                    + ", MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CURR_BUY_PRICE]
                    + ", MAT." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_COST]
                    + ", MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
                    + ", MERK." + PstMerk.fieldNames[PstMerk.FLD_NAME]
                    + ", UNIT." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
                    + ", UNIT." + PstUnit.fieldNames[PstUnit.FLD_NAME]
                    + ", CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
                    + ", CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME];
            if (supplier == 1) {
                sql += ", CON." + PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]
                        + ", CON." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            }

            sql += " FROM "
                    + "" + PstMaterial.TBL_MATERIAL + " AS MAT"
                    + " INNER JOIN " + PstCategory.TBL_CATEGORY + " AS CAT"
                    + " ON CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
                    + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " INNER JOIN " + PstUnit.TBL_P2_UNIT + " AS UNIT"
                    + " ON UNIT." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
                    + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BUY_UNIT_ID]
                    + " INNER JOIN " + PstMerk.TBL_MAT_MERK + " AS MERK"
                    + " ON MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
                    + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID];
            if (lokasi == 1) {
                sql += " INNER JOIN " + PstMatMappLocation.TBL_POS_MAT_LOCATION + " AS LOC"
                        + " ON LOC." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_MATERIAL_ID]
                        + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID];
            }

            if (supplier == 1) {
                sql += " INNER JOIN " + PstMatVendorPrice.TBL_MATERIAL_VENDOR_PRICE + " AS VENDOR"
                        + " ON VENDOR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID]
                        + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                        + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " AS CON"
                        + " ON CON." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]
                        + " = VENDOR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + "";
            }

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            if ((start == 0) && (recordToGet == 0)) {
                sql = sql + "";  //nothing to do
            } else {
                sql = sql + " LIMIT " + start + "," + recordToGet;
            }

            //System.out.println(sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector data = new Vector();
                Material mat = new Material();
                Unit unit = new Unit();
                Category cat = new Category();
                Merk merk = new Merk();
                ContactList con = new ContactList();
                MatMappLocation loc = new MatMappLocation();

                mat.setOID(rs.getLong(PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]));
                mat.setName(rs.getString(PstMaterial.fieldNames[PstMaterial.FLD_NAME]));
                mat.setSku(rs.getString(PstMaterial.fieldNames[PstMaterial.FLD_SKU]));
                mat.setBarCode(rs.getString(PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]));
                mat.setCurrBuyPrice(rs.getDouble(PstMaterial.fieldNames[PstMaterial.FLD_CURR_BUY_PRICE]));
                mat.setDefaultCost(rs.getDouble(PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_COST]));
                mat.setAveragePrice(rs.getDouble(PstMaterial.fieldNames[PstMaterial.FLD_AVERAGE_PRICE]));
                data.add(mat);

                unit.setOID(rs.getLong(PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]));
                unit.setName(rs.getString("UNIT." + PstUnit.fieldNames[PstUnit.FLD_NAME]));
                data.add(unit);

                cat.setOID(rs.getLong(PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]));
                cat.setName(rs.getString("CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]));
                data.add(cat);

                merk.setOID(rs.getLong(PstMerk.fieldNames[PstMerk.FLD_MERK_ID]));
                merk.setName(rs.getString("MERK." + PstMerk.fieldNames[PstMerk.FLD_NAME]));
                data.add(merk);

                lists.add(data);

            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return lists;
    }

    public static int getCountMaterial(String whereClause, int lokasi, int supplier) {
        DBResultSet dbrs = null;
        try {
            int count = 0;
            String sql = " SELECT DISTINCT COUNT( MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + " ) "
                    + " FROM "
                    + "" + PstMaterial.TBL_MATERIAL + " AS MAT"
                    + " INNER JOIN " + PstCategory.TBL_CATEGORY + " AS CAT"
                    + " ON CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
                    + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " INNER JOIN " + PstUnit.TBL_P2_UNIT + " AS UNIT"
                    + " ON UNIT." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
                    + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_BUY_UNIT_ID]
                    + " INNER JOIN " + PstMerk.TBL_MAT_MERK + " AS MERK"
                    + " ON MERK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
                    + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID];
            if (lokasi == 1) {
                sql += " INNER JOIN " + PstMatMappLocation.TBL_POS_MAT_LOCATION + " AS LOC"
                        + " ON LOC." + PstMatMappLocation.fieldNames[PstMatMappLocation.FLD_MATERIAL_ID]
                        + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID];
            }

            if (supplier == 1) {
                sql += " INNER JOIN " + PstMatVendorPrice.TBL_MATERIAL_VENDOR_PRICE + " AS VENDOR"
                        + " ON VENDOR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID]
                        + " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                        + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " AS CON"
                        + " ON CON." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]
                        + " = VENDOR." + PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]
                        + "";
            }
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

//            System.out.println(sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                count = rs.getInt(1);
            }

            return count;
        } catch (Exception exc) {
            System.out.println("getCount " + exc);
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }

    }

}










