/* Generated by Together */

package com.dimata.posbo.session.masterdata;

/* project package */
//import com.dimata.hanoman.db.DBException;
//import com.dimata.hanoman.db.DBHandler;
//import com.dimata.hanoman.entity.search.*;
//import com.dimata.posbo.masterdata.form.search.*;

public class SessMaterialPrice {

    /**
    * this method used to get average price per period
    */
    /*public static Vector getAveragePricePeriod(long periodId){
         PstMatStockPeriode pstMatStockPeriode = new PstMatStockPeriode();
         MatStockPeriode matStockPeriode = new MatStockPeriode();
         try{
            matStockPeriode = pstMatStockPeriode.fetchExc(periodId);
         }catch(Exception e){
            System.out.println("SessMaterialPrice.fetchExcPeriode() err : "+e.toString());
         }

         if(matStockPeriode.getOID()!=0){
             Date startDate = matStockPeriode.getStartDate();
             Date dueDate = matStockPeriode.getEndDate();
             String strStartDate = "\"" + Formater.formatDate(startDate,"yyyy-MM-dd") + "\"";
             String strDueDate = "\"" + Formater.formatDate(dueDate,"yyyy-MM-dd") + "\"";
	 		 DBResultSet dbrs = null;
	         Vector result = new Vector(1,1);
	         try{
                String sql = "SELECT DISTINCT ITEM." + PstMaterialReceiveItem.fieldNames[PstMaterialReceiveItem.FLD_MATERIAL_ID] + ", " +
                             " SUM(ITEM." + PstMaterialReceiveItem.fieldNames[PstMaterialReceiveItem.FLD_QUANTITY_RECEIVE] + "*" +
                             " ITEM." + PstMaterialReceiveItem.fieldNames[PstMaterialReceiveItem.FLD_ITEM_REAL_PRICE]+")" +
                             "/SUM(ITEM." + PstMaterialReceiveItem.fieldNames[PstMaterialReceiveItem.FLD_QUANTITY_RECEIVE]+")" +
                             " FROM " + PstMaterialReceiveItem.TBL_MATERIAL_REC_ITEM + " AS ITEM " +
                             " INNER JOIN " + PstMaterialReceive.TBL_MATERIAL_REC + " AS REC " +
                             " ON ITEM." + PstMaterialReceiveItem.fieldNames[PstMaterialReceiveItem.FLD_MATERIAL_REC_ID] +
                             " = REC." + PstMaterialReceive.fieldNames[PstMaterialReceive.FLD_MATERIAL_REC_ID] +
                             " INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS MAT " +
                             " ON ITEM." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] +
                             " = MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] +
                             " INNER JOIN " + PstMaterialGroup.TBL_MATERIAL_GROUP + " AS GRP " +
                             " ON MAT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_GROUP_ID] +
                             " = GRP." + PstMaterialGroup.fieldNames[PstMaterialGroup.FLD_MATERIAL_GROUP_ID] +
                             " WHERE GRP." + PstMaterialGroup.fieldNames[PstMaterialGroup.FLD_STOCK_TYPE] +
                             " = " + PstMaterialGroup.INT_STOCKABLE +
                             " AND REC." + PstMaterialReceive.fieldNames[PstMaterialReceive.FLD_RECEIVE_DATE] +
                             " BETWEEN " + strStartDate + " AND " + strDueDate +
                             " GROUP BY ITEM." + PstMaterialReceiveItem.fieldNames[PstMaterialReceiveItem.FLD_MATERIAL_ID];
	  			System.out.println("SessStockPeriod.getAveragePricePeriod() sql : "+sql);
				dbrs = DBHandler.execQueryResult(sql);
	            ResultSet rs = dbrs.getResultSet();
	            while(rs.next()){
                    MaterialPrice materialPrice = new MaterialPrice();
                    materialPrice.setMatStockPeriodeId(periodId);
                    materialPrice.setMaterialId(rs.getLong(1));
                    materialPrice.setAveragePrice(rs.getDouble(2));
                    result.add(materialPrice);
	            }
			 }catch(Exception e){
	           	System.out.println("SessStockPeriod.getLastPeriod() exc : "+e.toString());
	         }finally{
	        	DBResultSet.close(dbrs);
	            return result;
			 }
         }
         return new Vector();
    }*/

    /**
    * this method used to get material price based on specify periode
    */
    /*public static Vector getMaterialPrice(long lastPeriodId, long newPeriodId){
 		 DBResultSet dbrs = null;
         Vector result = new Vector(1,1);
         try{
               String sql = "SELECT " + PstMaterialPrice.fieldNames[PstMaterialPrice.FLD_MATERIAL_ID] + ", " +
							PstMaterialPrice.fieldNames[PstMaterialPrice.FLD_AVERAGE_PRICE] + ", " +
                            PstMaterialPrice.fieldNames[PstMaterialPrice.FLD_LATES_PRICE] + ", " +
                            PstMaterialPrice.fieldNames[PstMaterialPrice.FLD_LATES_PRICE_USD] + ", " +
                            PstMaterialPrice.fieldNames[PstMaterialPrice.FLD_AVERAGE_PRICE_USD] +
                            " FROM " + PstMaterialPrice.TBL_MATERIAL_PRICE +
                            " WHERE " + PstMaterialPrice.fieldNames[PstMaterialPrice.FLD_MAT_STOCK_PERIODE_ID] +
                            " = " + lastPeriodId;
  			System.out.println("SessMaterialPrice.getMaterialPrice() sql : "+sql);
			dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
                   MaterialPrice materialPrice = new MaterialPrice();
                   materialPrice.setMatStockPeriodeId(newPeriodId);
                   materialPrice.setMaterialId(rs.getLong(1));
                   materialPrice.setAveragePrice(rs.getDouble(2));
                   materialPrice.setLatesPrice(rs.getDouble(3));
                   materialPrice.setLatesPriceUsd(rs.getDouble(4));
                   materialPrice.setAveragePriceUsd(rs.getDouble(5));
                   result.add(materialPrice);
            }
		 }catch(Exception e){
           	System.out.println("SessMaterialPrice.getMaterialPrice() exc : "+e.toString());
         }finally{
        	DBResultSet.close(dbrs);
            return result;
		 }
    }*/

    /**
    * this method used to testing
    */
/*    public static void main(String args[]){
        Vector vectMaterialPrice = getAveragePricePeriod(504404197420651111L);
        if(vectMaterialPrice!=null && vectMaterialPrice.size()>0){
			for(int i=0; i<vectMaterialPrice.size(); i++){
                MaterialPrice matPrice = (MaterialPrice)vectMaterialPrice.get(i);
                System.out.println("periodeOid   : "+matPrice.getMatStockPeriodeId());
                System.out.println("materialOid  : "+matPrice.getMaterialId());
                System.out.println("averagePrice : "+matPrice.getAveragePrice());
            }
        }else{
            System.out.println("Kosong");
        }
    }*/

}
