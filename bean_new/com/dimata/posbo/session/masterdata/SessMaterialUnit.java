/* Generated by Together */

package com.dimata.posbo.session.masterdata;
import java.util.*;
/* project package */
//import com.dimata.hanoman.db.DBException;
//import com.dimata.hanoman.db.DBHandler;
import com.dimata.posbo.entity.masterdata.*;

public class SessMaterialUnit {

    public static final int SEARCH_ALL = 0;
    public static final int SEARCH_ASCENDANT = 1;
    public static final int SEARCH_DESCENDANT = 2;

    /**
     *
     * @param unitId
     * @return
     */
    public static boolean readyDataToDelete(long unitId) {
        boolean status = true;
        try {
            String where = PstUnit.fieldNames[PstUnit.FLD_BASE_UNIT_ID] + "=" + unitId;
            Vector vlist = PstUnit.list(0, 0, where, "");
            if (vlist != null && vlist.size() > 0) {
                status = false;
            } else {
                where = PstMaterial.fieldNames[PstMaterial.FLD_BUY_UNIT_ID] + "=" + unitId +
                        " OR " + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_STOCK_UNIT_ID] + "=" + unitId;
                vlist = PstMaterial.list(0, 0, where, "");
                if (vlist != null && vlist.size() > 0) {
                    status = false;
                }
            }
        } catch (Exception e) {
            System.out.println("SessMaterialUnit - readyDataToDelete : " + e.toString());
        }
        return status;
    }


    /**
     * this method used to fetch unit name
     * @param oidVendor --> selected vendor object Id
     */
    /*
public static String getUnitName(long oidVendor){
    MatUnit matUnit = new MatUnit();
    String result = "";
    try{
        matUnit = PstMatUnit.fetchExc(oidVendor);
        result = matUnit.getUnitName();
    }catch(Exception e){}

    return result;
}
     */

    /**
     * This method used to get all appropriate "materialUnit object" which will use in base unit
     * @param materialUnit --> selected materialUnit object
     */
    /*
    public static Vector listAllApropriateBaseUnit(MatUnit materialUnit){
        Vector vectResult = new Vector(1,1);
        vectResult.add(materialUnit);
		getRecursiveMaterialUnitDescendant(materialUnit.getOID(),vectResult);

        String whereClause = PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID] +
            			     " NOT IN (" + changeToString(vectResult) + ")";
        String orderClause = PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID];
        return PstMatUnit.list(0,0,whereClause,orderClause);
    }
     */

    /**
     * This method used to find oid of vector of MaterialUnit and convert into String format
     * this method used in "whereClause" in method "listAllApropriateBaseUnit()" above
     * @param vectMaterialUnit --> selected vector materialUnit object
     */
    /*
    public static String changeToString(Vector vectMaterialUnit){
        String result = "";
        if(vectMaterialUnit!=null && vectMaterialUnit.size()>0){
			for(int i=0; i<vectMaterialUnit.size(); i++){
                MatUnit matUnit = (MatUnit)vectMaterialUnit.get(i);
                result = result + matUnit.getOID() + ",";
            }
			if(result!="" && result.length()>0){
                result = result.substring(0,result.length()-1);
            }
        }
        return result;
    }
     */

    /**
     * This method used to get all "materialUnit object" with ascendant and descendant searching
     * @param materialId --> oid of selected material object
     */
    /*
    public static Vector getAllMaterialUnit(long materialId, int searchType){
        Material material = new Material();
        MatUnit materialUnit = new MatUnit();
        try{
            material = PstMaterial.fetchExc(materialId);
            materialUnit = PstMatUnit.fetchExc(material.getUnit());
        }catch(Exception e){
        }

        Vector result = new Vector(1,1);
        result.add(materialUnit);
        if(searchType==SEARCH_ALL){
			getRecursiveMaterialUnitAscendant(materialUnit.getBaseUnitId(),result);
			getRecursiveMaterialUnitDescendant(material.getUnit(),result);
        }else{
          if(searchType==SEARCH_ASCENDANT){
			getRecursiveMaterialUnitAscendant(materialUnit.getBaseUnitId(),result);
          }else{
			getRecursiveMaterialUnitDescendant(material.getUnit(),result);
          }
        }
        return result;
    }
     */

    /**
     * This method used to get all "materialUnit object" that descenddant of selected material's unit
     * @param materialUnitId --> oid selected material unit object
     * @param result --> vector of result
     */
    /*
    public static Vector getRecursiveMaterialUnitDescendant(long materialUnitId, Vector result){
        if(result==null || materialUnitId==0){
           return new Vector(1,1);
        }

        DBResultSet dbrs = null;
        try{
            String sql = "SELECT " + PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID] + ", " +
                		 PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID] + ", " +
                         PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_NAME] + ", " +
                         PstMatUnit.fieldNames[PstMatUnit.FLD_QTY_PER_BASE_UNIT] + ", " +
                         PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_DESCRIPTION] +
                         " FROM " + PstMatUnit.TBL_P2_UNIT +
                         " WHERE " + PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID] +
                         " = " + materialUnitId;
            System.out.println("SessMaterialUnit.getRecursiveMaterialUnitDescendant sql : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
				MatUnit matUnit = new MatUnit();
                matUnit.setOID(rs.getLong(PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID]));
                matUnit.setBaseUnitId(rs.getLong(PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID]));
				matUnit.setUnitName(rs.getString(PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_NAME]));
				matUnit.setQtyPerBaseUnit(rs.getInt(PstMatUnit.fieldNames[PstMatUnit.FLD_QTY_PER_BASE_UNIT]));
				matUnit.setUnitDescription(rs.getString(PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_DESCRIPTION]));
                result.add(matUnit);

                getRecursiveMaterialUnitDescendant(matUnit.getOID(),result);
            }
        }catch(Exception e){
            System.out.println("SessMaterialUnit.getRecursiveMaterialUnitDescendant err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
            return result;
        }
    }
     */

    /**
     * This method used to get all "materialUnit object" that ascendant of selected material's unit
     * @param materialUnitId --> oid selected material unit object
     * @param result --> vector of result
     */
    /*
    public static Vector getRecursiveMaterialUnitAscendant(long baseMaterialUnitId, Vector result){
        if(result==null || baseMaterialUnitId==0){
           return new Vector(1,1);
        }

        DBResultSet dbrs = null;
        try{
            String sql = "SELECT " + PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID] + ", " +
                		 PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID] + ", " +
                         PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_NAME] + ", " +
                         PstMatUnit.fieldNames[PstMatUnit.FLD_QTY_PER_BASE_UNIT] + ", " +
                         PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_DESCRIPTION] +
                         " FROM " + PstMatUnit.TBL_P2_UNIT +
                         " WHERE " + PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID] +
                         " = " + baseMaterialUnitId;
            System.out.println("SessMaterialUnit.getRecursiveMaterialUnitAscendant sql : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()){
				MatUnit matUnit = new MatUnit();
                matUnit.setOID(rs.getLong(PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID]));
                matUnit.setBaseUnitId(rs.getLong(PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID]));
				matUnit.setUnitName(rs.getString(PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_NAME]));
				matUnit.setQtyPerBaseUnit(rs.getInt(PstMatUnit.fieldNames[PstMatUnit.FLD_QTY_PER_BASE_UNIT]));
				matUnit.setUnitDescription(rs.getString(PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_DESCRIPTION]));
                result.add(matUnit);

                getRecursiveMaterialUnitAscendant(matUnit.getBaseUnitId(),result);
            }
        }catch(Exception e){
            System.out.println("SessMaterialUnit.getRecursiveMaterialUnitAscendant err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
            return result;
        }
    }
     */

    /*
public static Vector getMaterialBaseUnit(long unitId){
    if(unitId==0){
       return new Vector(1,1);
    }

    DBResultSet dbrs = null;
    Vector result = new Vector(1,1);
    try{
        String sql = "SELECT UT." + PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID] + ", UT." +
                     PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID] + ", UT." +
                     PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_NAME] + ", UNT." +
                     PstMatUnit.fieldNames[PstMatUnit.FLD_QTY_PER_BASE_UNIT] + ", UNT." +
                     PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_DESCRIPTION] +
                     " FROM " + PstMatUnit.TBL_P2_UNIT +" AS UT "+
                     " INNER JOIN "+PstMatUnit.TBL_P2_UNIT+" AS UNT "+
                     " ON UT."+PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID]+
                     " = UNT."+PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID]+
                     " WHERE UNT." + PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID] +
                     " = " + unitId;

        System.out.println("SessMaterialUnit.getMaterialBaseUnit sql : "+sql);
        dbrs = DBHandler.execQueryResult(sql);
        ResultSet rs = dbrs.getResultSet();
        while(rs.next()){
            MatUnit matUnit = new MatUnit();
            matUnit.setOID(rs.getLong(PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID]));
            matUnit.setBaseUnitId(rs.getLong(PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID]));
            matUnit.setUnitName(rs.getString(PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_NAME]));
            matUnit.setQtyPerBaseUnit(rs.getInt(PstMatUnit.fieldNames[PstMatUnit.FLD_QTY_PER_BASE_UNIT]));
            matUnit.setUnitDescription(rs.getString(PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_DESCRIPTION]));
            result.add(matUnit);

            //getRecursiveMaterialUnitAscendant(matUnit.getBaseUnitId(),result);
        }
    }catch(Exception e){
        System.out.println("SessMaterialUnit.getMaterialBaseUnit err : "+e.toString());
    }finally{
        DBResultSet.close(dbrs);
        return result;
    }
}
     */

    /**
     * This method used to count item in buying unit
     * @param buyingUnitId --> oid of buying unit
     * @param baseUnitId --> oid of base unit
     * @param result --> number/amount item
     */
    /*
public static int getNumberOfItemInBuyingUnit(long buyingUnitId, long baseUnitId, int result){
    if(buyingUnitId==baseUnitId){
        return 1;
    }

    DBResultSet dbrs = null;
    try{
        String sql = "SELECT " + PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID] +
                     ", " + PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID] +
                     ", " + PstMatUnit.fieldNames[PstMatUnit.FLD_QTY_PER_BASE_UNIT] +
                     " FROM " + PstMatUnit.TBL_P2_UNIT +
                     " WHERE " + PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID] +
                     " = " + buyingUnitId;
        System.out.println("SessMaterialUnit.getNumberOfItemInBuyingUnit sql : "+sql);
        dbrs = DBHandler.execQueryResult(sql);
        ResultSet rs = dbrs.getResultSet();
        while(rs.next()){
               long unitId = rs.getLong(PstMatUnit.fieldNames[PstMatUnit.FLD_UNIT_ID]);
               long bsUnitId = rs.getLong(PstMatUnit.fieldNames[PstMatUnit.FLD_BASE_UNIT_ID]);
               int qty = rs.getInt(PstMatUnit.fieldNames[PstMatUnit.FLD_QTY_PER_BASE_UNIT]);

               result = result * qty; //result in current looping

               if(bsUnitId!=baseUnitId){
                   result = getNumberOfItemInBuyingUnit(bsUnitId,baseUnitId,result); //result from inner looping (recursive process)
               }
        }
    }catch(Exception e){
        System.out.println("SessMaterialUnit.getNumberOfItemInBuyingUnit err : "+e.toString());
    }finally{
        DBResultSet.close(dbrs);
        System.out.println("return : "+result);
        return result;
    }
}
     */

    public static void main(String args[]) {
        /*Vector result = getAllMaterialUnit(504404191050271116L,SEARCH_ALL);
        System.out.println("Size : "+result.size());
        for(int i=0; i<result.size(); i++){
            MaterialUnit matUnit = (MaterialUnit)result.get(i);
            System.out.println("OID  : "+matUnit.getOID());                     504404203921065489
            System.out.println("Name : "+matUnit.getUnitName());
        }*/
        int result = 1;
        //System.out.println("1 box = "+getNumberOfItemInBuyingUnit(504404203920202098L,504404203918499309L,result)+" pcs");
        //System.out.println("1 box = "+getNumberOfItemInBuyingUnit(504404203920202098L,504404203920202098L,result)+" pcs");
        //System.out.println("1 box = "+getNumberOfItemInBuyingUnit(504404203921065489L,504404203918499309L,result)+" pcs");
    }

}
