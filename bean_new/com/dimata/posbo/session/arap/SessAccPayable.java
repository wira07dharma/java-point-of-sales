/* Generated by Together */

package com.dimata.posbo.session.arap;

/* java package */
import com.dimata.common.entity.contact.ContactList;
import java.util.*;
import java.sql.*;

/* qdep package */
import com.dimata.util.*;
import com.dimata.posbo.db.DBHandler;
import com.dimata.posbo.db.DBResultSet;
/* project package */
import com.dimata.common.entity.contact.PstContactList;
import com.dimata.common.entity.payment.PaymentSystem;
import com.dimata.common.entity.payment.PstPaymentSystem;
import com.dimata.common.entity.payment.CurrencyType;
import com.dimata.common.entity.payment.PstCurrencyType;
import com.dimata.posbo.entity.warehouse.PstMatReceive;
import com.dimata.posbo.entity.warehouse.PstMatReceiveItem;
import com.dimata.posbo.entity.warehouse.PstForwarderInfo;
import com.dimata.posbo.entity.arap.AccPayable;
import com.dimata.posbo.entity.arap.AccPayableDetail;
import com.dimata.posbo.entity.arap.PstAccPayable;
import com.dimata.posbo.entity.arap.PstAccPayableDetail;
//for return
import com.dimata.posbo.entity.warehouse.PstMatReturn;


import com.dimata.posbo.entity.search.SrcAccPayable;
import com.dimata.posbo.entity.warehouse.ForwarderInfo;
import com.dimata.posbo.entity.warehouse.MatReceive;
import com.dimata.posbo.entity.warehouse.MatReceiveItem;

public class SessAccPayable {
    public static final String SESS_ACC_PAYABLE = "SESSION_ACC_PAYABLE";
    public static final int SORT_VENDOR = 0;
    public static final int SORT_INVOICE_NUMBER = 1;
    public static final int SORT_INVOICE_DATE = 2;
    public static String[] sortKey = {"Vendor", "Invoice Number", "Invoce Date"};
    public static int[] sortValue = {0,1,2};
    
    public static Vector listSortKey() {
        Vector result = new Vector(1, 1);
        for (int i = 0; i < sortKey.length; i++) {
            result.add("" + sortKey[i]);
        }
        return result;
    }
    
    public static Vector listSortValue() {
        Vector result = new Vector(1, 1);
        for (int i = 0; i < sortKey.length; i++) {
            result.add("" + sortValue[i]);
        }
        return result;
    }
    
    public static Vector parse(String str) {
        Vector vector = LogicParser.textSentence(str);
        if(vector != null && vector.size()>0){
            if(((vector.get(vector.size()-1)).equals(LogicParser.SIGN))&&
            ((vector.get(vector.size()-1)).equals(LogicParser.ENGLISH)))
                vector.remove(vector.size()-1);
        }
        return vector;
    }
    
    /**
     * Fungsi ini digunakan untuk mendapatkan AP
     * create by: gwawan@7Mei2007
     * @param srcAccPayable Merupakan sebuah objek dari class SrcAccPayable
     * @param start Merupakan batas awal dari record yang dicari
     * @param recordToGet Merupakan banyaknya record yang harus dicari
     * @return result
     */
    //public static Vector getListAP(SrcAccPayable srcAccPayable, int start, int recordToGet) {
    public static Vector getListAP(SrcAccPayable srcAccPayable, int start, int recordToGet, long oidReceive) {
        Vector result = new Vector(1,1);
        DBResultSet dbrs = null;
        String sql = "";
        String whereClause = "";
        try {
            /** dari dokumen recive */
            sql = "SELECT RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_MATERIAL_ID]+" OID";
            sql += ", CL."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+" AS VENDOR";
            sql += ", RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_REC_CODE]+" AS NUMBER";
            sql += ", RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_REMARK]+" AS REMARK";
            sql += ", RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_DATE]+" AS DATE";
            sql += ", (SUM(RCVI."+PstMatReceiveItem.fieldNames[PstMatReceiveItem.FLD_TOTAL]+")) AS TOTAL";
            sql += ", (SUM(RCVI."+PstMatReceiveItem.fieldNames[PstMatReceiveItem.FLD_TOTAL]+")";
            //sql += "* (RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_TOTAL_PPN]+"/100)) AS TAX";
            //cek konfigurasi incl/not inc ppn
            //by mirahu
            //200111017
            sql += "* (RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_TOTAL_PPN]+"/100) *(1-RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_INCLUDE_PPN]+")) AS TAX ";
            sql += ", CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+" AS VENDORID";
            sql += " FROM "+PstMatReceive.TBL_MAT_RECEIVE+" RCV";
            sql += " LEFT JOIN "+PstMatReceiveItem.TBL_MAT_RECEIVE_ITEM+" RCVI";
            sql += " ON RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_MATERIAL_ID];
            sql += " = RCVI."+PstMatReceiveItem.fieldNames[PstMatReceiveItem.FLD_RECEIVE_MATERIAL_ID];
            sql += " INNER JOIN "+PstContactList.TBL_CONTACT_LIST+" CL";
            sql += " ON RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_SUPPLIER_ID];
            sql += " = CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            //sql += " WHERE RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_STATUS]+" = "+I_DocStatus.DOCUMENT_STATUS_CLOSED;
            
            //whereClause = getWhereClauseReceive(srcAccPayable);
            whereClause = getWhereClauseReceive(srcAccPayable, oidReceive); 
            if(whereClause != null && whereClause.length() > 0){
               //sql += " AND "+whereClause + " 1 = 1";
               sql += " WHERE "+whereClause + " 1 = 1";
           }
            
            sql += " GROUP BY OID, VENDOR, NUMBER, REMARK, DATE";
            
            sql += " UNION ";
            
            /** dari dokumen forwarder */
            sql += "SELECT FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_FORWARDER_ID]+" AS OID";
            sql += ", CL."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+" AS VENDOR";
            sql += ", FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_DOC_NUMBER]+" AS NUMBER";
            sql += ", FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_NOTES]+" AS REMARK";
            sql += ", FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_DOC_DATE]+" AS DATE";
            sql += ", FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_TOTAL_COST]+" AS TOTAL";
            sql += ", 0 AS TAX";
             sql += ", CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+" AS VENDORID";
            sql += " FROM "+PstForwarderInfo.TBL_FORWARDER_INFO+" FI";
            sql += " INNER JOIN "+PstContactList.TBL_CONTACT_LIST+" CL";
            sql += " ON FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_CONTACT_ID];
            sql += " = CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            sql += " INNER JOIN "+PstMatReceive.TBL_MAT_RECEIVE+" RCV";
            sql += " ON FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_RECEIVE_ID];
            sql += " = RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_MATERIAL_ID];
            //sql += " WHERE FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_STATUS]+" = "+I_DocStatus.DOCUMENT_STATUS_CLOSED;
            
            //whereClause = getWhereClauseForwarder(srcAccPayable);
            whereClause = getWhereClauseForwarder(srcAccPayable, oidReceive);
            if(whereClause != null && whereClause.length() > 0){
                //sql = sql + " AND "+whereClause + " 1 = 1";
                sql = sql+ " WHERE "+whereClause+ " 1 = 1";
           }
            
            sql += " GROUP BY OID, VENDOR, NUMBER, REMARK, DATE";
            
            sql+= " ORDER BY ";
            switch (srcAccPayable.getSortBy()) {
                case SORT_VENDOR:
                    sql = sql + " VENDOR ";
                    break;
                case SORT_INVOICE_NUMBER:
                    sql = sql + " NUMBER ";
                    break;
                case SORT_INVOICE_DATE:
                    sql = sql + " DATE ";
                    break;
                default:
                    sql = sql + " VENDOR ";
            }
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + "," + recordToGet;
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + start;
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;
                default:
                    if (start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + "," + recordToGet;
            }
            
            System.out.println(">>>Sql at getListAP() ::: \n"+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector(1,1);
                temp.add(""+rs.getLong("OID"));
                temp.add(rs.getString("VENDOR"));
                temp.add(rs.getString("NUMBER"));
                temp.add(rs.getString("REMARK"));
                temp.add(rs.getDate("DATE"));
                temp.add(String.valueOf(rs.getDouble("TOTAL")));
                temp.add(String.valueOf(rs.getDouble("TAX")));
                temp.add(""+rs.getLong("VENDORID"));
                
                result.add(temp);
            }
            rs.close();
            
            return result;
        }
        catch(Exception e) {
            System.out.println("Exc in getListAP >>> "+e.toString());
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    public static Vector getListAPNew(SrcAccPayable srcAccPayable, int start, int recordToGet, long oidReceive) {
        Vector result = new Vector(1,1);
        DBResultSet dbrs = null;
        String sql = "";
        String whereClause = "";
        try {
            /** dari dokumen recive */
            sql = "SELECT RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_MATERIAL_ID]+" OID";
            sql += ", CL."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+" AS VENDOR";
            sql += ", RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_REC_CODE]+" AS NUMBER";
            sql += ", RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_REMARK]+" AS REMARK";
            sql += ", RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_DATE]+" AS DATE";
            sql += ", (SUM(RCVI."+PstMatReceiveItem.fieldNames[PstMatReceiveItem.FLD_TOTAL]+")) AS TOTAL";
            sql += ", (SUM(RCVI."+PstMatReceiveItem.fieldNames[PstMatReceiveItem.FLD_TOTAL]+")";
            //sql += "* (RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_TOTAL_PPN]+"/100)) AS TAX";
            //cek konfigurasi incl/not inc ppn
            //by mirahu
            //200111017
            sql += "* (RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_TOTAL_PPN]+"/100) *(1-RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_INCLUDE_PPN]+")) AS TAX ";
            sql += ", CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+" AS VENDORID";
            sql += " FROM "+PstMatReceive.TBL_MAT_RECEIVE+" RCV";
            sql += " LEFT JOIN "+PstMatReceiveItem.TBL_MAT_RECEIVE_ITEM+" RCVI";
            sql += " ON RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_MATERIAL_ID];
            sql += " = RCVI."+PstMatReceiveItem.fieldNames[PstMatReceiveItem.FLD_RECEIVE_MATERIAL_ID];
            sql += " INNER JOIN "+PstContactList.TBL_CONTACT_LIST+" CL";
            sql += " ON RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_SUPPLIER_ID];
            sql += " = CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            //sql += " WHERE RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_STATUS]+" = "+I_DocStatus.DOCUMENT_STATUS_CLOSED;
            
            //whereClause = getWhereClauseReceive(srcAccPayable);
            whereClause = getWhereClauseReceive(srcAccPayable, oidReceive); 
            if(whereClause != null && whereClause.length() > 0){
               //sql += " AND "+whereClause + " 1 = 1";
               sql += " WHERE "+whereClause + " 1 = 1";
           }
            
            sql += " GROUP BY OID, VENDOR, NUMBER, REMARK, DATE";
            
            sql += " UNION ";
            
            /** dari dokumen forwarder */
            sql += "SELECT FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_FORWARDER_ID]+" AS OID";
            sql += ", CL."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+" AS VENDOR";
            sql += ", FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_DOC_NUMBER]+" AS NUMBER";
            sql += ", FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_NOTES]+" AS REMARK";
            sql += ", FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_DOC_DATE]+" AS DATE";
            sql += ", FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_TOTAL_COST]+" AS TOTAL";
            sql += ", 0 AS TAX";
             sql += ", CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+" AS VENDORID";
            sql += " FROM "+PstForwarderInfo.TBL_FORWARDER_INFO+" FI";
            sql += " INNER JOIN "+PstContactList.TBL_CONTACT_LIST+" CL";
            sql += " ON FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_CONTACT_ID];
            sql += " = CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            sql += " INNER JOIN "+PstMatReceive.TBL_MAT_RECEIVE+" RCV";
            sql += " ON FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_RECEIVE_ID];
            sql += " = RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_MATERIAL_ID];
            //sql += " WHERE FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_STATUS]+" = "+I_DocStatus.DOCUMENT_STATUS_CLOSED;
            
            //whereClause = getWhereClauseForwarder(srcAccPayable);
            whereClause = getWhereClauseForwarder(srcAccPayable, oidReceive);
            if(whereClause != null && whereClause.length() > 0){
                //sql = sql + " AND "+whereClause + " 1 = 1";
                sql = sql+ " WHERE "+whereClause+ " 1 = 1";
           }
            
            sql += " GROUP BY OID, VENDOR, NUMBER, REMARK, DATE";
            
            sql+= " ORDER BY ";
            switch (srcAccPayable.getSortBy()) {
                case SORT_VENDOR:
                    sql = sql + " VENDOR ";
                    break;
                case SORT_INVOICE_NUMBER:
                    sql = sql + " NUMBER ";
                    break;
                case SORT_INVOICE_DATE:
                    sql = sql + " DATE ";
                    break;
                default:
                    sql = sql + " VENDOR ";
            }
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + "," + recordToGet;
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + start;
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;
                default:
                    if (start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + "," + recordToGet;
            }
            
            System.out.println(">>>Sql at getListAP(New) ::: \n"+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector(1,1);
                ForwarderInfo fi = new ForwarderInfo();
                ContactList con = new ContactList();
                MatReceive mat = new MatReceive();
                MatReceiveItem mati = new MatReceiveItem();
                
                fi.setOID(rs.getLong("OID"));
                temp.add(fi);
                
                con.setCompName(rs.getString("VENDOR"));
                con.setOID(rs.getLong("VENDORID"));
                temp.add(con);
                
                mat.setRecCode(rs.getString("NUMBER"));
                mat.setRemark(rs.getString("REMARK"));
                mat.setReceiveDate(Formater.formatDate(rs.getString("DATE"), "yyyy-MM-dd"));
                mat.setTotalPpn(rs.getDouble("TAX"));
                temp.add(mat);
                
                mati.setTotal(rs.getDouble("TOTAL"));
                temp.add(mati);
                result.add(temp);
            }
            rs.close();
            
            return result;
        }
        catch(Exception e) {
            System.out.println("Exc in getListAPNew >>> "+e.toString());
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    
    public static int getCountListAP(String startDate, String endDate) {
        int count = 0;
        DBResultSet dbrs = null;
        String sql = "";
        String whereClause = "";
        try {
            /** dari dokumen recive */
            sql = "SELECT RCV.RECEIVE_MATERIAL_ID AS OID, CL.COMP_NAME AS VENDOR, RCV.REC_CODE AS NUMBER, ";
            sql += " RCV.REMARK AS REMARK, RCV.RECEIVE_DATE AS DATE, (SUM(RCVI.TOTAL)) AS TOTAL, ";
            sql += " (SUM(RCVI.TOTAL)* (RCV.TOTAL_PPN/100) *(1-RCV.INCLUDE_PPN)) AS TAX , CL.CONTACT_ID AS VENDORID ";
            sql += " FROM pos_receive_material RCV LEFT JOIN pos_receive_material_item RCVI ON RCV.RECEIVE_MATERIAL_ID = RCVI.RECEIVE_MATERIAL_ID ";
            sql += " INNER JOIN contact_list CL ON RCV.SUPPLIER_ID = CL.CONTACT_ID ";
            sql += " WHERE ADDDATE(RCV.RECEIVE_DATE, RCV.CREDIT_TIME) BETWEEN '"+startDate+"  00:00:00' AND '"+endDate+" 23:59:59' AND  1 = 1 ";
            sql += " GROUP BY OID, VENDOR, NUMBER, REMARK, DATE ";
            sql += " UNION ";
            sql += " SELECT FI.FORWARDER_ID AS OID, CL.COMP_NAME AS VENDOR, FI.DOC_NUMBER AS NUMBER, FI.NOTES AS REMARK, FI.DOC_DATE AS DATE, ";
            sql += " FI.TOTAL_COST AS TOTAL, 0 AS TAX, CL.CONTACT_ID AS VENDORID ";
            sql += " FROM pos_forwarder_info FI ";
            sql += " INNER JOIN contact_list CL ON FI.CONTACT_ID = CL.CONTACT_ID ";
            sql += " INNER JOIN pos_receive_material RCV ON FI.RECEIVE_ID = RCV.RECEIVE_MATERIAL_ID";
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = count + 1;
            }
            rs.close();
            
            return count;
        }
        catch(Exception e) {
            System.out.println("Exc in getListAP >>> "+e.toString());
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    /**
     * Fungsi ini digunakan untuk mendapatkan jumlah AP
     * create by: gwawan@7Mei2007
     * @param srcAccPayable Merupakan sebuah objek dari class SrcAccPayable
     * @return result
     */
    //public static int countListAP(SrcAccPayable srcAccPayable) {
    //add oidRec from receiving
    // by mirahu
    //13012012
    //public static int countListAP(SrcAccPayable srcAccPayable) {
      public static int countListAP(SrcAccPayable srcAccPayable, long oidReceive) {
        int result = 0;
        DBResultSet dbrs = null;
        String sql = "";
        String whereClause = "";
        String whereClauseDua = "";
        try {
            /** dari dokumen receive */
            sql  = "SELECT COUNT(*)";
            sql += " FROM "+PstMatReceive.TBL_MAT_RECEIVE+" RCV";
            sql += " INNER JOIN "+PstContactList.TBL_CONTACT_LIST+" CL";
            sql += " ON RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_SUPPLIER_ID];
            sql += " = CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];

//            if(srcAccPayable.getStartDate() != null){
//                sql = sql + " WHERE RCV.RECEIVE_DATE LIKE '"+srcAccPayable.getStartDate()+"%' ";
//            }
            
            whereClauseDua = getWhereClauseReceive(srcAccPayable,oidReceive );
            if(whereClauseDua != null && whereClauseDua.length() > 0){
                sql = sql + " WHERE "+whereClauseDua + " 1 = 1";
            }
            
            sql += " UNION ";
            
            /** dari dokumen forwarder */
            sql += "SELECT COUNT(*)";
            sql += " FROM "+PstForwarderInfo.TBL_FORWARDER_INFO+" FI";
            sql += " INNER JOIN "+PstContactList.TBL_CONTACT_LIST+" CL";
            sql += " ON FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_CONTACT_ID];
            sql += " = CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            //sql += " WHERE FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_STATUS]+" = "+I_DocStatus.DOCUMENT_STATUS_CLOSED;
            
            //whereClause = getWhereClauseForwarder(srcAccPayable);
            whereClause = getWhereClauseForwarder(srcAccPayable,oidReceive );
            if(whereClause != null && whereClause.length() > 0){
                //sql += " AND "+whereClause + " 1 = 1";
                //untuk status
                sql = sql + " WHERE "+whereClause + " 1 = 1";
            }
            
            //System.out.println(">>>Sql at countListApp() ::: \n"+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result += rs.getInt(1);
            }
            rs.close();
            
            return result;
        }
        catch(Exception e) {
            System.out.println("Exc in countListApp >>> "+e.toString());
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return 0;
    }
      /*
       * Description : Count hutang berdasarkan hari ini, 3 hari kedepan dan 7 hari kedpan
       * Date : 2014-12-30
       * Author : Hendra McHen
       */
   public static int countListAPS(SrcAccPayable srcAccPayable, long oidReceive, String startDate, int inc, int dayAkhir) {
        int result = 0;
        DBResultSet dbrs = null;
        String sql = "";
        String whereClause = "";
        
        String dateNow = startDate;
        String yearCurr = dateNow.substring(0, 4);//
        String monthCurr = dateNow.substring(5, 7);
        String dayCurr = dateNow.substring(8, 10);
        int yearNow = Integer.valueOf(yearCurr);
        int monthNow = Integer.valueOf(monthCurr);
        int dayNow = Integer.valueOf(dayCurr);
        
        String whereDate = "";
        
        try {
            /** dari dokumen receive */
            sql  = "SELECT COUNT(*)";
            sql += " FROM "+PstMatReceive.TBL_MAT_RECEIVE+" RCV";
            sql += " INNER JOIN "+PstContactList.TBL_CONTACT_LIST+" CL";
            sql += " ON RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_SUPPLIER_ID];
            sql += " = CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            //sql += " WHERE RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_STATUS]+" = "+I_DocStatus.DOCUMENT_STATUS_CLOSED;
            
            
            if (inc == 0) {
                if (startDate != null) {
                    sql = sql + " WHERE RCV.RECEIVE_DATE LIKE '" + startDate + "%' ";
                }
            } else {
                if (startDate != null) {
                    for(int i=0; i<inc; i++){
                        
                        if(dayNow < dayAkhir){
                            dayCurr = String.valueOf(dayNow);
                            if(dayCurr.length() < 2){
                                dayCurr = "0" + dayCurr;
                            }
                            whereDate = whereDate + " RCV.RECEIVE_DATE LIKE '" + yearCurr + "-"+monthCurr+"-"+dayCurr+"%' ";
                        } else {
                            dayNow = dayNow - dayAkhir;
                            monthNow = monthNow + 1;
                            if (monthNow > 12){
                                monthCurr = "01";
                                yearNow = yearNow + 1;
                                yearCurr = String.valueOf(yearNow);
                            } else {
                                monthCurr = String.valueOf(monthNow);
                            }
                            
                            dayCurr = String.valueOf(dayNow);
                            whereDate = whereDate + " RCV.RECEIVE_DATE LIKE '" + yearCurr + "-"+monthCurr+"-"+dayCurr+"%' ";
                        }
                        if (i < inc-1){
                            whereDate = whereDate + " OR ";
                        } else {
                            whereDate = whereDate + " ";
                        }
                        dayNow = dayNow + 1;
                    }
                    sql = sql + " WHERE " + whereDate;
                }
            }
            
            
            sql += " UNION ";
            
            /** dari dokumen forwarder */
            sql += "SELECT COUNT(*)";
            sql += " FROM "+PstForwarderInfo.TBL_FORWARDER_INFO+" FI";
            sql += " INNER JOIN "+PstContactList.TBL_CONTACT_LIST+" CL";
            sql += " ON FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_CONTACT_ID];
            sql += " = CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            //sql += " WHERE FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_STATUS]+" = "+I_DocStatus.DOCUMENT_STATUS_CLOSED;
            
            //whereClause = getWhereClauseForwarder(srcAccPayable);
            whereClause = getWhereClauseForwarder(srcAccPayable,oidReceive );
            if(whereClause != null && whereClause.length() > 0){
                //sql += " AND "+whereClause + " 1 = 1";
                  //untuk status
                sql = sql + " WHERE "+whereClause + " 1 = 1";
           }
            
            //System.out.println(">>>Sql at countListApp() ::: \n"+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result += rs.getInt(1);
            }
            rs.close();
            
            return result;
        }
        catch(Exception e) {
            System.out.println("Exc in countListApp >>> "+e.toString());
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return 0;
    }
    
    /**
     * Fungsi ini digunakan untuk mendapatkan total pembayaran dari sebuah AP
     * create by: gwawan@7Mei2007
     * @param oid Merupakan OID dari AP yang akan dicari total pembayarannya
     * @return result Merupakan total pembayaran dari sebuah AP
     */
    public static double getTotalAPPayment(SrcAccPayable srcAccPayable, long oidInvoice) {
        double result = 0;
        DBResultSet dbrs = null;
        String sql = "";
        String whereClause = "";
        try {
            sql  = "SELECT SUM(AP_DETAIL."+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_AMOUNT];
            sql += "*"+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_RATE]+")";
            sql += " FROM "+PstMatReceive.TBL_MAT_RECEIVE+" RCV";
            sql += " INNER JOIN "+PstAccPayable.TBL_ACC_PAYABLE+" AP";
            sql += " ON RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_MATERIAL_ID]+" =";
            sql += " AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_RECEIVE_MATERIAL_ID];
            sql += " INNER JOIN "+PstAccPayableDetail.TBL_ACC_PAYABLE_DETAIL+" AP_DETAIL";
            sql += " ON AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_ACC_PAYABLE_ID]+" =";
            sql += " AP_DETAIL."+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_ACC_PAYABLE_ID];
            sql += " INNER JOIN "+PstContactList.TBL_CONTACT_LIST+" CL";
            sql += " ON RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_SUPPLIER_ID]+" =";
            sql += " CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            sql += " WHERE 1=1 ";
            if(oidInvoice != 0) {
                sql += " AND AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_RECEIVE_MATERIAL_ID]+" = "+oidInvoice;
            }
            
            //whereClause = getWhereClauseReceive(srcAccPayable, 0);
            whereClause = getWhereClauseReceive(srcAccPayable, 0);
            if(whereClause != null && whereClause.length() > 0) {
               sql += " AND "+whereClause+" 1=1";
            }
            
            sql += " UNION ";
            
            sql += "SELECT SUM(AP_DETAIL."+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_AMOUNT];
            sql += "*"+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_RATE]+")";
            sql += " FROM "+PstForwarderInfo.TBL_FORWARDER_INFO+" FI";
            sql += " INNER JOIN "+PstAccPayable.TBL_ACC_PAYABLE+" AP";
            sql += " ON FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_FORWARDER_ID]+" =";
            sql += " AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_RECEIVE_MATERIAL_ID];
            sql += " INNER JOIN "+PstAccPayableDetail.TBL_ACC_PAYABLE_DETAIL+" AP_DETAIL";
            sql += " ON AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_ACC_PAYABLE_ID]+" =";
            sql += " AP_DETAIL."+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_ACC_PAYABLE_ID];
            sql += " INNER JOIN "+PstContactList.TBL_CONTACT_LIST+" CL";
            sql += " ON FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_CONTACT_ID]+" =";
            sql += " CL."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID];
            sql += " WHERE 1=1 ";
            if(oidInvoice != 0) {
                sql += " AND AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_RECEIVE_MATERIAL_ID]+" = "+oidInvoice;
            }
            
            //whereClause = getWhereClauseForwarder(srcAccPayable);
            whereClause = getWhereClauseForwarder(srcAccPayable,0);
            if(whereClause != null && whereClause.length() > 0) {
               sql += " AND "+whereClause+" 1=1";
            }
            
            //System.out.println("sql at getTotalAPPayment: "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result += rs.getDouble(1);
            }
            rs.close();
            
            return result;
        }
        catch(Exception e) {
            System.out.println("Exc in getTotalAPPayment >>> "+e.toString());
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return 0;
    }
    
    //public static String getWhereClauseReceive(SrcAccPayable srcAccPayable) {
      public static String getWhereClauseReceive(SrcAccPayable srcAccPayable, long oidReceive) {
        String whereClause = "";
        //whereClause
        //whereClause = "WHERE ";
        try {
            if (srcAccPayable != null) {
                //currency
                if(srcAccPayable.getCurrencyId() != 0) {
                    whereClause += "RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_CURRENCY_ID]+" = "+srcAccPayable.getCurrencyId()+" AND ";
                }

               //adding oidReceive
               //by mirahu
               //13012012
                if(oidReceive != 0) {
                    whereClause += "RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_MATERIAL_ID]+" = "+oidReceive+" AND ";
                }
                
                if(srcAccPayable.getLocationFrom() != 0) {
                    whereClause += "RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_LOCATION_ID]+" = "+srcAccPayable.getLocationFrom()+" AND ";
                }
                
                if(srcAccPayable.getTermsOfPayment()!=-1){
                     whereClause += "RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_TERM_OF_PAYMENT]+" = "+srcAccPayable.getTermsOfPayment()+" AND ";
                }
                
                //supplier
                if (srcAccPayable.getSupplierName() != null && srcAccPayable.getSupplierName().length() > 0) {
                    Vector vectSupplier = parse(srcAccPayable.getSupplierName());
                    if(vectSupplier != null && vectSupplier.size()>0){
                        whereClause = whereClause +" (";
                        for(int i =0;i<vectSupplier.size();i++) {
                            String supplier = (String)vectSupplier.get(i);
                            if(!LogicParser.isInSign(supplier) && !LogicParser.isInLogEnglish(supplier)) {
                                whereClause = whereClause + "(CL." + PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME] +" LIKE '%" + supplier.trim() + "%' "+
                                " OR CL." + PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME] +" LIKE '%" + supplier.trim() + "%' "+
                                " OR CL." + PstContactList.fieldNames[PstContactList.FLD_COMP_NAME] +" LIKE '%" + supplier.trim() + "%' )";
                            } else {
                                whereClause = whereClause + supplier ;
                            }
                        }
                        whereClause = whereClause +") AND ";
                    }
                }
                
                //Invoice number
                if (srcAccPayable.getInvoiceNumber() != null && srcAccPayable.getInvoiceNumber().length() > 0) {
                    Vector vectNumber = parse(srcAccPayable.getInvoiceNumber());
                    if(vectNumber != null && vectNumber.size()>0){
                        whereClause = whereClause +" (";
                        for(int i =0;i<vectNumber.size();i++) {
                            String number = (String)vectNumber.get(i);
                            if(!LogicParser.isInSign(number) && !LogicParser.isInLogEnglish(number)){
                                whereClause = whereClause + "(RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_REC_CODE] +" LIKE '%" + number.trim() + "%' OR RCV.RECEIVE_MATERIAL_ID IN (SELECT RECEIVE_MATERIAL_ID FROM pos_acc_payable PAY WHERE (PAY.`PAYMENT_NUMBER` LIKE '%"+number.trim()+"%' OR PAY.`ACC_PAYABLE_ID` = '"+number.trim()+"')))";
                            }else{
                                whereClause = whereClause + number ;
                            }
                        }
                        whereClause = whereClause +") AND ";
                    }
                }

                //Invoice Date
                if (srcAccPayable.getInvoiceDateStatus() != 0 && (srcAccPayable.getStartDate() != null && srcAccPayable.getEndDate() != null)) {
                    whereClause = whereClause + " (RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_DATE]+ " BETWEEN '" +
                    Formater.formatDate(srcAccPayable.getStartDate(), "yyyy-MM-dd") + "  00:00:00' AND '" +
                    Formater.formatDate(srcAccPayable.getEndDate(), "yyyy-MM-dd") + " 23:59:59') AND ";
                }

                if (srcAccPayable.getInvoicePaymentDateStatus() != 0 && (srcAccPayable.getPaymentStartDate() != null && srcAccPayable.getPaymentEndDate() != null)) {
                    whereClause = whereClause + " ADDDATE(RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_DATE]+ ", RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_CREDIT_TIME]+") BETWEEN '" +
                    Formater.formatDate(srcAccPayable.getPaymentStartDate(), "yyyy-MM-dd") + "  00:00:00' AND '" +
                    Formater.formatDate(srcAccPayable.getPaymentEndDate(), "yyyy-MM-dd") + " 23:59:59' AND ";
                   // WHERE ADDDATE(RECEIVE_DATE,TERM_OF_PAYMENT) BETWEEN "2012-11-04 00:00:00" AND "2012-11-04 23:59:59" ;
                }

                //by status
                String strStatus = "";
                if (srcAccPayable.getApstatus() != null && srcAccPayable.getApstatus().size() > 0) {
                    for (int b = 0; b < srcAccPayable.getApstatus().size(); b++) {
                        if (strStatus.length() != 0) {
                            strStatus = strStatus + " OR " + "(RCV." + PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_STATUS] + " =" + srcAccPayable.getApstatus().get(b) + ")";
                        } else {
                            strStatus = "(RCV." + PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_STATUS] + " =" + srcAccPayable.getApstatus().get(b) + ")";
                        }
		}
		whereClause = whereClause +"(" + strStatus + ") AND";
               }

            }
        }
        catch(Exception e) {
            System.out.println("Exc in getWhereClauseReceive >>> "+e.toString());
        }
        return whereClause;
    }

      //public static String getWhereClauseForwarder(SrcAccPayable srcAccPayable) {
    public static String getWhereClauseForwarder(SrcAccPayable srcAccPayable, long oidReceive) {
        String whereClause = "";
        //whereClause
        //whereClause = "WHERE ";
        try {
            if (srcAccPayable != null) {
                //currency
                if(srcAccPayable.getCurrencyId() != 0) {
                    whereClause += "FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_CURRENCY_ID]+" = "+srcAccPayable.getCurrencyId()+" AND ";
                }
                
                 //adding oidReceive
               //by mirahu
               //13012012
                if(oidReceive != 0) {
                    whereClause += "FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_RECEIVE_ID]+" = "+oidReceive+" AND ";
                }
                
                //adding opie-eyek search berdasarkan location
//                if(srcAccPayable.getLocationFrom() != 0) {
//                    whereClause += "RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_LOCATION_ID]+" = "+srcAccPayable.getLocationFrom()+" AND ";
//                }
                
                //supplier
                if (srcAccPayable.getSupplierName() != null && srcAccPayable.getSupplierName().length() > 0) {
                    Vector vectSupplier = parse(srcAccPayable.getSupplierName());
                    if(vectSupplier != null && vectSupplier.size()>0){
                        whereClause = whereClause +" (";
                        for(int i =0;i<vectSupplier.size();i++) {
                            String supplier = (String)vectSupplier.get(i);
                            if(!LogicParser.isInSign(supplier) && !LogicParser.isInLogEnglish(supplier)) {
                                whereClause = whereClause + "(CL." + PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME] +" LIKE '%" + supplier.trim() + "%' "+
                                " OR CL." + PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME] +" LIKE '%" + supplier.trim() + "%' "+
                                " OR CL." + PstContactList.fieldNames[PstContactList.FLD_COMP_NAME] +" LIKE '%" + supplier.trim() + "%' )";
                            } else {
                                whereClause = whereClause + supplier ;
                            }
                        }
                        whereClause = whereClause +") AND ";
                    }
                }
                
                //Invoice number
                if (srcAccPayable.getInvoiceNumber() != null && srcAccPayable.getInvoiceNumber().length() > 0) {
                    Vector vectNumber = parse(srcAccPayable.getInvoiceNumber());
                    if(vectNumber != null && vectNumber.size()>0){
                        whereClause = whereClause +" (";
                        for(int i =0;i<vectNumber.size();i++) {
                            String number = (String)vectNumber.get(i);
                            if(!LogicParser.isInSign(number) && !LogicParser.isInLogEnglish(number)){
                                whereClause = whereClause + "(FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_DOC_NUMBER] +" LIKE '%" + number.trim() + "%' )";
                            }else{
                                whereClause = whereClause + number ;
                            }
                        }
                        whereClause = whereClause +") AND ";
                    }
                }
                
                //Invoice Date
                if (srcAccPayable.getInvoiceDateStatus() != 0 && (srcAccPayable.getStartDate() != null && srcAccPayable.getEndDate() != null)) {
                    whereClause = whereClause + " (FI."+PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_DOC_DATE]+ " BETWEEN '" +
                    Formater.formatDate(srcAccPayable.getStartDate(), "yyyy-MM-dd") + "  00:00:00' AND '" +
                    Formater.formatDate(srcAccPayable.getEndDate(), "yyyy-MM-dd") + " 23:59:59') AND ";
                }

                 //by status
                String strStatus = "";
                if (srcAccPayable.getApstatus() != null && srcAccPayable.getApstatus().size() > 0) {
                    for (int b = 0; b < srcAccPayable.getApstatus().size(); b++) {
                        if (strStatus.length() != 0) {
                            strStatus = strStatus + " OR " + "(FI." + PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_STATUS] + " =" + srcAccPayable.getApstatus().get(b) + ")";
                        } else {
                            strStatus = "(FI." + PstForwarderInfo.fieldNames[PstForwarderInfo.FLD_STATUS] + " =" + srcAccPayable.getApstatus().get(b) + ")";
                        }
		}
		whereClause = whereClause+"(" + strStatus + ") AND ";
               }
            }
        }
        catch(Exception e) {
            System.out.println("Exc in getWhereClauseForwarder >>> "+e.toString());
        }
        return whereClause;
    }

    /**
     * Fungsi ini untuk mendapatkan where untuk return ap
     */
    public static String getWhereClauseReturn(SrcAccPayable srcAccPayable, long oidReceive) {
        String whereClause = "";
        //whereClause
        //whereClause = "WHERE ";
        try {
            if (srcAccPayable != null) {
                //currency
                if(srcAccPayable.getCurrencyId() != 0) {
                    whereClause += "RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_CURRENCY_ID]+" = "+srcAccPayable.getCurrencyId()+" AND ";
                }
                
                //adding oidReceive
                //by mirahu
                //24022012
                if(oidReceive != 0) {
                    whereClause += "RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_MATERIAL_ID]+" = "+oidReceive+" AND ";
                }

                if(srcAccPayable.getLocationFrom() != 0) {
                    whereClause += "RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_LOCATION_ID]+" = "+srcAccPayable.getLocationFrom()+" AND ";
                }
                
                //supplier
                if (srcAccPayable.getSupplierName() != null && srcAccPayable.getSupplierName().length() > 0) {
                    Vector vectSupplier = parse(srcAccPayable.getSupplierName());
                    if(vectSupplier != null && vectSupplier.size()>0){
                        whereClause = whereClause +" (";
                        for(int i =0;i<vectSupplier.size();i++) {
                            String supplier = (String)vectSupplier.get(i);
                            if(!LogicParser.isInSign(supplier) && !LogicParser.isInLogEnglish(supplier)) {
                                whereClause = whereClause + "(CL." + PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME] +" LIKE '%" + supplier.trim() + "%' "+
                                " OR CL." + PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME] +" LIKE '%" + supplier.trim() + "%' "+
                                " OR CL." + PstContactList.fieldNames[PstContactList.FLD_COMP_NAME] +" LIKE '%" + supplier.trim() + "%' )";
                            } else {
                                whereClause = whereClause + supplier ;
                            }
                        }
                        whereClause = whereClause +") AND ";
                    }
                }

                //Invoice number
                if (srcAccPayable.getInvoiceNumber() != null && srcAccPayable.getInvoiceNumber().length() > 0) {
                    Vector vectNumber = parse(srcAccPayable.getInvoiceNumber());
                    if(vectNumber != null && vectNumber.size()>0){
                        whereClause = whereClause +" (";
                        for(int i =0;i<vectNumber.size();i++) {
                            String number = (String)vectNumber.get(i);
                            if(!LogicParser.isInSign(number) && !LogicParser.isInLogEnglish(number)){
                                whereClause = whereClause + "(RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_REC_CODE] +" LIKE '%" + number.trim() + "%' )";
                            }else{
                                whereClause = whereClause + number ;
                            }
                        }
                        whereClause = whereClause +") AND ";
                    }
                }

                //Invoice Date
                if (srcAccPayable.getInvoiceDateStatus() != 0 && (srcAccPayable.getStartDate() != null && srcAccPayable.getEndDate() != null)) {
                    whereClause = whereClause + " (RCV."+PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_DATE]+ " BETWEEN '" +
                    Formater.formatDate(srcAccPayable.getStartDate(), "yyyy-MM-dd") + "  00:00:00' AND '" +
                    Formater.formatDate(srcAccPayable.getEndDate(), "yyyy-MM-dd") + " 23:59:59') AND ";
                }

                //by status
                String strStatus = "";
                if (srcAccPayable.getApstatus() != null && srcAccPayable.getApstatus().size() > 0) {
                    for (int b = 0; b < srcAccPayable.getApstatus().size(); b++) {
                        if (strStatus.length() != 0) {
                            strStatus = strStatus + " OR " + "(rtn." + PstMatReturn.fieldNames[PstMatReturn.FLD_RETURN_STATUS] + " =" + srcAccPayable.getApstatus().get(b) + ")";
                        } else {
                            strStatus = "(rtn." + PstMatReturn.fieldNames[PstMatReturn.FLD_RETURN_STATUS] + " =" + srcAccPayable.getApstatus().get(b) + ")";
                        }
		}
		whereClause = whereClause +"(" + strStatus + ") AND";
               }

               //by status
                String strStatusRcv = "";
                /*if (srcAccPayable.getApstatus() != null && srcAccPayable.getApstatus().size() > 0) {
                    for (int b = 0; b < srcAccPayable.getApstatus().size(); b++) {
                        if (strStatusRcv.length() != 0) {
                            strStatusRcv = strStatusRcv + " OR " + "(rcv." + PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_STATUS] + " =" + srcAccPayable.getApstatus().get(b) + ")";
                        } else {
                            strStatusRcv = "(rcv." + PstMatReceive.fieldNames[PstMatReceive.FLD_RECEIVE_STATUS] + " =" + srcAccPayable.getApstatus().get(b) + ")";
                        }
		}
		whereClause = whereClause +"(" + strStatusRcv + ") AND";
               }*/

            }
        }
        catch(Exception e) {
            System.out.println("Exc in getWhereClauseReceive >>> "+e.toString());
        }
        return whereClause;
    }

    
    /**
     * Fungsi ini untuk mendapatkan list dari detail AP
     * create by: gwawan@14 Mei 2007
     * @param oidInvoice long Merupakan OID dari invoice yang akan dicari detailnya
     * @return result Vector Merupakan list dari detail AP
     */
    public static Vector getListApDetail(long oidInvoice) {
        Vector result = new Vector(1,1);
        DBResultSet dbrs = null;
        String sql = "";
        try {
            sql = "SELECT AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_ACC_PAYABLE_ID]+" AS AP_ID";
            sql+= ", AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_PAYMENT_DATE]+" AS PAYMENT_DATE";
            sql+= ", PS."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+" AS PS_ID";
            sql+= ", PS."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]+" AS PAYMENT_SYSTEM";
            sql+= ", CT."+PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]+" AS CT_ID";
            sql+= ", CT."+PstCurrencyType.fieldNames[PstCurrencyType.FLD_CODE]+" AS CURRENCY_TYPE";
            sql+= ", AP_DETAIL."+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_ACC_PAYABLE_DETAIL_ID]+" AS AP_DETAIL_ID";
            sql+= ", AP_DETAIL."+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_RATE]+" AS RATE";
            sql+= ", AP_DETAIL."+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_AMOUNT]+" AS AMOUNT";
            sql+= ", AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_STATUS]+" AS STATUS_PAYABLE";
            sql+= ", AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_PAYMENT_NUMBER]+" AS PAYMENT_NUMBER";
            sql+= " FROM "+PstAccPayable.TBL_ACC_PAYABLE+" AP INNER JOIN "+PstAccPayableDetail.TBL_ACC_PAYABLE_DETAIL+" AP_DETAIL";
            sql+= " ON AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_ACC_PAYABLE_ID]+"=AP_DETAIL."+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_ACC_PAYABLE_ID];
            sql+= " INNER JOIN "+PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM+" PS";
            sql+= " ON AP_DETAIL."+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_PAYMENT_SYSTEM_ID]+"=PS."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID];
            sql+= " INNER JOIN "+PstCurrencyType.TBL_POS_CURRENCY_TYPE+" CT";
            sql+= " ON AP_DETAIL."+PstAccPayableDetail.fieldNames[PstAccPayableDetail.FLD_CURRENCY_TYPE_ID]+"=CT."+PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID];
            sql+= " WHERE AP."+PstAccPayable.fieldNames[PstAccPayable.FLD_RECEIVE_MATERIAL_ID]+"="+oidInvoice;
            
            //System.out.println("sql at getListApDetail: "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector(1,1);
                AccPayable accPayable = new AccPayable();
                AccPayableDetail accPayableDetail = new AccPayableDetail();
                PaymentSystem paymentSystem = new PaymentSystem();
                CurrencyType currencyType = new CurrencyType();
                
                accPayable.setOID(rs.getLong("AP_ID"));
                accPayable.setPaymentDate(rs.getDate("PAYMENT_DATE"));
                accPayable.setStatus(rs.getInt("STATUS_PAYABLE"));
                accPayable.setPaymentNumber(rs.getString("PAYMENT_NUMBER"));
                temp.add(accPayable);
                
                paymentSystem.setOID(rs.getLong("PS_ID"));
                paymentSystem.setPaymentSystem(rs.getString("PAYMENT_SYSTEM"));
                temp.add(paymentSystem);
                
                currencyType.setOID(rs.getLong("CT_ID"));
                currencyType.setCode(rs.getString("CURRENCY_TYPE"));
                temp.add(currencyType);
                
                accPayableDetail.setOID(rs.getLong("AP_DETAIL_ID"));
                accPayableDetail.setRate(rs.getDouble("RATE"));
                accPayableDetail.setAmount(rs.getDouble("AMOUNT"));
                temp.add(accPayableDetail);
                
                result.add(temp);
            }
            rs.close();
            
            return result;
        }
        catch(Exception e) {
            System.out.println("Exc in getListApDetail >>> "+e.toString());
        }
        finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }
    
    
    public static void updatePurchaseRequest(long oidPayableId, int statusApp) {
        DBResultSet dbrs = null;
        try {
            String sql = "UPDATE " + PstAccPayable.TBL_ACC_PAYABLE +
            " SET "+PstAccPayable.fieldNames[PstAccPayable.FLD_STATUS]+"='"+statusApp+"'"+
            " WHERE " + PstAccPayable.fieldNames[PstAccPayable.FLD_ACC_PAYABLE_ID] +
            " = " + oidPayableId;
            DBHandler.execUpdate(sql);
            
        } catch (Exception e) {
            System.out.println("SessAccPayable.updatePurchaseRequest() err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
    }
    
}
