/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.dimata.posbo.ajax;

import com.dimata.posbo.db.DBHandler;
import com.dimata.posbo.db.DBResultSet;
import com.dimata.pos.entity.billing.BillMain;
import com.dimata.pos.entity.billing.Billdetail;
import com.dimata.pos.entity.billing.PstBillDetail;
import com.dimata.pos.entity.billing.PstBillDetailCode;
import com.dimata.pos.entity.billing.PstBillMain;
import com.dimata.pos.form.billing.FrmBillDetail;
import com.dimata.posbo.entity.warehouse.MatCosting;
import com.dimata.posbo.entity.warehouse.MatDispatch;
import com.dimata.posbo.entity.warehouse.MatReturn;
import com.dimata.posbo.entity.warehouse.PstCostingStockCode;
import com.dimata.posbo.entity.warehouse.PstDispatchStockCode;
import com.dimata.posbo.entity.warehouse.PstMatCosting;
import com.dimata.posbo.entity.warehouse.PstMatDispatch;
import com.dimata.posbo.entity.warehouse.PstMatReturn;
import com.dimata.posbo.entity.warehouse.PstMaterialStockCode;
import com.dimata.posbo.entity.warehouse.PstReceiveStockCode;
import com.dimata.posbo.entity.warehouse.PstReturnStockCode;
import com.dimata.posbo.entity.warehouse.PstSourceStockCode;
import com.dimata.posbo.form.warehouse.FrmMatCosting;
import com.dimata.posbo.form.warehouse.FrmMatDispatch;
import com.dimata.posbo.form.warehouse.FrmMatReceive;
import com.dimata.posbo.form.warehouse.FrmMatReturn;
import com.dimata.posbo.form.warehouse.FrmMatStockOpname;
import com.dimata.posbo.form.warehouse.FrmSourceStockCode;
import com.dimata.qdep.form.FRMQueryString;
import java.sql.ResultSet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author dimata005
 */
public class CheckStockCode extends HttpServlet{

    public static final String CHECK_STOCK_CODE_NAME = "FRM_CHECK_STOCK_CODE_NAME";

    public static final int CHECK_STOCK_CODE_NONE = 0;
    public static final int CHECK_STOCK_CODE_OPNAME = 1;
    public static final int CHECK_STOCK_CODE_RECEIVE = 2;
    public static final int CHECK_STOCK_CODE_DISPATCH = 3;
    public static final int CHECK_STOCK_CODE_COSTING = 4;
    public static final int CHECK_STOCK_CODE_RETURN = 5;
    public static final int CHECK_STOCK_CODE_SALE = 6;
    public static final int CHECK_STOCK_CODE_RETURN_SALE = 7;

    /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Destroys the servlet.
     */
    public void destroy() {

    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }

    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }

    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }

    /**
     * Buatkan fungsi untuk pengecekan serial code berdasarkan value yang dikirim
     * @param request
     * @param response
     * create : opie-eyek 20131127
     */
    private void processRequest(HttpServletRequest request, HttpServletResponse response) {
        //throw new UnsupportedOperationException("Not yet implemented");
        /**
         * Buatkan fungsi yang menangkap value yang akan di cek
         */
        String nameCheck="";
        long oidOpname=0;
        long oidReceive=0;
        long oidReturn=0;
        long oidDispatch=0;
        long oidCosting=0;
        int checkStockCode = 0;
        long oidCashBillDetail=0;
        long oidMat=0;
        long oidCashBillMain=0;
        try {
                nameCheck = FRMQueryString.requestString(request, FrmSourceStockCode.fieldNames[FrmSourceStockCode.FRM_FIELD_STOCK_CODE]);
                oidOpname = FRMQueryString.requestLong(request,FrmMatStockOpname.fieldNames[FrmMatStockOpname.FRM_FIELD_STOCK_OPNAME_ID]);
                oidReceive = FRMQueryString.requestLong(request, FrmMatReceive.fieldNames[FrmMatReceive.FRM_FIELD_RECEIVE_MATERIAL_ID]);
                oidReturn = FRMQueryString.requestLong(request, FrmMatReturn.fieldNames[FrmMatReturn.FRM_FIELD_RETURN_MATERIAL_ID]);
                oidDispatch = FRMQueryString.requestLong(request, FrmMatDispatch.fieldNames[FrmMatDispatch.FRM_FIELD_DISPATCH_MATERIAL_ID]);
                oidCosting = FRMQueryString.requestLong(request, FrmMatCosting.fieldNames[FrmMatCosting.FRM_FIELD_COSTING_MATERIAL_ID]);
                oidCashBillDetail = FRMQueryString.requestLong(request, FrmBillDetail.fieldNames[FrmBillDetail.FRM_FIELD_CASH_BILL_DETAIL_ID]);
                oidMat = FRMQueryString.requestLong(request, FrmBillDetail.fieldNames[FrmBillDetail.FRM_FIELD_MATERIAL_ID]);
                oidCashBillMain  = FRMQueryString.requestLong(request, FrmBillDetail.fieldNames[FrmBillDetail.FRM_FIELD_CASH_BILL_MAIN_ID]);
                checkStockCode = FRMQueryString.requestInt(request, CHECK_STOCK_CODE_NAME);
        } catch (Exception e) {
            System.out.println("Exc : " + e.toString());
        }

        /**
         * fungsi query database berdasarkan value yang akan di cek dan berikan respon nya
         */
         try{
            String buffer="false";

            //cek ini ada pengecekan stock apa?

            if(checkStockCode==CHECK_STOCK_CODE_OPNAME){
                 buffer = checkStockCodeOpname(nameCheck, oidOpname);
            }
            //dyas 20131130
            //tambah kondisi jika checkStockCode sama dengan stock code receive
            //jika ya maka panggil checkStockCodeReceive
            else if(checkStockCode==CHECK_STOCK_CODE_RECEIVE){
                buffer = checkStockCodeReceive(nameCheck, oidReceive);
                if(buffer.equals("false")){
                    buffer = checkStockCodeAlredyExistOnStock(nameCheck);
                }
            }
            //dyas 20131202
            //tambah kondisi jika checkStockCode sama dengan stock code return
            //jika ya maka panggil checkStockCodeReturn
            else if(checkStockCode==CHECK_STOCK_CODE_RETURN){
                buffer = checkStockCodeReturn(nameCheck, oidReturn);
                /**
                 * jika serial number yang di inputkan tidak ada yang sama, lanjut check apakah serial number yang di inputkan ada di stock code
                 */
              if(buffer.equals("false")){
                    MatReturn matreturn = PstMatReturn.fetchExc(oidReturn);
                    buffer = checkStockCodeOnStock(nameCheck,matreturn.getLocationId());
               }
            }
            //dyas 20131202
            //tambah kondisi jika checkStockCode sama dengan stock code dispatch
            //jika ya maka panggil checkStockCodeDispatch
            else if(checkStockCode==CHECK_STOCK_CODE_DISPATCH){
                buffer = checkStockCodeDispatch(nameCheck, oidDispatch);
                
                if(buffer.equals("false")){
                    MatDispatch matDispatch = PstMatDispatch.fetchExc(oidDispatch);
                    buffer = checkStockCodeOnStock(nameCheck,matDispatch.getLocationId());
                }
                
            }
            //dyas 20131202
            //tambah kondisi jika checkStockCode sama dengan stock code costing
            //jika ya maka panggil checkStockCodeCosting
            else if(checkStockCode==CHECK_STOCK_CODE_COSTING){
                buffer = checkStockCodeCosting(nameCheck, oidCosting);
                if(buffer.equals("false")){
                    MatCosting matCosting = PstMatCosting.fetchExc(oidCosting);
                    buffer = checkStockCodeOnStock(nameCheck,matCosting.getLocationId());
                }
            }

            else if(checkStockCode==CHECK_STOCK_CODE_SALE){
               buffer = checkStockCodeSale(nameCheck, oidCashBillDetail);

                if(buffer.equals("false")){
                    BillMain billMain = PstBillMain.listWithCashBillDetailId(oidCashBillDetail);
                    Billdetail billDetail = PstBillDetail.fetchExc(oidCashBillDetail);
                    buffer = checkStockCodeOnStockNew(nameCheck,billMain.getLocationId(),billDetail.getMaterialId());
                }
            }

            else if(checkStockCode==CHECK_STOCK_CODE_RETURN_SALE){
                buffer = checkStockCodeSale(nameCheck, oidCashBillDetail);
                if(buffer.equals("false")){
                    buffer = checkSerialCodeReturSale(oidMat,oidCashBillMain,nameCheck);
                }
            }

            response.getWriter().println(buffer);

         }catch(Exception ex){
            ex.printStackTrace();
         }

    }

    /**
     *
     */
    public static String checkStockCodeOpname(String nameCheck, long oidOpname){
            String buffer="false";
            DBResultSet dbrs = null;
            try {
                String sql = " SELECT * FROM " + PstSourceStockCode.TBL_POS_SOURCE_STOCK_CODE+ " WHERE " +
                               PstSourceStockCode.fieldNames[PstSourceStockCode.FLD_STOCK_CODE] + " = '" + nameCheck+"'"+
                             " AND "+ PstSourceStockCode.fieldNames[PstSourceStockCode.FLD_STOCK_OPNAME_ID] + " = '" + oidOpname+"'";

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                    buffer = "Stock Code Already Exis";
                }
                rs.close();
            } catch (Exception e) {
                System.out.println("err : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
            }
        return buffer;
    }


    //dyas 20131130
    //tambah methods checkStockCodeReceive
    //untuk check apakah id'a sudah pernah diinputkan atau belum
    public static String checkStockCodeReceive(String nameCheck, long oidReceive){
            String buffer="false";
            DBResultSet dbrs = null;
            try {
                String sql = " SELECT * FROM " + PstReceiveStockCode.TBL_POS_RECEIVE_MATERIAL_CODE+ " WHERE " +
                               PstReceiveStockCode.fieldNames[PstReceiveStockCode.FLD_STOCK_CODE] + " = '" + nameCheck+"'"+
                             " AND "+ PstReceiveStockCode.fieldNames[PstReceiveStockCode.FLD_RECEIVE_MATERIAL_ID] + " = '" + oidReceive+"'";

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                    buffer = "Stock Code Already Exis";
}
                rs.close();
            } catch (Exception e) {
                System.out.println("err : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
            }
        return buffer;
    }


    //dyas 20131202
    //tambah methods checkStockCodeReturn
    //untuk check apakah id'a sudah pernah diinputkan atau belum
    public static String checkStockCodeReturn(String nameCheck, long oidReturnId){
            String buffer="false";
            DBResultSet dbrs = null;
            try {
                String sql = " SELECT * FROM " + PstReturnStockCode.TBL_POS_RETURN_MATERIAL_CODE+ " WHERE " +
                               PstReturnStockCode.fieldNames[PstReturnStockCode.FLD_STOCK_CODE] + " = '" + nameCheck+"'"+
                             " AND "+ PstReturnStockCode.fieldNames[PstReturnStockCode.FLD_RETURN_MATERIAL_ID] + " = '" + oidReturnId+"'";

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                    buffer = "Stock Code Already Exis";
                }
                rs.close();
            } catch (Exception e) {
                System.out.println("err : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
            }
        return buffer;
    }


    public static String checkStockCodeOnStock(String nameCheck,long locationId){
            String buffer="Please Check, SN your input doesn't exis on stock";
            boolean result = false;
            DBResultSet dbrs = null;
            try {
                String sql = " SELECT * FROM " + PstMaterialStockCode.TBL_POS_MATERIAL_STOCK_CODE+ " WHERE " +
                               PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_STOCK_CODE] + " = '" + nameCheck+"'"+
                             " AND "+ PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_STOCK_STATUS] + " = '" + PstMaterialStockCode.FLD_STOCK_STATUS_GOOD+"'"+
                             " AND "+PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_LOCATION_ID] + " = '" + locationId+"'";

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                   result=true;
                   //false
                }
                rs.close();

                if(result){
                    buffer="false";
                }

            } catch (Exception e) {
                System.out.println("err : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
            }
        return buffer;
    }
    
    
    
    public static String checkStockCodeOnStockNew(String nameCheck,long locationId, long materialId){
            String buffer="Please Check, SN your input doesn't exis on stock";
            boolean result = false;
            DBResultSet dbrs = null;
            try {
                String sql = " SELECT * FROM " + PstMaterialStockCode.TBL_POS_MATERIAL_STOCK_CODE+ " WHERE " +
                               PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_STOCK_CODE] + " = '" + nameCheck+"'"+
                             " AND "+ PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_STOCK_STATUS] + " = '" + PstMaterialStockCode.FLD_STOCK_STATUS_GOOD+"'"+
                             " AND "+PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_LOCATION_ID] + " = '" + locationId+"'"+
                             " AND "+PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_MATERIAL_ID] + " = '" + materialId+"'";

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                   result=true;
                   //false
                }
                rs.close();

                if(result){
                    buffer="false";
                }

            } catch (Exception e) {
                System.out.println("err : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
            }
        return buffer;
    }


     public static double checkStockValueOnStock(String nameCheck){
            double valueStock =0.0;
            DBResultSet dbrs = null;
            try {
                String sql = " SELECT "+PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_STOCK_VALUE] +" FROM " + PstMaterialStockCode.TBL_POS_MATERIAL_STOCK_CODE+ " WHERE " +
                               PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_STOCK_CODE] + " = '" + nameCheck+"'"+
                             " AND "+ PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_STOCK_STATUS] + " = '" + PstMaterialStockCode.FLD_STOCK_STATUS_GOOD+"'";

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                    valueStock = rs.getDouble(1);
                }
                rs.close();
            } catch (Exception e) {
                System.out.println("err : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
            }
        return valueStock;
    }


    //dyas 20131202
    //tambah methods checkStockCodeDispatch
    //untuk check apakah id'a sudah pernah diinputkan atau belum
    public static String checkStockCodeDispatch(String nameCheck, long oidDispatch){
            String buffer="false";
            DBResultSet dbrs = null;
            try {
                String sql = " SELECT * FROM " + PstDispatchStockCode.TBL_POS_DISPATCH_MATERIAL_CODE+ " WHERE " +
                               PstDispatchStockCode.fieldNames[PstDispatchStockCode.FLD_STOCK_CODE] + " = '" + nameCheck+"'"+
                             " AND "+ PstDispatchStockCode.fieldNames[PstDispatchStockCode.FLD_DISPATCH_MATERIAL_ID] + " = '" + oidDispatch+"'";

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                    buffer = "Stock Code Already Exis";
                }
                rs.close();
            } catch (Exception e) {
                System.out.println("err : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
            }
        return buffer;
    }


    //dyas 20131202
    //tambah methods checkStockCodeCosting
    //untuk check apakah id'a sudah pernah diinputkan atau belum
    public static String checkStockCodeCosting(String nameCheck, long oidCosting){
            String buffer="false";
            DBResultSet dbrs = null;
            try {
                String sql = " SELECT * FROM " + PstCostingStockCode.TBL_POS_COSTING_MATERIAL_CODE+ " WHERE " +
                               PstCostingStockCode.fieldNames[PstCostingStockCode.FLD_STOCK_CODE] + " = '" + nameCheck+"'"+
                             " AND "+ PstCostingStockCode.fieldNames[PstCostingStockCode.FLD_COSTING_MATERIAL_ID] + " = '" + oidCosting+"'";

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                    buffer = "Stock Code Already Exis";
                }
                rs.close();
            } catch (Exception e) {
                System.out.println("err : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
            }
        return buffer;
    }

    /**
     * untuk mengecek apakah code tsb sudah pernah diinputkan atau belum
     * @param nameCheck
     * @param oidDispatch
     * @return
     */
    public static String checkStockCodeSale(String nameCheck, long oidSaleItem){
            String buffer="false";
            DBResultSet dbrs = null;
            try {
                String sql = " SELECT * FROM " + PstBillDetailCode.TBL_CASH_BILL_DETAIL_CODE+ " WHERE " +
                               PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_STOCK_CODE] + " = '" + nameCheck+"'"+
                             " AND "+ PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_SALE_ITEM_ID] + " = '" + oidSaleItem+"'";

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                    buffer = "Stock Code Already Exis";
                }
                rs.close();
            } catch (Exception e) {
                System.out.println("err : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
            }
        return buffer;
    }

    public static String checkSerialCodeReturSale(long oidMat, long oidCashBillMainId, String nameCheck) {
        /**
         *  SELECT CBDC.* FROM cash_bill_detail_code AS CBDC
            INNER JOIN cash_bill_detail AS CBD ON CBD.CASH_BILL_DETAIL_ID=CBDC.SALE_ITEM_ID
            INNER JOIN cash_bill_main AS CBM ON CBM.CASH_BILL_MAIN_ID=CBD.CASH_BILL_MAIN_ID
            WHERE CBM.CASH_BILL_MAIN_ID='504404547934328462' AND CBD.MATERIAL_ID='504404384580961000';
         */
        String buffer="Please Check, SN your input doesn't exis on Return";
        boolean result = false;
        DBResultSet dbrs = null;
        try {
            String sql =" SELECT CBDC.* FROM "+PstBillDetailCode.TBL_CASH_BILL_DETAIL_CODE+" AS CBDC "+
            " INNER JOIN "+ PstBillDetail.TBL_CASH_BILL_DETAIL +" AS CBD ON CBD.CASH_BILL_DETAIL_ID=CBDC.SALE_ITEM_ID "+
            " INNER JOIN "+ PstBillMain.TBL_CASH_BILL_MAIN +" AS CBM ON CBM.CASH_BILL_MAIN_ID=CBD.CASH_BILL_MAIN_ID "+
            " WHERE CBM.CASH_BILL_MAIN_ID='"+oidCashBillMainId+"' AND CBD.MATERIAL_ID='"+oidMat+"'"+
            " AND CBDC.STOCK_CODE='"+nameCheck+"'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            /*while (rs.next()) {
                buffer = "Stock Code Already Exis";
            }*/
            while (rs.next()) {
                   result=true;
                   //false
            }
            rs.close();

            if(result){
                buffer="false";
            }
        } catch (Exception e) {
            System.out.println("");
        }
        return buffer;
    }


     public static String checkStockCodeAlredyExistOnStock(String nameCheck){
            String buffer="Please Check, SN your input alredy exist on stock";
            boolean result = false;
            DBResultSet dbrs = null;
            try {
                String sql = " SELECT * FROM " + PstMaterialStockCode.TBL_POS_MATERIAL_STOCK_CODE+ " WHERE " +
                               PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_STOCK_CODE] + " = '" + nameCheck+"'"+
                             " AND "+ PstMaterialStockCode.fieldNames[PstMaterialStockCode.FLD_STOCK_STATUS] + " = '" + PstMaterialStockCode.FLD_STOCK_STATUS_GOOD+"'";

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                   result=true;
                   //false
                }
                rs.close();

                if(!result){
                    buffer="false";
                }

            } catch (Exception e) {
                System.out.println("err : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
            }
        return buffer;
    }

}
