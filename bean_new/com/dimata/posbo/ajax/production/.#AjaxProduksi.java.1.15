/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dimata.posbo.ajax.production;

import com.dimata.aiso.entity.admin.PstAppUser;
import com.dimata.aiso.entity.masterdata.mastertabungan.JenisKredit;
import com.dimata.aiso.entity.masterdata.mastertabungan.PstJenisKredit;
import com.dimata.common.entity.contact.ContactList;
import com.dimata.common.entity.custom.DataCustom;
import com.dimata.common.entity.custom.PstDataCustom;
import com.dimata.common.entity.location.Location;
import com.dimata.common.entity.location.PstLocation;
import com.dimata.common.entity.logger.LogSysHistory;
import com.dimata.common.entity.logger.PstLogSysHistory;
import com.dimata.common.entity.system.PstSystemProperty;
import com.dimata.hanoman.entity.masterdata.Contact;
import com.dimata.hanoman.entity.masterdata.PstContact;
import com.dimata.harisma.entity.employee.Employee;
import com.dimata.harisma.entity.employee.PstEmployee;
import com.dimata.harisma.entity.masterdata.Position;
import com.dimata.harisma.entity.masterdata.PstPosition;
import com.dimata.pos.entity.billing.BillMain;
import com.dimata.pos.entity.billing.Billdetail;
import com.dimata.pos.entity.billing.PstBillDetail;
import com.dimata.pos.entity.billing.PstBillMain;
import com.dimata.pos.form.billing.FrmBillDetail;
import com.dimata.pos.form.billing.FrmBillMain;
import com.dimata.posbo.entity.admin.AppUser;
import com.dimata.posbo.entity.masterdata.Category;
import com.dimata.posbo.entity.masterdata.Company;
import com.dimata.posbo.entity.masterdata.Material;
import com.dimata.posbo.entity.masterdata.MaterialStock;
import com.dimata.posbo.entity.masterdata.Merk;
import com.dimata.posbo.entity.masterdata.PstCategory;
import com.dimata.posbo.entity.masterdata.PstCompany;
import com.dimata.posbo.entity.masterdata.PstMaterial;
import com.dimata.posbo.entity.masterdata.PstMaterialStock;
import com.dimata.posbo.entity.masterdata.PstMerk;
import com.dimata.posbo.entity.masterdata.PstUnit;
import com.dimata.posbo.entity.masterdata.Unit;
import com.dimata.posbo.entity.purchasing.PstPurchaseRequestItem;
import com.dimata.posbo.entity.purchasing.PurchaseRequest;
import com.dimata.posbo.entity.purchasing.PurchaseRequestItem;
import com.dimata.posbo.form.purchasing.CtrlPurchaseRequest;
import com.dimata.posbo.form.purchasing.CtrlPurchaseRequestItem;
import com.dimata.posbo.form.purchasing.FrmPurchaseRequest;
import com.dimata.posbo.session.admin.SessUserSession;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.sedana.entity.kredit.Pinjaman;
import com.dimata.sedana.entity.kredit.PstPinjaman;
import com.dimata.services.WebServices;
import com.dimata.util.Command;
import com.dimata.util.Formater;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.Vector;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author arise
 */
public class AjaxProduksi extends HttpServlet {

	//DATATABLES
	private String searchTerm;
	private String colName;
	private int colOrder;
	private String dir;
	private int start;
	private int amount;

	private JSONObject jSONObject = new JSONObject();
	private JSONArray jSONArray = new JSONArray();
	private JSONArray jsonArrayJenisProduksi = new JSONArray();
	private JSONArray jsonArrayDataProduksi = new JSONArray();
	private JSONArray jsonArrayPrintValue = new JSONArray();

	private String dataFor = "";
	private String approot = "";
	private String htmlReturn = "";
	private String message = "";
	private String apiUrl = "";
	private String sedanaAppUrl ="";
	private String hrApiUrl = "";
	private String oidDelivery = "";

  private long userId = 0;
  private String userName = "";
	private long oidCbm = 0;

	private boolean sessLogin = false;

	private int iCommand = 0;
	private int iErrCode = 0;
	private int sessLanguage = 0;

	
	private NumberFormat numberFormat = NumberFormat.getInstance(new Locale("ID", "id"));
  DataCustom dc = new DataCustom();
  Vector user = new Vector();

	protected void processRequest(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		PrintWriter out = response.getWriter();

		this.jsonArrayJenisProduksi = new JSONArray();
		this.jsonArrayDataProduksi = new JSONArray();
		this.jsonArrayPrintValue = new JSONArray();
		this.jSONArray = new JSONArray();
		this.jSONObject = new JSONObject();

		this.hrApiUrl = PstSystemProperty.getValueByName("HARISMA_URL");
		this.dataFor = FRMQueryString.requestString(request, "FRM_FIELD_DATA_FOR");
		this.approot = FRMQueryString.requestString(request, "FRM_FIELD_APPROOT");
		this.apiUrl = PstSystemProperty.getValueByName("SEDANA_URL");
		this.sedanaAppUrl = PstSystemProperty.getValueByName("SEDANA_APP_URL");
		this.oidDelivery = PstSystemProperty.getValueByName("STAFF_DELIVERY_OID");
		this.htmlReturn = "";
		this.message = "";
		
    this.userId = FRMQueryString.requestLong(request, "SEND_USER_ID");
    this.userName = FRMQueryString.requestString(request, "SEND_USER_NAME");
		this.oidCbm = FRMQueryString.requestLong(request, "oid");

		this.sessLogin = false;

    com.dimata.aiso.entity.admin.AppUser au = new com.dimata.aiso.entity.admin.AppUser();
		iCommand = FRMQueryString.requestCommand(request);

    try {
        au = PstAppUser.fetch(this.userId);
      } catch (Exception e) {
      }
    String where = PstDataCustom.fieldNames[PstDataCustom.FLD_DATA_NAME]+" = 'user_create_document_location' "+" AND " + PstDataCustom.fieldNames[PstDataCustom.FLD_OWNER_ID]+" = "+this.userId;
    this.user = PstDataCustom.list(0, 0, where, "");
    for(int i = 0; i < this.user.size(); i++){
      dc = (DataCustom) this.user.get(i);
    }


		//CHECK USER LOGIN SESSION
		HttpSession session = request.getSession();
		SessUserSession userSession = (SessUserSession) session.getValue(SessUserSession.HTTP_SESSION_NAME);
		if (userSession != null) {
			if (userSession.isLoggedIn()) {
				this.sessLogin = true;
			}
		}

		if (this.sessLogin == true) {
			switch (this.iCommand) {
				case Command.SAVE:
					commandSave(request, response);
					break;

				case Command.DELETE:
					//commandDelete(request);
					break;

				case Command.LIST:
					commandList(request, response);
					break;

				default:
					//commandNone(request);
					break;
			}
		} else {
			this.iErrCode = 1;
			this.message = "Sesi login Anda telah berakhir. Silakan login ulang untuk melanjutkan.";
		}

		try {

			this.jSONObject.put("FRM_FIELD_HTML", this.htmlReturn);
			this.jSONObject.put("RETURN_DATA_JENIS_PRODUKSI", this.jsonArrayJenisProduksi);
			this.jSONObject.put("RETURN_DATA_PRODUKSI", this.jsonArrayDataProduksi);
			this.jSONObject.put("RETURN_PRINT_VALUE", this.jsonArrayPrintValue);
			this.jSONObject.put("RETURN_DATA_ARRAY", this.jSONArray);
			this.jSONObject.put("RETURN_SESSION_LOGIN", this.sessLogin);
			this.jSONObject.put("RETURN_ERROR_CODE", "" + this.iErrCode);
			this.jSONObject.put("RETURN_MESSAGE", "" + this.message);

		} catch (JSONException jSONException) {
			jSONException.printStackTrace();
		}

		response.getWriter().print(this.jSONObject);

	}

	public void commandSave(HttpServletRequest request, HttpServletResponse response) {
		if (this.dataFor.equals("assignPetugasDelivery")) {
			assignPetugas(request);
		} else if (this.dataFor.equals("createSrDoc")) {
			createSrDoc(request, response);
		}
	}

	public void assignPetugas(HttpServletRequest request) {
		long cbmOID = FRMQueryString.requestLong(request, "cbmOID");
		long empOID = FRMQueryString.requestLong(request, "empOID");
		int deliveryStatus = FRMQueryString.requestInt(request, "deliveryStatus");
		Date jadwalKirim = Formater.formatDate(FRMQueryString.requestString(request, "jadwalKirim"), "yyyy-MM-dd");
		BillMain cbm = new BillMain();
		try {
			cbm = PstBillMain.fetchExc(cbmOID);
			if (empOID != 0) {
				cbm.setDoPersonId(empOID);
				if (jadwalKirim != null) {
					cbm.setShippingDate(jadwalKirim);
				}
			}			
			cbm.setStatus(deliveryStatus);
			long oid = PstBillMain.updateExc(cbm);
			if (oid != 0) {
				this.message = "Simpan Berhasil!";
			} else {
				this.message = "Simpan Gagal! Pastikan data kembali dengan benar";
			}
		} catch (Exception e) {
			printErrorMessage(e.getMessage());
		}
	}

	public void createSrDoc(HttpServletRequest request, HttpServletResponse response) {
		String userName = FRMQueryString.requestString(request, "userName");
		long userId = FRMQueryString.requestLong(request, "userId");
		long oid = FRMQueryString.requestLong(request, "oid");
		String[] cbdIds = FRMQueryString.requestStringValues(request, FrmBillDetail.fieldNames[FrmBillDetail.FRM_FIELD_CASH_BILL_DETAIL_ID]);
		int errCnt = -1;
		if (cbdIds.length > 0) {
			try {
				CtrlPurchaseRequest cpr = new CtrlPurchaseRequest(request);
				cpr.action(this.iCommand, oid, userName, userId);
				oid = cpr.getOID();
				for (int i = 0; i < cbdIds.length; i++) {
					long tempBdId = Long.parseLong(cbdIds[i]);
					Billdetail cbd = PstBillDetail.fetchExc(tempBdId);

					PurchaseRequestItem prItem = new PurchaseRequestItem();
					prItem.setMaterialId(cbd.getMaterialId());
					prItem.setUnitId(cbd.getUnitId());
					prItem.setQuantity(cbd.getQty());
					prItem.setPurchaseOrderId(oid);

					long oidRes = PstPurchaseRequestItem.insertExc(prItem);
					if (oidRes != 0) {
						errCnt = 0;
					} else {
						errCnt++;
					}

				}
			} catch (Exception e) {
				printErrorMessage(e.getMessage());
			}
		}
		if (errCnt == 0) {
			this.message = "Dokumen Store Request Berhasil Dibuat";
			this.htmlReturn = "/purchasing/material/pom/prtowarehousematerial_edit.jsp?command=" + Command.EDIT + "&hidden_material_request_id=" + oid;
		}
	}

	//COMMAND LIST==============================================================
	public void commandList(HttpServletRequest request, HttpServletResponse response) {
		if (this.dataFor.equals("listProduksiAll")) {
			String[] cols = {
				" CBM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO],
				" CNT." + PstContact.fieldNames[PstContact.FLD_PERSON_NAME],
				" CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE],
				" CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANS_TYPE],
				" JK." + PstJenisKredit.fieldNames[PstJenisKredit.FLD_NAME_KREDIT],
				" LC." + PstLocation.fieldNames[PstLocation.FLD_NAME],
				" CBM." + PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT],
				" AP." + PstPinjaman.fieldNames[PstPinjaman.FLD_STATUS_PINJAMAN],
				" CBM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO]
			};
			jSONObject = listDataTables(request, response, cols, this.dataFor, this.jSONObject);
		} else if (this.dataFor.equals("listPetugas")) {
			String[] cols = {
				" HE." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM],
				" HE." + PstEmployee.fieldNames[PstEmployee.FLD_FULL_NAME],
				" AC." + PstCompany.fieldNames[PstCompany.FLD_COMPANY_NAME],
				" HE." + PstEmployee.fieldNames[PstEmployee.FLD_ADDRESS],
				" HE." + PstEmployee.fieldNames[PstEmployee.FLD_PHONE],
				" HE." + PstEmployee.fieldNames[PstEmployee.FLD_HANDPHONE]
			};
			jSONObject = listDataTables(request, response, cols, this.dataFor, this.jSONObject);
		} else if (this.dataFor.equals("listPemesanan")) {
			String[] cols = {
				" BM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO],
				" MT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU],
				" MT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE],
				" MT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME],
				" CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME],
				" UN." + PstUnit.fieldNames[PstUnit.FLD_NAME],
				" MK." + PstMerk.fieldNames[PstMerk.FLD_NAME],
				" MS." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_QTY]
			};
			jSONObject = listDataTables(request, response, cols, this.dataFor, this.jSONObject);
		}
	}

	public JSONObject listDataTables(HttpServletRequest request, HttpServletResponse response, String[] cols, String dataFor, JSONObject result) {
		this.searchTerm = FRMQueryString.requestString(request, "sSearch");
		int amount = 10;
		int start = 0;
		int col = 0;
		String addSql = "";
		String dir = "asc";
		String sStart = request.getParameter("iDisplayStart");
		String sAmount = request.getParameter("iDisplayLength");
		String sCol = request.getParameter("iSortCol_0");
		String sdir = request.getParameter("sSortDir_0");
  

		if (sStart != null) {
			start = Integer.parseInt(sStart);
			if (start < 0) {
				start = 0;
			}
		}
		if (sAmount != null) {
			amount = Integer.parseInt(sAmount);
			if (amount < 10) {
				amount = 10;
			}
		}
		if (sCol != null) {
			col = Integer.parseInt(sCol);
			if (col < 0) {
				col = 0;
			}
		}
		if (sdir != null) {
			if (!sdir.equals("asc")) {
				dir = "desc";
			}
		}

		String whereClause = "";
		if (dataFor.equals("listProduksiAll")) {
			whereClause += "("
					+ " CBM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO] + " LIKE '%" + searchTerm + "%'"
					+ " OR CNT." + PstContact.fieldNames[PstContact.FLD_PERSON_NAME] + " LIKE '%" + searchTerm + "%'"
					//+ " OR AP." + PstPinjaman.fieldNames[PstPinjaman.FLD_TGL_PENGAJUAN] + " LIKE '%" + searchTerm + "%'"
					+ " OR CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANS_TYPE] + " LIKE '%" + searchTerm + "%'"
					//+ " OR JK." + PstJenisKredit.fieldNames[PstJenisKredit.FLD_NAME_KREDIT] + " LIKE '%" + searchTerm + "%'"
					+ " OR LC." + PstLocation.fieldNames[PstLocation.FLD_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR CBM." + PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT] + " LIKE '%" + searchTerm + "%'"
					//+ " OR AP." + PstPinjaman.fieldNames[PstPinjaman.FLD_STATUS_PINJAMAN] + " LIKE '%" + searchTerm + "%'"
					+ ")";
		} else if (dataFor.equals("listPetugas")) {
			whereClause += "("
					+ " HE." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM] + " LIKE '%" + searchTerm + "%'"
					+ " OR HE." + PstEmployee.fieldNames[PstEmployee.FLD_FULL_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR AC." + PstCompany.fieldNames[PstCompany.FLD_COMPANY_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR HE." + PstEmployee.fieldNames[PstEmployee.FLD_ADDRESS] + " LIKE '%" + searchTerm + "%'"
					+ " OR HE." + PstEmployee.fieldNames[PstEmployee.FLD_PHONE] + " LIKE '%" + searchTerm + "%'"
					+ " OR HE." + PstEmployee.fieldNames[PstEmployee.FLD_HANDPHONE] + " LIKE '%" + searchTerm + "%'"
					+ ")";
		} else if (dataFor.equals("listPemesanan")) {
			whereClause += "("
					+ " BM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO] + " LIKE '%" + searchTerm + "%'"
					+ " OR MT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + searchTerm + "%'"
					+ " OR MT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + searchTerm + "%'"
					+ " OR MT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR UN." + PstUnit.fieldNames[PstUnit.FLD_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR MK." + PstMerk.fieldNames[PstMerk.FLD_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR MS." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_QTY] + " LIKE '%" + searchTerm + "%'"
					+ ")";
		}

		String colName = cols[col];
		int total = -1;

		if (dataFor.equals("listProduksiAll")) {
			whereClause += " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_STATUS] + "=" + PstBillMain.PETUGAS_DELIVERY_STATUS_ON_PRODUCTION;
           String stt = "";
        if (this.dc.getOwnerId() != 0) {
            for(int i = 0; i < this.user.size(); i++){
                this.dc = (DataCustom) this.user.get(i);
                if (stt.length() != 0) {
                    stt = stt + " OR " + "( LC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID] + " =" + dc.getDataValue()+ ")";
                } else {
                    stt = "( LC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID] + " =" + dc.getDataValue() + ")";
                }
            }
            stt = "(" + stt + ")";
            whereClause += " AND "+stt;
        }
			total = PstPinjaman.countProduksi(whereClause);
		} else if (dataFor.equals("listPetugas")) {
      JSONArray jArr = new JSONArray();
        whereClause = PstEmployee.fieldNames[PstEmployee.FLD_POSITION_ID] + " = " + this.oidDelivery;
      String param = "limitStart=" + WebServices.encodeUrl("" + 0) + "&recordToGet=" + WebServices.encodeUrl("" + 0)
              + "&whereClause=" + WebServices.encodeUrl(whereClause) + "&order=" + WebServices.encodeUrl("");
      JSONObject jo = WebServices.getAPIWithParam("", hrApiUrl + "/employee/employee-list", param);
      try {
        jArr = jo.getJSONArray("DATA");
       }catch(Exception e){}
			total = jArr.length();
		} else if (dataFor.equals("listPemesanan")) {
			if (this.oidCbm != 0) {
				Pinjaman pinjam = new Pinjaman();
				try {
					pinjam = PstPinjaman.fetchExc(this.oidCbm);
				} catch (Exception e) {
				}
				whereClause += " AND BM." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] + "=" + pinjam.getBillMainId();
			}
			total = PstBillDetail.getCountListPemesanan(whereClause);
		}

		this.amount = amount;

		this.colName = colName;
		this.dir = dir;
		this.start = start;
		this.colOrder = col;

		try {
			result = getData(total, request, dataFor, addSql);
		} catch (Exception ex) {
			printErrorMessage(ex.getMessage());
		}

		return result;
	}

	public JSONObject getData(int total, HttpServletRequest request, String datafor, String addSql) {
		int totalAfterFilter = total;
		JSONObject result = new JSONObject();
		JSONArray array = new JSONArray();
		BillMain billMain = new BillMain();
		Location location = new Location();
		JenisKredit typeKredit = new JenisKredit();
		Contact anggota = new Contact();
//		SumberDana sumberDana = new SumberDana();
//		LogSysHistory history = new LogSysHistory();
//		JenisTransaksi jenisTransaksi = new JenisTransaksi();

		String whereClause = "";
		String order = "";
  
//  To Data Custom get UserId :)
    boolean isLoggedIn = false;
    int userGroupNewStatus = -1;
    String userName = "";
    long userId = 0;
		HttpSession session = request.getSession();
    session.setMaxInactiveInterval(60 * 60 * 2);
    SessUserSession userSession = (SessUserSession) session.getValue(SessUserSession.HTTP_SESSION_NAME);
    try{
        if(userSession==null){
            userSession= new SessUserSession();
        }else{
            if(userSession.isLoggedIn()==true){
                isLoggedIn  = true;
                AppUser appUser = userSession.getAppUser();
                userGroupNewStatus = appUser.getUserGroupNew();
                userName = appUser.getLoginId();
                userId = appUser.getOID();
            }
        }
    }catch (Exception exc){
        //System.out.println(" >>> Exception during check login");
    }

		if (datafor.equals("listProduksiAll")) {
			whereClause += "("
					+ " CBM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO] + " LIKE '%" + searchTerm + "%'"
					+ " OR CNT." + PstContact.fieldNames[PstContact.FLD_PERSON_NAME] + " LIKE '%" + searchTerm + "%'"
					//+ " OR AP." + PstPinjaman.fieldNames[PstPinjaman.FLD_TGL_PENGAJUAN] + " LIKE '%" + searchTerm + "%'"
					+ " OR CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANS_TYPE] + " LIKE '%" + searchTerm + "%'"
					//+ " OR JK." + PstJenisKredit.fieldNames[PstJenisKredit.FLD_NAME_KREDIT] + " LIKE '%" + searchTerm + "%'"
					+ " OR LC." + PstLocation.fieldNames[PstLocation.FLD_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR CBM." + PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT] + " LIKE '%" + searchTerm + "%'"
					//+ " OR AP." + PstPinjaman.fieldNames[PstPinjaman.FLD_STATUS_PINJAMAN] + " LIKE '%" + searchTerm + "%'"
					+ ")";
//		} else if (datafor.equals("listPetugas")) {
//			whereClause += "("
//					+ " HE." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM] + " LIKE '%" + searchTerm + "%'"
//					+ " OR HE." + PstEmployee.fieldNames[PstEmployee.FLD_FULL_NAME] + " LIKE '%" + searchTerm + "%'"
//					+ " OR AC." + PstCompany.fieldNames[PstCompany.FLD_COMPANY_NAME] + " LIKE '%" + searchTerm + "%'"
//					+ " OR HE." + PstEmployee.fieldNames[PstEmployee.FLD_ADDRESS] + " LIKE '%" + searchTerm + "%'"
//					+ " OR HE." + PstEmployee.fieldNames[PstEmployee.FLD_PHONE] + " LIKE '%" + searchTerm + "%'"
//					+ " OR HE." + PstEmployee.fieldNames[PstEmployee.FLD_HANDPHONE] + " LIKE '%" + searchTerm + "%'"
//					+ ")";
		} else if (datafor.equals("listPemesanan")) {
			whereClause += "("
					+ " BM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO] + " LIKE '%" + searchTerm + "%'"
					+ " OR MT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + " LIKE '%" + searchTerm + "%'"
					+ " OR MT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE] + " LIKE '%" + searchTerm + "%'"
					+ " OR MT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR UN." + PstUnit.fieldNames[PstUnit.FLD_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR MK." + PstMerk.fieldNames[PstMerk.FLD_NAME] + " LIKE '%" + searchTerm + "%'"
					+ " OR MS." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_QTY] + " LIKE '%" + searchTerm + "%'"
					+ ")";
		}

		if (this.colOrder >= 0) {
			order += "" + colName + " " + dir + "";
		}

		Vector listData = new Vector(1, 1);
    JSONArray jArr = new JSONArray();
		if (datafor.equals("listProduksiAll")) {
			whereClause += " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_STATUS] + "=" + PstBillMain.PETUGAS_DELIVERY_STATUS_ON_PRODUCTION;
     String stt = "";
       if (this.dc.getOwnerId() != 0) {
                for(int i = 0; i < this.user.size(); i++){
                this.dc = (DataCustom) this.user.get(i);
                    if (stt.length() != 0) {
                        stt = stt + " OR " + "( LC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID] + " =" + dc.getDataValue()+ ")";
                    } else {
                        stt = "( LC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID] + " =" + dc.getDataValue() + ")";
                    }
                }
                stt = "(" + stt + ")";
                whereClause += " AND "+stt;
            }
			listData = PstPinjaman.listProduksi(start, amount, whereClause, order);
		}else if (datafor.equals("listPemesanan")) {
			if (this.oidCbm != 0) {
				whereClause += " AND BM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + "=" + this.oidCbm
						+ " AND MS." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_LOCATION_ID]
						+ " = BM." + PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID];
			}
			listData = PstBillDetail.listPemesanan(start, amount, whereClause, order);
		} else if (datafor.equals("listPetugas")) {
whereClause = PstEmployee.fieldNames[PstEmployee.FLD_POSITION_ID] + " = " + this.oidDelivery;
     String param = "limitStart=" + WebServices.encodeUrl("" + 0) + "&recordToGet=" + WebServices.encodeUrl("" + 0)
             + "&whereClause=" + WebServices.encodeUrl(whereClause) + "&order=" + WebServices.encodeUrl("");
     JSONObject jo = WebServices.getAPIWithParam("", hrApiUrl + "/employee/employee-list", param);
     try {
       jArr = jo.getJSONArray("DATA");

       if (jArr.length() > 0) {
         for (int x = 0; x < jArr.length(); x++) {
           Company comp = new Company();
           JSONArray ja = new JSONArray();
           JSONObject tempObj = jArr.getJSONObject(x);

           ja.put("<div class='text-center'>" + (this.start + x + 1) + "</div>");
           ja.put("<div class='text-center'>" + tempObj.optString(com.dimata.harisma.entity.employee.PstEmployee.fieldNames[com.dimata.harisma.entity.employee.PstEmployee.FLD_EMPLOYEE_NUM], "-") + "</div>");
           ja.put("<div class='text-left'>" + tempObj.optString(com.dimata.harisma.entity.employee.PstEmployee.fieldNames[com.dimata.harisma.entity.employee.PstEmployee.FLD_FULL_NAME], "-") + "</div>");
//           ja.put("<div class='text-left'>" + tempObj.optString(com.dimata.harisma.entity.employee.PstEmployee.fieldNames[com.dimata.harisma.entity.employee.PstEmployee.FLD_FULL_NAME], "-") + "</div>");
           ja.put("<div class='text-left'>" + tempObj.optString(com.dimata.harisma.entity.employee.PstEmployee.fieldNames[com.dimata.harisma.entity.employee.PstEmployee.FLD_ADDRESS], "-") + "</div>");
           ja.put("<div class='text-center'>" + tempObj.optString(com.dimata.harisma.entity.employee.PstEmployee.fieldNames[com.dimata.harisma.entity.employee.PstEmployee.FLD_PHONE], "-") + "</div>");
           ja.put("<div class='text-center'>" + tempObj.optString(com.dimata.harisma.entity.employee.PstEmployee.fieldNames[com.dimata.harisma.entity.employee.PstEmployee.FLD_HANDPHONE], "-") + "</div>");
           String button = "<div class='text-center'>"
                   + "<button type='button' title='Detail' "
                   + "class='btn btn-xs btn-warning select-petugas-btn' "
                   + "data-oid='" + tempObj.optLong(com.dimata.harisma.entity.employee.PstEmployee.fieldNames[com.dimata.harisma.entity.employee.PstEmployee.FLD_EMPLOYEE_ID]) + "'"
                   + "data-name='" + tempObj.optString(com.dimata.harisma.entity.employee.PstEmployee.fieldNames[com.dimata.harisma.entity.employee.PstEmployee.FLD_FULL_NAME]) + "'"
                   + "data-empNum='" + tempObj.optString(com.dimata.harisma.entity.employee.PstEmployee.fieldNames[com.dimata.harisma.entity.employee.PstEmployee.FLD_EMPLOYEE_NUM]) + "'> "
                   + "<i class='fa fa-pencil'></i>"
                   + "</button>";
           ja.put(button);

           array.put(ja);

         }
       }
     } catch (Exception e) {
     }
       
//			listData = PstEmployee.listPetugas(start, amount, whereClause, order);
		} else if (datafor.equals("listPemesanan")) {
			if (this.oidCbm != 0) {
				whereClause += " AND BM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + "=" + this.oidCbm
						+ " AND MS." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_LOCATION_ID]
						+ " = BM." + PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID];
			}
			listData = PstBillDetail.listPemesanan(start, amount, whereClause, order);
		}
		
		for (int i = 0; i <= listData.size() - 1; i++) {
			JSONArray ja = new JSONArray();
			if (datafor.equals("listProduksiAll")) {
				billMain = (BillMain) listData.get(i);
				Pinjaman pinjaman = new Pinjaman();
				double jumlahPengajuan = 0;
				try {
					//billMain = PstBillMain.fetchExc(pinjaman.getBillMainId());
					anggota = PstContact.fetchExc(billMain.getCustomerId());
					location = PstLocation.fetchExc(billMain.getLocationId());
					//whereClause = PstPinjaman.fieldNames[PstPinjaman.FLD_CASH_BILL_MAIN_ID] + "=" + billMain.getOID(); 
					//Vector listPinjaman = PstPinjaman.list(0, 0, whereClause, "");
					//pinjaman = (Pinjaman) listPinjaman.get(0);
					
					String url = this.sedanaAppUrl + "/kredit/pengajuan/status-by-bill/" + billMain.getOID(); 
					JSONObject jsonObj = WebServices.getAPI("", url);
					
					PstPinjaman.convertPinjamanFromJson(jsonObj, pinjaman); 
					
					typeKredit = PstTypeKredit.fetchExc(pinjaman.getTipeKreditId());
				} catch (Exception e) {
					printErrorMessage(e.getMessage());
					message = e.toString();
				}
				if(pinjaman.getJumlahPinjaman() == 0){
					Vector<Billdetail> listBillDetail = PstBillDetail.list(0, 0, PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] + "=" + billMain.getOID(), "");
					if(!listBillDetail.isEmpty()){
						for(Billdetail bd : listBillDetail){
							jumlahPengajuan += bd.getItemPrice();
						}
					}
				} else {
					jumlahPengajuan = pinjaman.getJumlahPinjaman();
				}
				ja.put("" + (this.start + i + 1) + ".");
				ja.put("" + (pinjaman.getNoKredit().equals("") ? billMain.getInvoiceNumber() : pinjaman.getNoKredit()) + "");
				ja.put("" + anggota.getPersonName());
				ja.put("<div class='text-center'> " + ((pinjaman.getTglPengajuan() == null)? "-": Formater.formatDate(pinjaman.getTglPengajuan(), "dd-MM-yyyy")) + " </div>");
				ja.put("" + PstBillMain.payType[billMain.getTransctionType()] + "");
				ja.put("<div class='text-center'>" + ((typeKredit.getNamaKredit().equals(""))? "-":typeKredit.getNamaKredit()) + "</div>");
				//ja.put("" + sumberDana.getKodeSumberDana() + " - " + sumberDana.getJudulSumberDana());
				ja.put("<div class='text-center'>" + location.getName() + "</div>");
				ja.put("<div class='text-center'>" + numberFormat.format(jumlahPengajuan)  + "</div>");
				ja.put("<div class='text-center'>" + PstBillMain.produksiDeliveryStatus[billMain.getStatus()] + "</div>");
				String button = "<div class='text-center'>"
						+ "<button type='button' title='Detail' "
						+ "class='btn btn-xs btn-warning detail-produksi-btn' "
						+ "data-oid='" + billMain.getOID() + "'> "
						+ "<i class='fa fa-pencil'></i>"
						+ "</button>"
						+ "<button type='button' title='Dokumen' "
						+ "class='btn btn-xs btn-primary dokumen-produksi-btn' "
						+ "data-oid='" + billMain.getOID() + "'> "
						+ "<i class='fa fa-file-text-o'></i>"
						+ "</button> <br> "
						+ "</div>";

				ja.put(button);
				array.put(ja);
			} else if (datafor.equals("listPetugas")) {
              
		
//				Employee emp = (Employee) listData.get(i);
//				Position pos = new Position();
//				try {
//					comp = PstCompany.fetchExc(emp.getCompanyId());
//					pos = PstPosition.fetchExc(emp.getPositionId());
//				} catch (Exception e) {
//					printErrorMessage(e.getMessage());
//					message = e.toString();
//				}
//				ja.put("" + (this.start + i + 1) + ".");
//				ja.put("" + emp.getEmployeeNum() + "");
//				ja.put("" + emp.getFullName());
//				ja.put("<div class='text-center'> " + comp.getCompanyName() + " </div>");
//				ja.put("" + emp.getAddress() + "");
//				ja.put("<div class='text-center'>" + emp.getPhone() + "</div>");
//				ja.put("<div class='text-center'>" + emp.getHandphone() + "</div>");
//				String button = "<div class='text-center'>"
//						+ "<button type='button' title='Detail' "
//						+ "class='btn btn-xs btn-warning select-petugas-btn' "
//						+ "data-oid='" + emp.getOID() + "'"
//						+ "data-name='" + emp.getFullName() + "'"
//						+ "data-empNum='" + emp.getEmployeeNum() + "'> "
//						+ "<i class='fa fa-pencil'></i>"
//						+ "</button>";
//				ja.put(button);
//				array.put(ja);
			} else if (datafor.equals("listPemesanan")) {
				Vector tempList = (Vector) listData.get(i);
				BillMain bm = (BillMain) tempList.get(0);
				Material material = (Material) tempList.get(1);
				Category cat = (Category) tempList.get(2);
				Unit unit = (Unit) tempList.get(3);
				Merk mk = (Merk) tempList.get(4);
				MaterialStock ms = (MaterialStock) tempList.get(5);
				Billdetail bd = (Billdetail) tempList.get(6);

				ja.put("" + (this.start + i + 1) + ".");
				ja.put("" + bm.getInvoiceNo() + "");
				ja.put("" + material.getSku());
				ja.put("<div class='text-center'> " + ((material.getBarcode() == null) ? "-" : material.getBarcode()) + " </div>");
				ja.put("" + material.getName() + "");
				ja.put("<div class='text-center'>" + cat.getName() + "</div>");
				ja.put("<div class='text-center'>" + unit.getName() + "</div>");
				ja.put("<div class='text-center'>" + mk.getName() + "</div>");
				ja.put("<div class='text-center'>" + bd.getQty() + "</div>");
				ja.put("<div class='text-center'>" + ms.getQty() + "</div>");
//				String button = "<div class='text-center'>"
//						+ "<button type='button' title='Buat Store Request' "
//						+ "data-billnumber='" + bm.getInvoiceNo() + "' "
//						+ "data-matid='" + material.getOID() + "' "
//						+ "data-unitid='" + unit.getOID() + "' "
//						+ "data-sku='" + material.getSku() + "' "
//						+ "data-namabarang='" + material.getName() + "' "
//						+ "data-unit='" + unit.getName() + "' "
//						+ "value='" + bm.getOID() + "'"
//						+ "class='create-new-sr btn btn-xs btn-warning'> "
//						+ "SR"
//						+ "</button>"
//						+ "<span>&nbsp;</span>"
//						+ "<button type='button' title='Buat Order Request' "
//						+ "class='btn btn-xs btn-success'> "
//						+ "OR"
//						+ "</button>"
//						+ "</div>";
				String button = "<div class='form-group'>"
						+ "    <div class='form-check'>"
						+ "      <input class='form-check-input' type='checkbox' id='gridCheck'"
						+ "			name='" + FrmBillDetail.fieldNames[FrmBillDetail.FRM_FIELD_CASH_BILL_DETAIL_ID] + "'"
						+ "			value='" + bd.getOID() + "'>"
						+ "    </div>"
						+ "  </div>";
				ja.put(button);
				array.put(ja);
			}
		}
		totalAfterFilter = total;
		try {
			result.put("iTotalRecords", total);
			result.put("iTotalDisplayRecords", totalAfterFilter);
			result.put("aaData", array);
		} catch (Exception e) {
			printErrorMessage(e.getMessage());
		}
		return result;
	}

	public void printErrorMessage(String errorMessage) {
		System.out.println("");
		System.out.println("========================================>>> WARNING <<<========================================");
		System.out.println("");
		System.out.println("MESSAGE : " + errorMessage);
		System.out.println("");
		System.out.println("========================================<<< * * * * >>>========================================");
		System.out.println("");
	}
	

	// <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
	/**
	 * Handles the HTTP <code>GET</code> method.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Handles the HTTP <code>POST</code> method.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Returns a short description of the servlet.
	 *
	 * @return a String containing servlet description
	 */
	@Override
	public String getServletInfo() {
		return "Short description";
	}// </editor-fold>

}
