/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dimata.posbo.ajax;

import com.dimata.common.entity.contact.ContactList;
import com.dimata.common.entity.contact.PstContactList;
import com.dimata.gui.jsp.ControlCombo;
import com.dimata.posbo.entity.masterdata.MatVendorPrice;
import com.dimata.posbo.entity.masterdata.MaterialUnitOrder;
import com.dimata.posbo.entity.masterdata.PstMatVendorPrice;
import com.dimata.posbo.entity.masterdata.PstMaterialUnitOrder;
import com.dimata.posbo.entity.masterdata.PstUnit;
import com.dimata.posbo.form.purchasing.FrmPurchaseRequestItem;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.util.Formater;
import java.util.Vector;
import javax.servlet.http.HttpServlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
/**
 *
 * @author dimata005
 */
public class CheckPriceContract extends HttpServlet{
     /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Destroys the servlet.
     */
    public void destroy() {

    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }

    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }

    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }

    private void processRequest(HttpServletRequest request, HttpServletResponse response) {
        try{
            //String buffer="false";
            /**
             * create fungsi check contract price with oidsupplier and oidmaterial
             */
            int typeCheck = FRMQueryString.requestInt(request,"typeCheck");
            long contact_id = FRMQueryString.requestLong(request,"contact_id");
            long material_id = FRMQueryString.requestLong(request,"material_id");
            
            long unitId = FRMQueryString.requestLong(request,"unitId");
            long vendorId=FRMQueryString.requestLong(request,"vendorId");
            
            //create fungsi cek Nilai Konversi
            double resultKonversi = 0.0;
            String price="";
            Vector vectUnitSupVal = new Vector(1,1);
            Vector vectUnitSupKey = new Vector(1,1);
            switch (typeCheck) {
                case 0:
                     try{
                
                        resultKonversi = PstMatVendorPrice.getContractPriceWithContactIdAndMaterialId(contact_id, material_id);

                        price=Formater.formatNumber(resultKonversi, "###,###");

                    }catch(Exception ex ){
                        resultKonversi=0.0;
                    }
                    break;
                    
                case 1:
                    try{
                
                        resultKonversi = PstMatVendorPrice.getContractPriceWithVendorIdAndUnitId(vendorId, unitId );

                        price=Formater.formatNumber(resultKonversi, "###,###");

                    }catch(Exception ex ){
                        resultKonversi=0.0;
                    }
                    break;
                    
                case 2:
                  
                    String whereClauseUnitSupp = " MV."+PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_MATERIAL_ID]+"="+material_id+""+
                                     " AND MV."+PstMatVendorPrice.fieldNames[PstMatVendorPrice.FLD_VENDOR_ID]+"="+vendorId;
                    Vector listJoinUnit = PstMatVendorPrice.listJoinUnit(0,0, whereClauseUnitSupp , "");
                 
                    for(int i=0; i<listJoinUnit.size(); i++)
                    {
                        MatVendorPrice matVendorPrice = (MatVendorPrice)listJoinUnit.get(i);

                        vectUnitSupKey.add(""+matVendorPrice.getBuyingUnitId());
                        vectUnitSupVal.add(""+matVendorPrice.getBuyingUnitName());
                    } 
                    
                        
                   
                    price=ControlCombo.draw(FrmPurchaseRequestItem.fieldNames[FrmPurchaseRequestItem.FRM_FIELD_UNIT_REQUEST_ID],"formElemen", null, "", vectUnitSupKey, vectUnitSupVal, "onChange=\"javascript:changeChargeUnit(this.value)\"");
                    
                    break;
                
                case 3:
                    String matUnit= FRMQueryString.requestString(request, "matUnit");
                    long matUnitId = FRMQueryString.requestLong(request,"matUnitId");
                    String whereBaseUnitOrder = "PMU."+PstMaterialUnitOrder.fieldNames[PstMaterialUnitOrder.FLD_MATERIAL_ID] + " ='"+material_id+"'";
                    Vector listBaseUnitOrder = PstMaterialUnitOrder.listJoin(0,0,whereBaseUnitOrder,"");
                    if (listBaseUnitOrder.size()>0){
                        for(int i=0; i<listBaseUnitOrder.size(); i++){
                        MaterialUnitOrder materialUnitOrder = (MaterialUnitOrder)listBaseUnitOrder.get(i);
                            vectUnitSupKey.add(""+materialUnitOrder.getUnitID());
                            vectUnitSupVal.add(""+materialUnitOrder.getUnitKode());
                        }
                    }else{
                        vectUnitSupKey.add(""+matUnitId);
                        vectUnitSupVal.add(""+matUnit);
                    }
                    
                    price=ControlCombo.draw(FrmPurchaseRequestItem.fieldNames[FrmPurchaseRequestItem.FRM_FIELD_UNIT_REQUEST_ID],"formElemen", null, "", vectUnitSupKey, vectUnitSupVal, "onChange=\"javascript:changeChargeUnit(this.value)\"");
                    
                    break;
                 case 4:
                     
                     ContactList contactList = new ContactList();
                     try{
                         contactList = PstContactList.fetchExc(vendorId);
                         price=contactList.getCompName();
                     }catch(Exception ex){}
                     
                     break;
                     
                default :
            }
           
            
            response.getWriter().println(price);

         }catch(Exception ex){
            ex.printStackTrace();
         }
    }
}
