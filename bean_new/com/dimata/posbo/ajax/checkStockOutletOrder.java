/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.dimata.posbo.ajax;

import com.dimata.common.entity.periode.Periode;
import com.dimata.common.entity.periode.PstPeriode;
import com.dimata.pos.entity.billing.PstBillMain;
import com.dimata.posbo.entity.masterdata.PstMaterialStock;
import com.dimata.qdep.form.FRMQueryString;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *ini fungsi ajax servlet yang akan mngecek qty yang masih bisa di ambil oleh sales
 * @author opie-eyek 20131128
 */
public class checkStockOutletOrder extends HttpServlet{
    /**
     * definisi general jika ada
     * @param config
     * @throws ServletException
     */
    public static final String CHECK_MATERIAL_ID = "CHECK_MATERIAL_ID";
    public static final String TYPE_CHECK_STOCK_SALES = "CHECK_TYPE_STOCK_SALES";
    public static final String LOCATION_SALES = "CHECK_LOCATION_SALES";
    public static final String CHECK_QTY_ORDER = "CHECK_QTY_ORDER";

    public static final int CHECK_STOCK_SALES_REAL = 0;
    public static final int CHECK_STOCK_SALES_INCOMING = 1;

     /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Destroys the servlet.
     */
    public void destroy() {

    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }

    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }

    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }

    private void processRequest(HttpServletRequest request, HttpServletResponse response) {
        
        //String nameCheck="";
        int checkQtyType=0;
        long checkMaterialId = 0;
        long locationStock=0;
        double checkQtyOrder=0.0;
        try {
                
                checkQtyType = FRMQueryString.requestInt(request, TYPE_CHECK_STOCK_SALES); //tyepe check incoming atau real
                checkMaterialId = FRMQueryString.requestLong(request, CHECK_MATERIAL_ID); // material_id(barang)
                locationStock=FRMQueryString.requestLong(request, LOCATION_SALES); //lokasi warehouse
                checkQtyOrder=FRMQueryString.requestDouble(request, CHECK_QTY_ORDER);
                
        } catch (Exception e) {
            System.out.println("Exc : " + e.toString());
        }

        try{
            String buffer="false";

            /**
             * create fungsi check qty stock 
             */
            //1. mencari periode yang sedang berjalan
            Periode maPeriode = PstPeriode.getPeriodeRunning();
            
            //2. cek type qty apakah type sales incoming atau real
            if(checkQtyType==CHECK_STOCK_SALES_REAL){
                buffer = checkRealStock(checkMaterialId, maPeriode.getOID(),locationStock,checkQtyOrder);
            }else{
                buffer = checkIncomingStock(checkMaterialId, maPeriode.getOID(),locationStock,checkQtyOrder);
            }
         
            response.getWriter().println(buffer);

         }catch(Exception ex){
            ex.printStackTrace();
         }
    }

    /**
     * cek real stock
     * @param materialId : id material yang akan di cek
     * @param periodeId : periode yang sedang berjalan
     * @param locationId : lokasi qty yang akan di cek
     * @return
     * created : opie-eyek 20131129
     */
    public static String checkRealStock(long materialId, long periodeId, long locationId, double qtyOrder){
            String buffer="false";
            
            try{
                double qtyStockReal = PstMaterialStock.getStockWh(locationId, materialId, periodeId);
                double qtyBooking = PstBillMain.getStockBooking(locationId, materialId);
                double qtyAvailable = qtyStockReal-qtyBooking;
                if(qtyOrder>qtyAvailable){
                    buffer="Maaf Qty Order Tidak Mencukupi, Qty Available Hari Ini "+qtyAvailable;
                }
            }catch(Exception ex){
            }
            
        return buffer;
    }

    /**
     * cek incoming stock
     * @param nameCheck
     * @param oidOpname
     * @return
     * created : opie-eyek 20131129
     */
     public static String checkIncomingStock(long materialId, long periodeId, long locationId, double qtyOrder){
          String buffer="false";

            try{
                double qtyStockReal = PstMaterialStock.getStockWh(locationId, materialId, periodeId);
                if(qtyOrder>qtyStockReal){
                    buffer="Maaf Qty Order Tidak Mencukupi, Qty Sekarang"+qtyStockReal;
                }
            }catch(Exception ex){
            }

        return buffer;
    }
}
