/**
 * User: gwawan
 * Date: Sep 14, 2007
 * Time: 17:02:13 PM
 * To change this template use Options | File Templates.
 */
package com.dimata.posbo.report.stock;

import com.dimata.posbo.entity.search.SrcReportPotitionStock;
import com.dimata.posbo.session.warehouse.SessReportPotitionStock;
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import java.io.IOException;
import java.util.Vector;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;

import com.dimata.qdep.form.FRMHandler;

import com.dimata.posbo.entity.masterdata.Material;
import com.dimata.posbo.entity.masterdata.MaterialStock;
import com.dimata.posbo.entity.masterdata.Unit;

public class StockPotitionReportPdf extends HttpServlet {
    /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }
    
    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color bgColor = new Color(220, 220, 220);
    
    // setting some fonts in the color chosen by the user
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 13, Font.BOLD, border);
    public static Font fontMainHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.BOLD, border);
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.ITALIC, border);
    public static Font fontListHeader = new Font(Font.TIMES_NEW_ROMAN, 8, Font.BOLD, border);
    public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 8);
    
    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    
    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        
        Color bgColor = new Color(200, 200, 200);
        Rectangle rectangle = new Rectangle(20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4.rotate(), 20, 20, 30, 30);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        try {
            //step2.2: creating an instance of the writer
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            // step 3.1: adding some metadata to the document
            document.addSubject("This is a subject.");
            document.addSubject("This is a subject two.");
            
            //HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
            HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", fontLsContent)), false);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setBorder(HeaderFooter.NO_BORDER);
            //document.setHeader(header);
            document.setFooter(footer);
            
            document.open();
            
            /* get data from session */
            Vector list = new Vector();
            HttpSession sess = request.getSession(true);
            try {
                list = (Vector) sess.getValue("STOCK_POTITION_REPORT");
            } catch (Exception e) {
                System.out.println("Exc : " + e.toString());
                list = new Vector();
            }
            
            Vector header = new Vector(1, 1);
            Vector vctContent = new Vector(1, 1);
            if ((list != null) && (list.size() > 0)) {
                document.add(getContent(list, document, writer));
            }
            
        } catch (Exception e) {
            System.out.println("Exception e : " + e.toString());
        }
        
        // step 5: closing the document
        document.close();
        
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }
    
    
    /* this method make table header */
    private static Table getHeader(Vector vct) throws BadElementException, DocumentException {
        
        if (vct != null && vct.size() > 0) {
            
            int ctnInt[] = {10,90};
            Table table = new Table(2);
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            //  nama company, alamat,telp
            table.setDefaultColspan(2);
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)vct.get(0), fontHeader));
            table.addCell(new Phrase((String)vct.get(1), fontHeader));
            table.addCell(new Phrase((String)vct.get(2), fontHeader));
            
            // judul report, periode report
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)vct.get(3), fontTitle));
            table.addCell(new Phrase((String)vct.get(4), fontTitle));
            table.addCell(new Phrase("", fontTitle));
            
            // periode, lokasi, kategori, supplier
            table.setDefaultColspan(1);
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)vct.get(5), fontListHeader));
            table.addCell(new Phrase(" : "+(String)vct.get(6), fontListHeader));
            if((String)vct.get(8) != "") { //location
                table.addCell(new Phrase((String)vct.get(7), fontListHeader));
                table.addCell(new Phrase(" : "+(String)vct.get(8), fontListHeader));
            }
            if((String)vct.get(10) != "") { //category
                table.addCell(new Phrase((String)vct.get(9), fontListHeader));
                table.addCell(new Phrase(" : "+(String)vct.get(10), fontListHeader));
            }
            if((String)vct.get(12) != "") { //merk
                table.addCell(new Phrase((String)vct.get(11), fontListHeader));
                table.addCell(new Phrase(" : "+(String)vct.get(12), fontListHeader));
            }
            
            return table;
        }
        
        return new Table(1);
    }
    
    
    private static Table getListHeader(Vector header, int infoShowed, int stockValueBy) throws BadElementException, DocumentException {
        int ctnInt[] = {3, 8, 15, 5, 4, 7, 7, 7, 7, 7, 7, 7, 7, 9};
        Table table = new Table(14);
        
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            table.setDefaultRowspan(2);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            
            table.addCell(new Phrase((String)header.get(0), fontListHeader)); //no
            table.addCell(new Phrase((String)header.get(1), fontListHeader)); //sku
            
            if(infoShowed == SrcReportPotitionStock.SHOW_QTY_ONLY || 
                    (infoShowed == SrcReportPotitionStock.SHOW_VALUE_ONLY && stockValueBy == SrcReportPotitionStock.STOCK_VALUE_BY_COGS_MASTER)) {
                table.setDefaultColspan(3);
                table.addCell(new Phrase((String)header.get(2),fontListHeader)); //name
                table.setDefaultColspan(1);
                table.addCell(new Phrase((String)header.get(3), fontListHeader)); //hpp atau unit
            }
            else if(infoShowed == SrcReportPotitionStock.SHOW_BOTH) {
                if(stockValueBy == SrcReportPotitionStock.STOCK_VALUE_BY_COGS_MASTER) {
                    table.setDefaultColspan(1);
                    table.addCell(new Phrase((String)header.get(2),fontListHeader)); //name
                    table.addCell(new Phrase((String)header.get(3), fontListHeader)); //hpp
                    table.addCell(new Phrase((String)header.get(13), fontListHeader)); //unit
                }
                else {
                    table.setDefaultColspan(2);
                    table.addCell(new Phrase((String)header.get(2),fontListHeader)); //name
                    table.setDefaultColspan(1);
                    table.addCell(new Phrase((String)header.get(13), fontListHeader)); //unit
                }
            }
            else {
                table.setDefaultColspan(4);
                table.addCell(new Phrase((String)header.get(2),fontListHeader)); //name
            }
            
            table.setDefaultRowspan(1);
            table.setDefaultColspan(8);
            table.addCell(new Phrase((String)header.get(4), fontListHeader)); //kuantiti stok / nilai stok
            
            if(infoShowed == SrcReportPotitionStock.SHOW_BOTH) {
                table.setDefaultRowspan(2);
                table.setDefaultColspan(1);
                table.addCell(new Phrase((String)header.get(14), fontListHeader)); //saldo (vaklue)
            }
            
            table.setDefaultRowspan(1);
            table.setDefaultColspan(1);
            
            table.addCell(new Phrase((String)header.get(5), fontListHeader)); //awal
            table.addCell(new Phrase((String)header.get(6), fontListHeader)); //opname
            table.addCell(new Phrase((String)header.get(7), fontListHeader)); //terima
            table.addCell(new Phrase((String)header.get(8), fontListHeader)); //transfer
            table.addCell(new Phrase((String)header.get(9), fontListHeader)); //return
            table.addCell(new Phrase((String)header.get(10), fontListHeader)); //sale
            table.addCell(new Phrase((String)header.get(11), fontListHeader)); //return cust
            table.addCell(new Phrase((String)header.get(12), fontListHeader)); //saldo
            
        }catch(Exception e){
            System.out.println("exc header: "+e.toString());
        }
        
        return table;
    }
    
    private static Table getListFooter(Table table, Vector footer, int infoShowed, int stockValueBy) throws BadElementException, DocumentException {
        try {
            if(infoShowed == SrcReportPotitionStock.SHOW_VALUE_ONLY) {
                /** SUB TOTAL */
                table.setDefaultColspan(6);
                
                // Title
                table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase("SUB TOTAL", fontListHeader));
                
                table.setDefaultColspan(1);
                
                //
                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase((String)footer.get(0), fontListHeader));
                table.addCell(new Phrase((String)footer.get(1), fontListHeader));
                table.addCell(new Phrase((String)footer.get(2), fontListHeader));
                table.addCell(new Phrase((String)footer.get(3), fontListHeader));
                table.addCell(new Phrase((String)footer.get(4), fontListHeader));
                table.addCell(new Phrase((String)footer.get(5), fontListHeader));
                table.addCell(new Phrase((String)footer.get(6), fontListHeader));
                table.addCell(new Phrase((String)footer.get(7), fontListHeader));
                
                
                /** GRAND TOTAL */
                table.setDefaultColspan(6);
                
                // Title
                table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase("GRAND TOTAL", fontListHeader));
                
                table.setDefaultColspan(1);
                
                //
                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase((String)footer.get(8), fontListHeader));
                table.addCell(new Phrase((String)footer.get(9), fontListHeader));
                table.addCell(new Phrase((String)footer.get(10), fontListHeader));
                table.addCell(new Phrase((String)footer.get(11), fontListHeader));
                table.addCell(new Phrase((String)footer.get(12), fontListHeader));
                table.addCell(new Phrase((String)footer.get(13), fontListHeader));
                table.addCell(new Phrase((String)footer.get(14), fontListHeader));
                table.addCell(new Phrase((String)footer.get(15), fontListHeader));
            }
            else if(infoShowed == SrcReportPotitionStock.SHOW_BOTH) {
                /** SUB TOTAL */
                table.setDefaultColspan(13);
                
                // Title
                table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase("SUB TOTAL", fontListHeader));
                
                table.setDefaultColspan(1);
                
                //
                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase((String)footer.get(0), fontListHeader));
                
                
                /** GRAND TOTAL */
                table.setDefaultColspan(13);
                
                // Title
                table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase("GRAND TOTAL", fontListHeader));
                
                table.setDefaultColspan(1);
                
                //
                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase((String)footer.get(1), fontListHeader));
            }
        }catch(Exception e){
            System.out.println("exc footer"+e.toString());
        }
        
        return table;
    }
    
    private static Table getContent(Vector vct, Document document, PdfWriter writer) throws BadElementException, DocumentException {
        document.add(getHeader((Vector)vct.get(0)));
        
        Vector vctContent = (Vector)vct.get(1);
        Vector header = (Vector)vctContent.get(0);
        Vector body = (Vector)vctContent.get(1);
        Vector footer = (Vector)vct.get(2);
        SrcReportPotitionStock srcReportPotitionStock = (SrcReportPotitionStock)vct.get(3);
        
        Table table = getListHeader(header, srcReportPotitionStock.getInfoShowed(), srcReportPotitionStock.getStockValueBy());
        
        boolean newPage = false;
        
        double stockValueBegin = 0;
        double stockValueOpname = 0;
        double stockValueReceive = 0;
        double stockValueDispatch = 0;
        double stockValueReturn = 0;
        double stockValueSale = 0;
        double stockValueReturnCust = 0;
        double stockValueClosing = 0;
        
        double subTotalStockValueBegin = 0;
        double subTotalStockValueOpname = 0;
        double subTotalStockValueReceive = 0;
        double subTotalStockValueDispatch = 0;
        double subTotalStockValueReturn = 0;
        double subTotalStockValueSale = 0;
        double subTotalStockValueReturnCust = 0;
        double subTotalStockValueClosing = 0;
        
        if (body != null && body.size() > 0) {
            try{
                for (int i = 0; i < body.size(); i++) {
                    Vector vctfrs = (Vector)body.get(i);
                    Material material = (Material)vctfrs.get(0);
                    MaterialStock materialStock = (MaterialStock)vctfrs.get(1);
                    Unit unit = (Unit)vctfrs.get(2);
                    Vector stockValue = (Vector)vctfrs.get(3);
                    
                    if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_VALUE_ONLY || 
                            srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_BOTH) {
                        stockValueBegin = Double.parseDouble((String)stockValue.get(SessReportPotitionStock.STOCK_VALUE_BEGIN));
                        stockValueOpname = Double.parseDouble((String)stockValue.get(SessReportPotitionStock.STOCK_VALUE_OPNAME));
                        stockValueReceive = Double.parseDouble((String)stockValue.get(SessReportPotitionStock.STOCK_VALUE_RECEIVE));
                        stockValueDispatch = Double.parseDouble((String)stockValue.get(SessReportPotitionStock.STOCK_VALUE_DISPATCH));
                        stockValueReturn = Double.parseDouble((String)stockValue.get(SessReportPotitionStock.STOCK_VALUE_RETURN));
                        stockValueSale = Double.parseDouble((String)stockValue.get(SessReportPotitionStock.STOCK_VALUE_SALE));
                        stockValueReturnCust = Double.parseDouble((String)stockValue.get(SessReportPotitionStock.STOCK_VALUE_RETURN_CUST));
                        stockValueClosing = Double.parseDouble((String)stockValue.get(SessReportPotitionStock.STOCK_VALUE_CLOSING));
                        
                        subTotalStockValueBegin += stockValueBegin;
                        subTotalStockValueOpname += stockValueOpname;
                        subTotalStockValueReceive += stockValueReceive;
                        subTotalStockValueDispatch += stockValueDispatch;
                        subTotalStockValueReturn += stockValueReturn;
                        subTotalStockValueSale += stockValueSale;
                        subTotalStockValueReturnCust += stockValueReturnCust;
                        subTotalStockValueClosing += stockValueClosing;
                    }
                    //no
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(String.valueOf(i+1), fontLsContent));
                    
                    //sku
                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.addCell(new Phrase(material.getSku(), fontLsContent));
                    
                    if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_QTY_ONLY || 
                            (srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_VALUE_ONLY && srcReportPotitionStock.getStockValueBy() == SrcReportPotitionStock.STOCK_VALUE_BY_COGS_MASTER)) {
                        table.setDefaultColspan(3);
                        //name
                        table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                        table.addCell(new Phrase(material.getName(), fontLsContent));
                        table.setDefaultColspan(1);
                        if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_QTY_ONLY) { //unit
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.addCell(new Phrase(unit.getCode(), fontLsContent));
                        }
                        else { //hpp
                            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(material.getAveragePrice()), fontLsContent));
                        }
                    } else if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_BOTH) {
                        if(srcReportPotitionStock.getStockValueBy() == SrcReportPotitionStock.STOCK_VALUE_BY_COGS_MASTER) {
                            table.setDefaultColspan(1);
                            //name
                            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                            table.addCell(new Phrase(material.getName(), fontLsContent));
                            //hpp
                            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(material.getAveragePrice()), fontLsContent));
                            //unit
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.addCell(new Phrase(unit.getCode(), fontLsContent));
                        }
                        else {
                            table.setDefaultColspan(2);
                            //name
                            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                            table.addCell(new Phrase(material.getName(), fontLsContent));
                            table.setDefaultColspan(1);
                            //unit
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.addCell(new Phrase(unit.getCode(), fontLsContent));
                        }
                    } else {
                        table.setDefaultColspan(4);
                        //name
                        table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                        table.addCell(new Phrase(material.getName(), fontLsContent));
                    }
                    
                    table.setDefaultColspan(1);
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_QTY_ONLY ||
                            srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_BOTH) {
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(materialStock.getQty()), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(materialStock.getOpnameQty()), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(materialStock.getQtyIn()), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(materialStock.getQtyOut()), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(materialStock.getQtyMin()), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(materialStock.getSaleQty()), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(materialStock.getQtyMax()), fontLsContent));
                        if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_BOTH) {
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(materialStock.getClosingQty()), fontLsContent));
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(stockValueClosing), fontLsContent));
                        } else {
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(materialStock.getClosingQty()), fontLsContent));
                        }
                    }
                    else if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_VALUE_ONLY) {
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(stockValueBegin), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(stockValueOpname), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(stockValueReceive), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(stockValueDispatch), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(stockValueReturn), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(stockValueSale), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(stockValueReturnCust), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(stockValueClosing), fontLsContent));
                    }
                    
                    /** buat baris kosong */
                    table.setDefaultColspan(14);
                    table.addCell(new Phrase("", fontLsContent));
                    table.addCell(new Phrase("", fontLsContent));
                    table.addCell(new Phrase("", fontLsContent));
                    table.addCell(new Phrase("", fontLsContent));
                    table.addCell(new Phrase("", fontLsContent));
                    table.setDefaultColspan(1);
                    
                    if (!writer.fitsPage(table) && 
                            (srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_VALUE_ONLY ||
                            srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_BOTH)) {
                        /** hapus baris kosong */
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        
                        Vector tempFooter = new Vector();
                        if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_VALUE_ONLY) {
                            /** Sub Total*/
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueBegin));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueOpname));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueReceive));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueDispatch));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueReturn));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueSale));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueReturnCust));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueClosing));
                            
                            /** Grand Total */
                            tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_BEGIN))));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_OPNAME))));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_RECEIVE))));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_DISPATCH))));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_RETURN))));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_SALE))));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_RETURN_CUST))));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_CLOSING))));
                        }
                        else if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_BOTH) {
                            /** Sub Total*/
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueClosing));
                            
                            /** Grand Total */
                            tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_CLOSING))));
                        }
                        
                        document.add(getListFooter(table, tempFooter, srcReportPotitionStock.getInfoShowed(), srcReportPotitionStock.getStockValueBy()));
                        
                        /** set variabel sub* = 0 untuk next page */
                        subTotalStockValueBegin = 0;
                        subTotalStockValueOpname = 0;
                        subTotalStockValueReceive = 0;
                        subTotalStockValueDispatch = 0;
                        subTotalStockValueReturn = 0;
                        subTotalStockValueSale = 0;
                        subTotalStockValueReturnCust = 0;
                        subTotalStockValueClosing = 0;
                        
                        document.newPage();
                        document.add(getHeader((Vector)vct.get(0)));
                        table = getListHeader(header, srcReportPotitionStock.getInfoShowed(), srcReportPotitionStock.getStockValueBy());
                        
                        newPage = true;
                    }
                    else {
                        /** hapus baris kosong */
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        
                        newPage = false;
                    }
                    
                }
                
                if(newPage == false && 
                        (srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_VALUE_ONLY ||
                        srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_BOTH)) {
                    Vector tempFooter = new Vector();
                    if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_VALUE_ONLY) {
                        /** Sub Total*/
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueBegin));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueOpname));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueReceive));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueDispatch));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueReturn));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueSale));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueReturnCust));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueClosing));
                        
                        /** Grand Total */
                        tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_BEGIN))));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_OPNAME))));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_RECEIVE))));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_DISPATCH))));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_RETURN))));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_SALE))));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_RETURN_CUST))));
                        tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_CLOSING))));
                    }
                    else if(srcReportPotitionStock.getInfoShowed() == SrcReportPotitionStock.SHOW_BOTH) {
                        /** Sub Total*/
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalStockValueClosing));
                        
                        /** Grand Total */
                        tempFooter.add(FRMHandler.userFormatStringDecimal(Double.parseDouble((String)footer.get(SessReportPotitionStock.STOCK_VALUE_CLOSING))));
                    }
                    table = getListFooter(table, tempFooter, srcReportPotitionStock.getInfoShowed(), srcReportPotitionStock.getStockValueBy());
                }
                
            }catch(Exception e){
                System.out.println("exc content"+e.toString());
            }
        }
        
        return table;
    }
    
    
    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}
