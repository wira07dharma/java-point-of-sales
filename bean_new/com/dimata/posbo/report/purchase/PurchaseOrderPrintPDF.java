package com.dimata.posbo.report.purchase;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.qdep.form.FRMHandler;
import com.dimata.posbo.entity.masterdata.Material;
import com.dimata.posbo.entity.masterdata.Unit;
import com.dimata.posbo.entity.masterdata.MatCurrency;
import com.dimata.posbo.entity.purchasing.PurchaseOrder;
import com.dimata.posbo.entity.purchasing.PstPurchaseOrder;
import com.dimata.posbo.entity.purchasing.PurchaseOrderItem;
import com.dimata.posbo.entity.purchasing.PstPurchaseOrderItem;
import com.dimata.common.entity.location.Location;
import com.dimata.common.entity.location.PstLocation;
import com.dimata.common.entity.contact.ContactList;
import com.dimata.common.entity.contact.PstContactList;
import com.dimata.util.Formater;
import com.dimata.util.LogicParser;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import java.awt.*;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
import java.util.Vector;
import java.util.Hashtable;

public class PurchaseOrderPrintPDF extends HttpServlet {


    public static final String textHeaderMain[][] =
            {
                {"PURCHASE ORDER", "Nomor", "Lokasi", "Tanggal", "Supplier", "Nama", "Alamat","Telp","Contact","Keterangan"},
                {"PURCHASE ORDER", "Number", "From Location", "Date", "Supplier", "Name","Address" ,"Phone","Contact","Description"}
            };

    public static final String textHeaderItem[][] =
            {
                {"No", "Kode", "Nama Barang", "Unit", "Qty", "Harga", "Sub Total"},
                {"No", "Code", "Description", "Unit", "Qty", "Price", "Sub Total"}
            };

    /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Destroys the servlet.
     */
    public void destroy() {

    }

    public static Vector vect = new Vector();
    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color bgColor = new Color(220, 220, 220);

    // setting some fonts in the color chosen by the user
    public static com.lowagie.text.Font fontTitle = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 13, com.lowagie.text.Font.BOLD, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontTitleUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 13, com.lowagie.text.Font.BOLD + com.lowagie.text.Font.UNDERLINE, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontMainHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.BOLD, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.ITALIC, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontHeaderUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.ITALIC + com.lowagie.text.Font.UNDERLINE, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontListHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.BOLD, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontLsContent = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 8);
    public static com.lowagie.text.Font fontLsContentUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 8,com.lowagie.text.Font.UNDERLINE, PurchaseOrderPrintPDF.border);

    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */

    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        Color bgColor = new Color(200, 200, 200);
        com.lowagie.text.Rectangle rectangle = new com.lowagie.text.Rectangle(20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4, 20, 20, 30, 30);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {
            //step2.2: creating an instance of the writer
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            // step 3.1: adding some metadata to the document
            document.addSubject("This is a subject.");
            document.addSubject("This is a subject two.");

            //HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
            HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", PurchaseOrderPrintPDF.fontLsContent)), false);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setBorder(HeaderFooter.NO_BORDER);
            //document.setHeader(header);
            document.setFooter(footer);

            document.open();

            /* get data from session */
            Vector list = new Vector();
            HttpSession sess = request.getSession(true);
            long oidPo = 0;
            int SESS_LANGUAGE = 0;
            String approot = "";
            try {
                SESS_LANGUAGE = FRMQueryString.requestInt(request, "sess_language");
                oidPo = FRMQueryString.requestLong(request, "hidden_material_order_id");
                approot = FRMQueryString.requestString(request, "approot");
            } catch (Exception e) {
                System.out.println("Exc : " + e.toString());
            }

            PurchaseOrder purchaseOrder = new PurchaseOrder();
            Vector vctContent = new Vector();
            if (oidPo != 0) {
                try {
                    purchaseOrder = PstPurchaseOrder.fetchExc(oidPo);
                    String where = PstPurchaseOrderItem.fieldNames[PstPurchaseOrderItem.FLD_PURCHASE_ORDER_ID]+"="+oidPo;
                    vctContent = PstPurchaseOrderItem.list(0, 0, where);
                } catch (Exception e) {
                    System.out.println("err : " + e.toString());
                }

                String pathImage = "http://"+request.getServerName()+":"+request.getServerPort()+approot+ "/images/company_pdf.jpg";
                System.out.println("approot = "+pathImage);
                com.lowagie.text.Image gambar = null;
                try{
                    gambar = com.lowagie.text.Image.getInstance(pathImage);
                }catch(Exception ex){
                    System.out.println("gambar >>>>>> = "+gambar.getImageMask());
                }

                vect = new Vector();
                document.add(PurchaseOrderPrintPDF.getHeaderImage(SESS_LANGUAGE,gambar));
                document.add(PurchaseOrderPrintPDF.getHeader(SESS_LANGUAGE, purchaseOrder));
                vect.add("ACCOUNTING");
                document = PurchaseOrderPrintPDF.getContent(vctContent, document, writer, SESS_LANGUAGE, purchaseOrder);
                document.add(PurchaseOrderPrintPDF.getShippingInformation());
                document.add(PurchaseOrderPrintPDF.getHeaderApprove(vect));
            }
        } catch (Exception e) {
            System.out.println("Exception e : " + e.toString());
        }

        // step 5: closing the document
        document.close();

        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }


    /* this method make table header */
    private static Table getHeaderImage(int SESS_LANGUAGE, com.lowagie.text.Image gambar) throws BadElementException, DocumentException {
        Table table = new Table(2);
        try {
            int ctnInt[] = {40, 60};
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            gambar.setAlignment(com.lowagie.text.Image.MIDDLE);
            gambar.scalePercent(40);
            
            /** image, report title */
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultRowspan(2);
            table.setDefaultHorizontalAlignment(Table.ALIGN_TOP);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(new Chunk(gambar,0,0)));
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderMain[SESS_LANGUAGE][0], PurchaseOrderPrintPDF.fontTitleUnderline));
            table.setDefaultRowspan(1);
            table.addCell(new Phrase(new Chunk("")));

        } catch (Exception e) {
        }
        return table;
    }


    /* this method make table header */
    private static Table getHeader(int SESS_LANGUAGE, PurchaseOrder purchaseOrder) throws BadElementException, DocumentException {

        if (purchaseOrder.getOID() != 0) {

            int ctnInt[] = {10, 3, 39, 15, 3, 30};
            Table table = new Table(6);
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);

            //  nama company, alamat,telp
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderMain[SESS_LANGUAGE][1], PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(" :", PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(purchaseOrder.getPoCode(), PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderMain[SESS_LANGUAGE][4], PurchaseOrderPrintPDF.fontHeaderUnderline));
            table.addCell(new Phrase("", PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase("", PurchaseOrderPrintPDF.fontHeader));

            // tanggal transaksi, lokasi tujuan
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderMain[SESS_LANGUAGE][3], PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(" :", PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(Formater.formatDate(purchaseOrder.getPurchDate(), "dd-MM-yyyy"), PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderMain[SESS_LANGUAGE][5], PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(" :", PurchaseOrderPrintPDF.fontHeader));
            ContactList contactList = new ContactList();
            try {
                contactList = PstContactList.fetchExc(purchaseOrder.getSupplierId());
            } catch (Exception e) {
            }
            table.addCell(new Phrase(contactList.getCompName(), PurchaseOrderPrintPDF.fontHeader));

            // nama sto, alamat supplier
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultColspan(3);
            Location loc = new Location();
            try {
                loc = PstLocation.fetchExc(purchaseOrder.getLocationId());
            } catch (Exception e) {
            }
            table.addCell(new Phrase(loc.getName(), PurchaseOrderPrintPDF.fontHeader));
            vect.add(loc.getName());

            table.setDefaultColspan(1);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderMain[SESS_LANGUAGE][6], PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(" :", PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(contactList.getBussAddress(), PurchaseOrderPrintPDF.fontHeader));

            // Alamat, telp supplier
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultColspan(3);
            table.addCell(new Phrase(loc.getAddress(), PurchaseOrderPrintPDF.fontHeader));

            table.setDefaultColspan(1);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderMain[SESS_LANGUAGE][7], PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(" :", PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(contactList.getTelpNr(), PurchaseOrderPrintPDF.fontHeader));

            // Telp, Contact supplier
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultColspan(3);
            table.addCell(new Phrase(loc.getTelephone(), PurchaseOrderPrintPDF.fontHeader));

            table.setDefaultColspan(1);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderMain[SESS_LANGUAGE][8], PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(" :", PurchaseOrderPrintPDF.fontHeader));
            table.addCell(new Phrase(contactList.getPersonName(), PurchaseOrderPrintPDF.fontHeader));

            return table;
        }

        return new Table(1);
    }


    private static Table getListHeader(int SESS_LANGUAGE) throws BadElementException, DocumentException {
        //int ctnInt[] = {5, 15, 40, /*15,15,*/8,10,/*15,*/15/*,10*/};

        int ctnInt[] = {3, 15, 35, 5, 10, 12, 15};
        //Table table = new Table(10);
        Table table = new Table(7);
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(1);

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PurchaseOrderPrintPDF.bgColor);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderItem[SESS_LANGUAGE][0], PurchaseOrderPrintPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PurchaseOrderPrintPDF.bgColor);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderItem[SESS_LANGUAGE][1], PurchaseOrderPrintPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PurchaseOrderPrintPDF.bgColor);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderItem[SESS_LANGUAGE][2], PurchaseOrderPrintPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PurchaseOrderPrintPDF.bgColor);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderItem[SESS_LANGUAGE][3], PurchaseOrderPrintPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PurchaseOrderPrintPDF.bgColor);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderItem[SESS_LANGUAGE][4], PurchaseOrderPrintPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PurchaseOrderPrintPDF.bgColor);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderItem[SESS_LANGUAGE][5], PurchaseOrderPrintPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PurchaseOrderPrintPDF.bgColor);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderItem[SESS_LANGUAGE][6], PurchaseOrderPrintPDF.fontListHeader));

        } catch (Exception e) {
            System.out.println("exc header" + e.toString());
        }

        return table;
    }

    private static Document getContent(Vector vct, Document document, PdfWriter writer, int SESS_LANGUAGE, PurchaseOrder purchaseOrder) throws BadElementException, DocumentException {
        Table table = PurchaseOrderPrintPDF.getListHeader(SESS_LANGUAGE);
        if (vct != null && vct.size() > 0) {
            try {
                double total = 0;
                double totalQty = 0;
                for (int i = 0; i < vct.size(); i++) {
                    Vector temp = (Vector) vct.get(i);

                    PurchaseOrderItem purchOrderItem = (PurchaseOrderItem)temp.get(0);
                    Material mat = (Material)temp.get(1);
                    Unit unit = (Unit)temp.get(2);
                    MatCurrency matCurrency = (MatCurrency)temp.get(3);
                    total += purchOrderItem.getTotal();

                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(String.valueOf(i + 1), PurchaseOrderPrintPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(mat.getSku(), PurchaseOrderPrintPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(mat.getName(), PurchaseOrderPrintPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(unit.getCode(), PurchaseOrderPrintPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(purchOrderItem.getQuantity()), PurchaseOrderPrintPDF.fontLsContent));
                    totalQty += purchOrderItem.getQuantity();

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(purchOrderItem.getCurBuyingPrice()), PurchaseOrderPrintPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(purchOrderItem.getTotal()), PurchaseOrderPrintPDF.fontLsContent));

                    /*if (!writer.fitsPage(table)) {
                        table.deleteLastRow();
                        i--;
                        table.deleteLastRow();
                        i--;
                        document.add(table);
                        document.newPage();
                        table = getListHeader(SESS_LANGUAGE);
                    }*/
                }

                table.setDefaultCellBackgroundColor(Color.WHITE);
                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.setDefaultColspan(4);
                table.addCell(new Phrase("TOTAL", PurchaseOrderPrintPDF.fontListHeader));

                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.setDefaultColspan(1);
                table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(totalQty), PurchaseOrderPrintPDF.fontLsContent));

                table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase("", PurchaseOrderPrintPDF.fontLsContent));

                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(total), PurchaseOrderPrintPDF.fontLsContent));

                document.add(table);
                document.add(PurchaseOrderPrintPDF.getHeaderLast(SESS_LANGUAGE, purchaseOrder, totalQty, total));
            } catch (Exception e) {
                System.out.println("exc contenct" + e.toString());
            }
        }

        return document;
    }


    private static Table getHeaderLast(int SESS_LANGUAGE, PurchaseOrder purchaseOrder, double totalQty, double total) throws BadElementException, DocumentException {
        int ctnInt[] = {10, 1, 60, 10, 1, 15};
        //Table table = new Table(10);
        Table table = new Table(6);
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(0);
            table.setCellspacing(0);

            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            //table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase(PurchaseOrderPrintPDF.textHeaderMain[SESS_LANGUAGE][9], PurchaseOrderPrintPDF.fontLsContentUnderline));

            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            //table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase(":", PurchaseOrderPrintPDF.fontLsContent));

            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            table.setDefaultColspan(4);
            table.addCell(new Phrase(purchaseOrder.getRemark(), PurchaseOrderPrintPDF.fontLsContent));

        } catch (Exception e) {
            System.out.println("exc header" + e.toString());
        }
        return table;
    }

    private static Table getHeaderApprove(Vector vect) throws BadElementException, DocumentException {
        Table table = new Table(vect.size());
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(1);
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            for (int k = 0; k < vect.size(); k++) {
                table.addCell("");
            }
            for (int k = 0; k < vect.size(); k++) {
                table.addCell(new Phrase(String.valueOf(vect.get(k)), PurchaseOrderPrintPDF.fontLsContent));
            }
            for (int k = 0; k < vect.size(); k++) {
                table.addCell("");
                table.addCell("");
            }
            for (int k = 0; k < vect.size(); k++) {
                table.addCell(new Phrase(String.valueOf("(....................................)"), PurchaseOrderPrintPDF.fontLsContent));
            }
        } catch (Exception e) {
            System.out.println("exc header" + e.toString());
        }
        return table;
    }

    /**
     * gadnyana
     * @return
     * @throws BadElementException
     * @throws DocumentException
     */
    private static Table getShippingInformation() throws BadElementException, DocumentException {
        Table table = new Table(2);
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setAlignment(Table.ALIGN_LEFT);
            table.setWidth(80);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(1);

            String shipping = "";
            String shipping2 = "";
            try {
                shipping = (String)com.dimata.system.entity.PstSystemProperty.getValueByName("SHIPPING_INFORMATION_LEFT");
            } catch (Exception e) {
                shipping = " ";
            }

            try {
                shipping2 = (String)com.dimata.system.entity.PstSystemProperty.getValueByName("SHIPPING_INFORMATION_RIGHT");
            } catch (Exception e) {
                shipping2 = "";
            }

            String strShipping = shipping.replaceAll(";", "\n");
            String strShipping2 = shipping2.replaceAll(";", "\n");

            //table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            table.addCell(new Phrase(String.valueOf(strShipping), PurchaseOrderPrintPDF.fontLsContent));

            //table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            table.addCell(new Phrase(String.valueOf(strShipping2), PurchaseOrderPrintPDF.fontLsContent));

        } catch (Exception e) {
            System.out.println("exc header" + e.toString());
        }
        return table;
    }

    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}
