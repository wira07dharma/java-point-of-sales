package com.dimata.posbo.report.purchase;

import com.dimata.common.entity.location.Location;
import com.dimata.common.entity.location.PstLocation;

//adding PstSystemProperty by Miarhu 20120424;
import com.dimata.common.entity.system.*;

import com.dimata.posbo.entity.masterdata.Material;
import com.dimata.posbo.entity.masterdata.PstMaterial;
import com.dimata.posbo.entity.masterdata.PstUnit;
import com.dimata.posbo.entity.masterdata.Unit;
import com.dimata.posbo.entity.purchasing.PurchaseRequestItem;
import com.dimata.posbo.entity.warehouse.MatDispatch;
import com.dimata.posbo.entity.warehouse.MatDispatchItem;
import com.dimata.posbo.entity.warehouse.PstMatDispatch;
import com.dimata.posbo.entity.warehouse.PstMatDispatchItem;
import com.dimata.qdep.form.FRMHandler;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.util.Formater;
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Vector;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class DispatchStoreRequest extends HttpServlet {

	public static final String textHeaderMain[][] = {
		{"TRANSFER BARANG DARI GUDANG/TOKO", "Nomor", "Lokasi", "Tanggal", "Supplier", "Nama", "Alamat", "Telp", "Contact", "Keterangan", "STORE REQUESTION FORM", "Nomor BC", "Lokasi Asal", "Lokasi Tujuan", "Kategori", "Jenis Dokumen", "Tanggal BC"},
		{"DISPATCH ITEM FOR WAREHOUSE/STORE", "Number", "From Location", "Date", "Supplier", "Name", "Address", "Phone", "Contact", "Description", "STORE REQUESTION FORM", "Customs Number", "Source Location", "Request Location", "Category", "Document Type", "Customs Date"}
	};
	public static final String textHeaderItem[][] = {
		{"No", "Kode", "Nama Barang", "Unit", "Qty", "Barcode", "Total"},
		{"No", "Code", "Description", "Unit", "Qty", "Barcode", "Total"}
	};
	//public static int useBarcodeOrSku = Integer.parseInt(PstSystemProperty.getValueByName("USE_BARCODE_OR_SKU_IN_REPORT"));
	static int chooseTypeViewSkuOrBcd = 0;

	/* Generated by Together */
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
	}

	public static int getStrDutyFree() {
		String strDutyFree = PstSystemProperty.getValueByName("ENABLE_DUTY_FREE");
		System.out.println("#Duty Free: " + strDutyFree);
		int dutyFree = Integer.parseInt(strDutyFree);
		return dutyFree;
	}

	/**
	 * Destroys the servlet.
	 */
	public void destroy() {
	}
	public static Vector vect = new Vector();
	// setting the color values
	public static Color border = new Color(0x00, 0x00, 0x00);
	public static Color bgColor = new Color(220, 220, 220);
	// setting some fonts in the color chosen by the user
	public static com.lowagie.text.Font fontTitle = new com.lowagie.text.Font(com.lowagie.text.Font.STRIKETHRU, 13, com.lowagie.text.Font.BOLD, DispatchStoreRequest.border);
	public static com.lowagie.text.Font fontTitleUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.STRIKETHRU, 13, com.lowagie.text.Font.BOLD + com.lowagie.text.Font.UNDERLINE, DispatchStoreRequest.border);
	public static com.lowagie.text.Font fontMainHeader = new com.lowagie.text.Font(com.lowagie.text.Font.STRIKETHRU, 10, com.lowagie.text.Font.BOLD, DispatchStoreRequest.border);
	public static com.lowagie.text.Font fontHeader = new com.lowagie.text.Font(com.lowagie.text.Font.STRIKETHRU, 10, com.lowagie.text.Font.ITALIC, DispatchStoreRequest.border);
	public static com.lowagie.text.Font fontHeaderUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.STRIKETHRU, 10, com.lowagie.text.Font.ITALIC + com.lowagie.text.Font.UNDERLINE, DispatchStoreRequest.border);
	public static com.lowagie.text.Font fontListHeader = new com.lowagie.text.Font(com.lowagie.text.Font.STRIKETHRU, 10, com.lowagie.text.Font.BOLD, DispatchStoreRequest.border);
	public static com.lowagie.text.Font fontLsContent = new com.lowagie.text.Font(com.lowagie.text.Font.STRIKETHRU, 8);
	public static com.lowagie.text.Font fontLsContentUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.STRIKETHRU, 8, com.lowagie.text.Font.UNDERLINE, DispatchStoreRequest.border);
	public static com.lowagie.text.Font fontNormalHeader = new com.lowagie.text.Font(com.lowagie.text.Font.STRIKETHRU, 10);

	/**
	 * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 */
	protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		Color bgColor = new Color(200, 200, 200);
		com.lowagie.text.Rectangle rectangle = new com.lowagie.text.Rectangle(20, 20, 20, 20);
		rectangle.rotate();
		Document document = new Document(PageSize.A4, 20, 20, 30, 30);
		ByteArrayOutputStream baos = new ByteArrayOutputStream();

		try {
			//step2.2: creating an instance of the writer
			PdfWriter writer = PdfWriter.getInstance(document, baos);
			// step 3.1: adding some metadata to the document
			document.addSubject("This is a subject.");
			document.addSubject("This is a subject two.");

			//HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
			HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", DispatchStoreRequest.fontLsContent)), false);
			footer.setAlignment(Element.ALIGN_CENTER);
			footer.setBorder(HeaderFooter.NO_BORDER);
			//document.setHeader(header);
			document.setFooter(footer);

			document.open();

			/* get data from session */
			Vector list = new Vector();
			HttpSession sess = request.getSession(true);
			long oidDispatchMaterial = 0;
			int SESS_LANGUAGE = 0;

			String approot = "";

			//adding useBarcode or sku by mirahu 20120426
			String useBarcodeorSku = PstSystemProperty.getValueByName("USE_BARCODE_OR_SKU_IN_REPORT");
			//update opie-eyek 20131125
			int includePrintPrice = FRMQueryString.requestInt(request, "showprintprice");
			int typeRequest = FRMQueryString.requestInt(request, "typeRequest");
			if (useBarcodeorSku.equals("Not initialized")) {
				useBarcodeorSku = "0";
			}
			chooseTypeViewSkuOrBcd = Integer.parseInt(useBarcodeorSku);

			try {
				SESS_LANGUAGE = FRMQueryString.requestInt(request, "sess_language");
				oidDispatchMaterial = FRMQueryString.requestLong(request, "hidden_dispatch_id");
				approot = FRMQueryString.requestString(request, "approot");
			} catch (Exception e) {
				System.out.println("Exc : " + e.toString());
			}

			MatDispatch matDispatch = new MatDispatch();
			Vector vctContent = new Vector();
			if (oidDispatchMaterial != 0) {
				try {
					matDispatch = PstMatDispatch.fetchExc(oidDispatchMaterial);
					String whereClause = PstMatDispatchItem.fieldNames[PstMatDispatchItem.FLD_DISPATCH_MATERIAL_ID] + "=" + oidDispatchMaterial;
					vctContent = PstMatDispatchItem.list(0, 0, whereClause, "");
				} catch (Exception e) {
					System.out.println("err : " + e.toString());
				}

				String pathImage = "http://" + request.getServerName() + ":" + request.getServerPort() + approot + "/images/company_pdf.jpg";
				System.out.println("approot = " + pathImage);
				com.lowagie.text.Image gambar = null;
				try {
					gambar = com.lowagie.text.Image.getInstance(pathImage);
				} catch (Exception ex) {
					System.out.println("gambar >>>>>> = " + gambar.getImageMask());
				}

				DispatchStoreRequest.vect = new Vector();
				document.add(DispatchStoreRequest.getHeaderImage(SESS_LANGUAGE, gambar, typeRequest, matDispatch));
				document.add(DispatchStoreRequest.getHeaderdua(SESS_LANGUAGE, matDispatch, typeRequest));

				document = DispatchStoreRequest.getContent(vctContent, document, writer, SESS_LANGUAGE, matDispatch);

				document.add(DispatchStoreRequest.getHeaderApprove(3));
			}
		} catch (Exception e) {
			System.out.println("Exception e : " + e.toString());
		}

		// step 5: closing the document
		document.close();

		// we have written the pdfstream to a ByteArrayOutputStream,
		// now we are going to write this outputStream to the ServletOutputStream
		// after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
		response.setContentType("application/pdf");
		response.setContentLength(baos.size());
		ServletOutputStream out = response.getOutputStream();
		baos.writeTo(out);
		out.flush();
	}


	/* this method make table header */
	private static Table getHeaderImage(int SESS_LANGUAGE, com.lowagie.text.Image gambar, int typeRequest, MatDispatch matDispatch) throws BadElementException, DocumentException {
		Table table = new Table(2);
		try {
			int ctnInt[] = {100, 0};
			table.setBorderColor(new Color(255, 255, 255));
			table.setWidth(100);
			table.setWidths(ctnInt);
			table.setCellpadding(1);
			table.setCellspacing(0);

			table.setDefaultCellBorder(Table.NO_BORDER);
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new
			table.setDefaultCellBorder(Table.NO_BORDER);
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new
			table.setDefaultCellBorder(Table.NO_BORDER);
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new
			gambar.setAlignment(com.lowagie.text.Image.MIDDLE);
			gambar.scaleAbsolute(80, 80);
			table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase(new Chunk(gambar, 0, 0)));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new
			table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			if (typeRequest == 0) {
				table.addCell(new Phrase(DispatchStoreRequest.textHeaderMain[SESS_LANGUAGE][0], DispatchStoreRequest.fontTitleUnderline));
			} else {
				table.addCell(new Phrase(DispatchStoreRequest.textHeaderMain[SESS_LANGUAGE][10], DispatchStoreRequest.fontTitleUnderline));
			}

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new
			table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("" + matDispatch.getDispatchCode(), DispatchStoreRequest.fontListHeader));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			//new baris
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontLsContent));

		} catch (Exception e) {
		}
		return table;
	}

	private static Table getHeaderdua(int SESS_LANGUAGE, MatDispatch matDispatch, int typeRequest) throws BadElementException, DocumentException {
		if (matDispatch.getOID() != 0) {

                        int dutyFree = Integer.parseInt(PstSystemProperty.getValueByName("ENABLE_DUTY_FREE"));
			int ctnInt[] = {15, 3, 25, 10, 15, 3, 15};
			Table table = new Table(7);
			table.setBorderColor(new Color(255, 255, 255));
			table.setWidth(100);
			table.setWidths(ctnInt);

			table.setCellpadding(1);
			table.setCellspacing(0);

			Location location = new Location();

			// tanggal transaksi, category
			table.setDefaultCellBorder(Table.NO_BORDER);
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase(DispatchStoreRequest.textHeaderMain[SESS_LANGUAGE][3], DispatchStoreRequest.fontNormalHeader));
			table.addCell(new Phrase(":", DispatchStoreRequest.fontNormalHeader));
			table.addCell(new Phrase(Formater.formatDate(matDispatch.getDispatchDate()), DispatchStoreRequest.fontNormalHeader));
			table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                        if(dutyFree == 1){
                            table.addCell(new Phrase(DispatchStoreRequest.textHeaderMain[SESS_LANGUAGE][11], DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase(":", DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase(matDispatch.getNomorBeaCukai(), DispatchStoreRequest.fontNormalHeader));
                        }else{
                            table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                        }

			// lokasi order
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase(DispatchStoreRequest.textHeaderMain[SESS_LANGUAGE][12], DispatchStoreRequest.fontNormalHeader));
			table.addCell(new Phrase(":", DispatchStoreRequest.fontNormalHeader));
			getLocation(location, matDispatch.getLocationId());
			table.addCell(new Phrase(location.getName(), DispatchStoreRequest.fontNormalHeader));
			table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                        
                        if(dutyFree == 1){
                            table.addCell(new Phrase(DispatchStoreRequest.textHeaderMain[SESS_LANGUAGE][15], DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase(":", DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase(matDispatch.getJenisDokumen(), DispatchStoreRequest.fontNormalHeader));
                        }else{
                            table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                        }

			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase(DispatchStoreRequest.textHeaderMain[SESS_LANGUAGE][13], DispatchStoreRequest.fontNormalHeader));
			table.addCell(new Phrase(":", DispatchStoreRequest.fontNormalHeader));
			getLocation(location, matDispatch.getDispatchTo());
			table.addCell(new Phrase(location.getName(), DispatchStoreRequest.fontNormalHeader));
			table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                        
                        if(dutyFree == 1){
                            table.addCell(new Phrase(DispatchStoreRequest.textHeaderMain[SESS_LANGUAGE][16], DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase(":", DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase(Formater.formatDate(matDispatch.getTanggalBC()), DispatchStoreRequest.fontNormalHeader));
                        }else{
                            table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                            table.addCell(new Phrase("", DispatchStoreRequest.fontNormalHeader));
                        }

			createEmptySpace(table);

			return table;
		}

		return new Table(1);
	}

	private static Table getListHeader(int SESS_LANGUAGE) throws BadElementException, DocumentException {
		int ctnInt[] = {10, 20, 20, 30, 10, 10};
		Table table = new Table(6);
		try {
			table.setBorderColor(new Color(255, 255, 255));
			table.setWidth(100);
			table.setWidths(ctnInt);
			table.setBorderWidth(0);
			table.setCellpadding(1);
			table.setCellspacing(1);
			table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.setDefaultCellBackgroundColor(DispatchStoreRequest.bgColor);
			table.addCell(new Phrase(DispatchStoreRequest.textHeaderItem[SESS_LANGUAGE][0], DispatchStoreRequest.fontListHeader));

			table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.setDefaultCellBackgroundColor(DispatchStoreRequest.bgColor);
			table.addCell(new Phrase(DispatchStoreRequest.textHeaderItem[SESS_LANGUAGE][1], DispatchStoreRequest.fontListHeader));

			table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.setDefaultCellBackgroundColor(DispatchStoreRequest.bgColor);
			table.addCell(new Phrase(DispatchStoreRequest.textHeaderItem[SESS_LANGUAGE][5], DispatchStoreRequest.fontListHeader));

			table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.setDefaultCellBackgroundColor(DispatchStoreRequest.bgColor);
			table.addCell(new Phrase(DispatchStoreRequest.textHeaderItem[SESS_LANGUAGE][2], DispatchStoreRequest.fontListHeader));

			table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.setDefaultCellBackgroundColor(DispatchStoreRequest.bgColor);
			table.addCell(new Phrase(DispatchStoreRequest.textHeaderItem[SESS_LANGUAGE][3], DispatchStoreRequest.fontListHeader));

			table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.setDefaultCellBackgroundColor(DispatchStoreRequest.bgColor);
			table.addCell(new Phrase(DispatchStoreRequest.textHeaderItem[SESS_LANGUAGE][4], DispatchStoreRequest.fontListHeader));

		} catch (Exception e) {
			System.out.println("exc header" + e.toString());
		}
		return table;
	}

	private static Document getContent(Vector vct, Document document, PdfWriter writer, int SESS_LANGUAGE, MatDispatch matDispatch) throws BadElementException, DocumentException {
		Table table = DispatchStoreRequest.getListHeader(SESS_LANGUAGE);
		if (vct.size() > 0 && vct != null) {
			try {
				double total = 0;
				double totalQty = 0;
				for (int i = 0; i < vct.size(); i++) {
					MatDispatchItem recItem = (MatDispatchItem) vct.get(i);
					Material mat = PstMaterial.fetchExc(recItem.getMaterialId());
					Unit unit = PstUnit.fetchExc(recItem.getUnitId()); 

					table.setDefaultCellBackgroundColor(Color.WHITE);
					table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
					table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
					table.addCell(new Phrase(String.valueOf(i + 1), DispatchStoreRequest.fontLsContent));

					table.setDefaultCellBackgroundColor(Color.WHITE);
					table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
					table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
					table.addCell(new Phrase(mat.getSku(), DispatchStoreRequest.fontLsContent));

					table.setDefaultCellBackgroundColor(Color.WHITE);
					table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
					table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
					table.addCell(new Phrase(mat.getBarCode(), DispatchStoreRequest.fontLsContent));

					table.setDefaultCellBackgroundColor(Color.WHITE);
					table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
					table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
					table.addCell(new Phrase(mat.getName(), DispatchStoreRequest.fontLsContent));

					table.setDefaultCellBackgroundColor(Color.WHITE);
					table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
					table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
					table.addCell(new Phrase(unit.getCode(), DispatchStoreRequest.fontLsContent));

					table.setDefaultCellBackgroundColor(Color.WHITE);
					table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
					table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
					table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(recItem.getQty()), DispatchStoreRequest.fontLsContent));
					totalQty += recItem.getQty();

				}
				table.setDefaultCellBackgroundColor(Color.WHITE);
				table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
				table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
				table.setDefaultColspan(5);
				table.addCell(new Phrase("GRAND TOTAL", DispatchStoreRequest.fontListHeader));

				table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
				table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
				table.setDefaultColspan(1);
				table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(totalQty), DispatchStoreRequest.fontLsContent));

				document.add(table);
			} catch (Exception e) {
			}
		}
		return document;
	}

	private static Table getHeaderApprove(int length) throws BadElementException, DocumentException {
		Table table = new Table(length);
		String prepared = PstSystemProperty.getValueByName("SIGN_TRANSFER_1");
		String supervisor = PstSystemProperty.getValueByName("SIGN_TRANSFER_2");
		String koordinator = PstSystemProperty.getValueByName("SIGN_TRANSFER_3");
		String[] sign1 = prepared.split(",");
		String[] sign2 = supervisor.split(",");
		String[] sign3 = koordinator.split(",");
		try {
			table.setBorderColor(new Color(255, 255, 255));
			table.setWidth(100);
			table.setBorderWidth(0);
			table.setSpacing(1);
			table.setPadding(1);
			table.setDefaultCellBorder(Table.NO_BORDER);
			table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
			table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
			for (int i = 0; i < length; i++) {
				table.addCell("");
			}
			table.addCell(new Phrase(sign1[0], DispatchStoreRequest.fontNormalHeader));
			table.addCell(new Phrase(sign2[0], DispatchStoreRequest.fontNormalHeader));
			table.addCell(new Phrase(sign3[0], DispatchStoreRequest.fontNormalHeader));
			for (int i = 0; i < length; i++) {
				table.addCell("");
				table.addCell("");
				table.addCell("");
			}
			table.addCell(new Phrase(sign1[1], DispatchStoreRequest.fontLsContent));
			table.addCell(new Phrase(sign2[1], DispatchStoreRequest.fontLsContent));
			table.addCell(new Phrase(sign3[1], DispatchStoreRequest.fontLsContent));
 
		} catch (Exception e) {
			System.out.println("Err aproval: " + e.toString());
		}
		return table;
	}

	private static void createEmptySpace(Table table) throws BadElementException, DocumentException {
		int space = table.columns();
		for (int i = 0; i < space; i++) {
			table.setDefaultCellBorder(Table.NO_BORDER);
			table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
			table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
			table.addCell(new Phrase("", DispatchStoreRequest.fontListHeader));
		}

	}

	private static void getLocation(Location source, long oid) {
		try {
			Location temp = PstLocation.fetchExc(oid);
			source.setName(temp.getName());
		} catch (Exception e) {
			System.out.println("Ambil data lokasi dari oid: " + e.toString());
		}

	}

	/**
	 * Handles the HTTP <code>GET</code> method.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Handles the HTTP <code>POST</code> method.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Returns a short description of the servlet.
	 */
	public String getServletInfo() {
		return "Short description";
	}
}




