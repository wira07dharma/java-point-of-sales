/**
 * User: gwawan
 * Date: Sep 1, 2007
 * Time: 9:31:23 AM
 * To change this template use Options | File Templates.
 */
package com.dimata.posbo.report.receive;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import java.io.IOException;
import java.util.Vector;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;

import com.dimata.qdep.form.FRMHandler;
import com.dimata.qdep.form.FRMQueryString;

public class ReportReceivePdf extends HttpServlet {
    /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }
    
    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color bgColor = new Color(220, 220, 220);
    
    // setting some fonts in the color chosen by the user
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 13, Font.BOLD, border);
    public static Font fontMainHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.BOLD, border);
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.ITALIC, border);
    public static Font fontListHeader = new Font(Font.TIMES_NEW_ROMAN, 8, Font.BOLD, border);
    public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 8);
    
    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    
    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        
        Color bgColor = new Color(200, 200, 200);
        Rectangle rectangle = new Rectangle(20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4, 20, 20, 30, 30);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        try {
            //step2.2: creating an instance of the writer
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            // step 3.1: adding some metadata to the document
            document.addSubject("This is a subject.");
            document.addSubject("This is a subject two.");
            
            //HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
            HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", fontLsContent)), false);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setBorder(HeaderFooter.NO_BORDER);
            //document.setHeader(header);
            document.setFooter(footer);
            
            document.open();
            //update opie-eyek 25012013
            int pencarianPenerimaan = FRMQueryString.requestInt(request,"view");

            /* get data from session */
            Vector list = new Vector();
            HttpSession sess = request.getSession(true);
            try {
                list = (Vector) sess.getValue("REPORT_RECEIVE_PDF");
            } catch (Exception e) {
                System.out.println("Exc : " + e.toString());
                list = new Vector();
            }
            
            Vector header = new Vector(1, 1);
            Vector vctContent = new Vector(1, 1);
            if ((list != null) && (list.size() > 0)) {
                document.add(getContent(list, document, writer,pencarianPenerimaan));
            }
            
        } catch (Exception e) {
            System.out.println("Exception e : " + e.toString());
        }
        
        // step 5: closing the document
        document.close();
        
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }
    
    
    /* this method make table header */
    private static Table getHeader(Vector vct) throws BadElementException, DocumentException {
        
        if (vct != null && vct.size() > 0) {
            
            int ctnInt[] = {100};
            Table table = new Table(1);
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            //  nama company, alamat,telp
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)vct.get(0), fontHeader));
            table.addCell(new Phrase((String)vct.get(1), fontHeader));
            table.addCell(new Phrase((String)vct.get(2), fontHeader));
            
            // judul report, periode report
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)vct.get(3), fontTitle));
            table.addCell(new Phrase((String)vct.get(4), fontTitle));
            table.addCell(new Phrase("", fontTitle));
            
            // lokasi
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)vct.get(5), fontMainHeader));
            if((String)vct.get(6) != "") {
                table.addCell(new Phrase((String)vct.get(6), fontMainHeader));
            }
            return table;
        }
        
        return new Table(1);
    }
    
    
    private static Table getListHeader(Vector header) throws BadElementException, DocumentException {
        //int ctnInt[] = {5, 15, 31, 13, 10, 13, 13};
          int ctnInt[] = {5, 10, 10, 15, 31, 13, 10, 13, 13};
        //Table table = new Table(7);
           Table table = new Table(9);
          try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(0), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(1), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(2),fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(3), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(4), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(5), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(6), fontListHeader));
            
            //add location nd supplier
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(7), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(8), fontListHeader));
            
        }catch(Exception e){
            System.out.println("exc header"+e.toString());
        }
        
        return table;
    }

     private static Table getListHeaderPencarianSupplierandCategory(Vector header) throws BadElementException, DocumentException {
        int ctnInt[] = {5, 15, 31, 13, 10, 13, 13};
          //int ctnInt[] = {5, 10, 10, 15, 31, 13, 10, 13, 13};
        Table table = new Table(7);
        //   Table table = new Table(9);
          try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(0);

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(0), fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(1), fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(2),fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(3), fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(4), fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(5), fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(6), fontListHeader));

            //add location nd supplier
           /* table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(7), fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(8), fontListHeader));*/

        }catch(Exception e){
            System.out.println("exc header"+e.toString());
        }

        return table;
    }
    
    private static Table getListFooter(Table table, Vector footer) throws BadElementException, DocumentException {
        try {
            /** SUB TOTAL */
            //table.setDefaultColspan(6);
              table.setDefaultColspan(8);
            
            // Title
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("SUB TOTAL", fontListHeader));
            
            table.setDefaultColspan(1);
            
            // Harga Beli
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(0), fontListHeader));
            
            
            /** GRAND TOTAL */
            //table.setDefaultColspan(6);
            table.setDefaultColspan(8);
           
            
            // Title
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("GRAND TOTAL", fontListHeader));
            
            table.setDefaultColspan(1);
            
            // Harga Beli
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(1), fontListHeader));
            
        }catch(Exception e){
            System.out.println("exc footer"+e.toString());
        }
        
        return table;
    }


      private static Table getListFooterSupplierCategory(Table table, Vector footer) throws BadElementException, DocumentException {
        try {
            /** SUB TOTAL */
            table.setDefaultColspan(6);
            // table.setDefaultColspan(8);

            // Title
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("SUB TOTAL", fontListHeader));

            table.setDefaultColspan(1);

            // Harga Beli
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(0), fontListHeader));


            /** GRAND TOTAL */
            table.setDefaultColspan(6);
            //table.setDefaultColspan(8);


            // Title
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("GRAND TOTAL", fontListHeader));

            table.setDefaultColspan(1);

            // Harga Beli
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(1), fontListHeader));

        }catch(Exception e){
            System.out.println("exc footer"+e.toString());
        }

        return table;
    }
    
    private static Table getContent(Vector vct, Document document, PdfWriter writer, int pencarianPenerimaan) throws BadElementException, DocumentException {
        document.add(getHeader((Vector)vct.get(0)));
        
        Vector vctContent = (Vector)vct.get(1);
        Vector header = (Vector)vctContent.get(0);
        Vector body = (Vector)vctContent.get(1);
        
        Vector footer = (Vector)vct.get(2);
        Table table=new Table(9);

        if (pencarianPenerimaan==1){
            table =getListHeaderPencarianSupplierandCategory(header);
        }else{
            table = getListHeader(header);
        }
       
        boolean newPage = false;
        double hargaBeli = 0;
        double subTotalHargaBeli = 0;
        
        if (body != null && body.size() > 0) {
            try{
                for (int i = 0; i < body.size(); i++) {
                    Vector vctfrs = (Vector)body.get(i);
                    
                    //hargaBeli = Double.parseDouble((String)vctfrs.get(6));
                    if (pencarianPenerimaan==1){
                        hargaBeli = Double.parseDouble((String)vctfrs.get(6));
                    }else{
                         hargaBeli = Double.parseDouble((String)vctfrs.get(8));
                    }
                   
                    subTotalHargaBeli += hargaBeli;
                    
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String)vctfrs.get(0), fontLsContent));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String)vctfrs.get(1), fontLsContent));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String)vctfrs.get(2), fontLsContent));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String)vctfrs.get(3), fontLsContent));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String)vctfrs.get(4), fontLsContent));
                    
                    if (pencarianPenerimaan==0){
                         table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase((String)vctfrs.get(5), fontLsContent));

                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase((String)vctfrs.get(6), fontLsContent));

                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase((String)vctfrs.get(7), fontLsContent));
                    
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(hargaBeli), fontLsContent));
                    }else{
                         table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase((String)vctfrs.get(5), fontLsContent));

                       /* table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase((String)vctfrs.get(6), fontLsContent));*/

                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(hargaBeli), fontLsContent));
                    }
                    /** buat baris kosong */
                    //table.setDefaultColspan(7);
                    if (pencarianPenerimaan==0){
                        table.setDefaultColspan(9);
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        //add table 20120529
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.setDefaultColspan(1);
                    }else{
                         table.setDefaultColspan(7);
                         table.addCell(new Phrase("", fontLsContent));
                         table.addCell(new Phrase("", fontLsContent));
                         table.addCell(new Phrase("", fontLsContent));
                         table.addCell(new Phrase("", fontLsContent));
                         table.setDefaultColspan(1);
                    }

                    if (!writer.fitsPage(table)) {
                        /** hapus baris kosong */
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        //add table 20120529
                        if (pencarianPenerimaan==0){
                            table.deleteLastRow();
                            table.deleteLastRow();
                        }
                        Vector tempFooter = new Vector();
                        /** Sub Total*/
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalHargaBeli));
                        
                        /** Grand Total */
                        tempFooter.add((String)footer.get(0));
                        if (pencarianPenerimaan==0){
                            document.add(getListFooter(table, tempFooter));
                        }else{
                             document.add(getListFooterSupplierCategory(table, tempFooter));
                        }
                        /** set variabel sub* = 0 untuk next page */
                        subTotalHargaBeli = 0;
                        
                        document.newPage();
                        document.add(getHeader((Vector)vct.get(0)));
                        if (pencarianPenerimaan==0){
                             table = getListHeader(header);
                        }else{
                             table =getListHeaderPencarianSupplierandCategory(header);
                        }

                        newPage = true;
                    }
                    else {
                        /** hapus baris kosong */
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        //add table 20120529
                        if (pencarianPenerimaan==0){
                        table.deleteLastRow();
                        table.deleteLastRow();
                        }
                        
                        newPage = false;
                    }
                    
                }
                
                if(newPage == false) {
                    Vector tempFooter = new Vector();
                    /** Sub Total*/
                    tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalHargaBeli));
                    
                    /** Grand Total */
                    tempFooter.add((String)footer.get(0));

                    if (pencarianPenerimaan==0){
                            table = getListFooter(table, tempFooter);
                           // document.add(getListFooter(table, tempFooter));
                    }else{
                            table = getListFooterSupplierCategory(table, tempFooter);
                            //document.add(getListFooterSupplierCategory(table, tempFooter));
                    }
                    //table = getListFooter(table, tempFooter);
                }
                
            }catch(Exception e){
                System.out.println("exc contenct"+e.toString());
            }
        }
        
        return table;
    }
    
    
    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}
