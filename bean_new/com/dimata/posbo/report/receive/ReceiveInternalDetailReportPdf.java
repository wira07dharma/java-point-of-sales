/**
 * User: gwawan
 * Date: Okt 15, 2007
 * Time: 9:31:23 AM
 * To change this template use Options | File Templates.
 */
package com.dimata.posbo.report.receive;

import com.dimata.posbo.entity.masterdata.Category;
import com.dimata.posbo.entity.masterdata.Material;
import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.*;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfWriter;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.ServletException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletOutputStream;
import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.util.Vector;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.qdep.form.FRMHandler;
import com.dimata.posbo.entity.masterdata.Unit;
import com.dimata.posbo.entity.warehouse.MatReceiveItem;
import com.dimata.posbo.session.transferdata.ItemFailedPDF;

public class ReceiveInternalDetailReportPdf extends HttpServlet {
    /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }
    
    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color bgColor = new Color(220, 220, 220);
    
    // setting some fonts in the color chosen by the user
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 13, Font.BOLD, border);
    public static Font fontMainHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.BOLD, border);
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.ITALIC, border);
    public static Font fontListHeader = new Font(Font.TIMES_NEW_ROMAN, 9, Font.BOLD, border);
    public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 9);
    
    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, java.io.IOException {
        
        Color bgColor = new Color(200, 200, 200);
        Rectangle rectangle = new Rectangle(20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4.rotate(), 20, 20, 30, 30);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        try {
            //step2.2: creating an instance of the writer
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            // step 3.1: adding some metadata to the document
            document.addSubject("This is a subject.");
            document.addSubject("This is a subject two.");
            
            //HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
            HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", fontLsContent)), false);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setBorder(HeaderFooter.NO_BORDER);
            //document.setHeader(header);
            document.setFooter(footer);
            
            document.open();
            
            /* get data from session */
            Vector list = new Vector();
            HttpSession sess = request.getSession(true);
            try {
                list = (Vector) sess.getValue("RECEIVE_INTERNAL_INVOICE_REPORT_PDF");
            } catch (Exception e) {
                System.out.println("Exc : " + e.toString());
                list = new Vector();
            }
            
            Vector vctContent = new Vector(1, 1);
            if ((list != null) && (list.size() > 0)) {
                document.add(getContent(list, document, writer));
            }
            
            
            
        } catch (Exception e) {
            System.out.println("Exception e : " + e.toString());
        }
        
        // step 5: closing the document
        document.close();
        
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }
    
    private static Table getListFooter() throws BadElementException, DocumentException {
        int ctnInt[] = {30, 40, 30};
	Table table = new Table(3);
        table.setBorderColor(new Color(255, 255, 255));
        table.setWidth(100);
        table.setWidths(ctnInt);
        table.setBorderWidth(0);
        table.setCellpadding(1);
        table.setCellspacing(1);
        
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("Mengetahui", ItemFailedPDF.fontListHeader));

        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("Accounting", ItemFailedPDF.fontListHeader));

        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("Edp/Inventory", ItemFailedPDF.fontListHeader));
        
        
        
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("Mengetahui", ItemFailedPDF.fontListHeader));

        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("Accounting", ItemFailedPDF.fontListHeader));

         table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("Edp/Inventory", ItemFailedPDF.fontListHeader));
        
        
        
        
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));

        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));

        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));
        
        
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("(.............)", ItemFailedPDF.fontListHeader));

        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("(.............)", ItemFailedPDF.fontListHeader));

         table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.setDefaultCellBackgroundColor(ItemFailedPDF.bgColor);
        table.addCell(new Phrase("(.............)", ItemFailedPDF.fontListHeader));
        
        
        
        return table;
    }
    
    /* this method make table header */
    private static Table getHeader(Vector vct) throws BadElementException, DocumentException {
        if (vct != null && vct.size() > 0) {
            
            int ctnInt[] = {10,90};
            Table table = new Table(2);
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            //  nama company, alamat,telp
            table.setDefaultColspan(2);
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)vct.get(0), fontHeader));
            table.addCell(new Phrase((String)vct.get(1), fontHeader));
            table.addCell(new Phrase((String)vct.get(2), fontHeader));
            
            // judul report, periode report
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)vct.get(3), fontTitle));
            table.addCell(new Phrase("", fontTitle));
            
            // periode, lokasi, kategori, supplier
            table.setDefaultColspan(1);
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)vct.get(4), fontListHeader));
            table.addCell(new Phrase((String)vct.get(5), fontListHeader));
            if((String)vct.get(7) != "") { //location
                table.addCell(new Phrase((String)vct.get(6), fontListHeader));
                table.addCell(new Phrase((String)vct.get(7), fontListHeader));
            }
            if((String)vct.get(9) != "") { //category or supplier
                table.addCell(new Phrase((String)vct.get(8), fontListHeader));
                table.addCell(new Phrase((String)vct.get(9), fontListHeader));
            }
            
            return table;
            
        }
        
        return new Table(1);
    }
    
    
    private static Table getListHeader(Vector header) throws BadElementException, DocumentException {
        int ctnInt[] = {3, 12, 7, 11, 8, 17, 7, 5, 8, 10, 12};
        Table table = new Table(11);
        try{
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            table.setDefaultRowspan(2);
            
            // No
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(0), fontListHeader));
            
            // Nomor Invoice
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(1),fontListHeader));
            
            // Tanggal
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(2), fontListHeader));
            
            // Keterangan
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(3), fontListHeader));
            
            table.setDefaultRowspan(1);
            table.setDefaultColspan(6);
            // Detail Item
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(4), fontListHeader));
            
            table.setDefaultRowspan(2);
            table.setDefaultColspan(1);
            
            // Total Beli
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(5), fontListHeader));
            
            table.setDefaultRowspan(1);
            table.setDefaultColspan(1);
            
            /** Kode Item */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(6), fontListHeader));
            
            /** Nama Item */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(7), fontListHeader));
            
            /** Qty */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(8), fontListHeader));
            
            /** Unit */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(9), fontListHeader));
            
            /** Harga Beli */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(10), fontListHeader));
            
            /** Total Beli */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(11), fontListHeader));
            
        }catch(Exception e){
            System.out.println("Exception getListHeader "+e.toString());
        }
        
        return table;
    }
    
    private static Table getFooter(Vector footer, Table table) {
        try {
            /** Sub Total */
            table.setDefaultColspan(10);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("SUB TOTAL", fontListHeader));
            
            table.setDefaultColspan(1);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(0), fontListHeader));
            
            /** Grand Total */
            table.setDefaultColspan(10);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("GRAND TOTAL", fontListHeader));
            
            table.setDefaultColspan(1);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(1), fontListHeader));
        }
        catch(Exception e) {
            System.out.println("Exception getFooter "+e.toString());
        }
        return table;
    }
    
    private static Table getContent(Vector vct, Document document, PdfWriter writer) throws BadElementException, DocumentException {
        document.add(getHeader((Vector)vct.get(0)));
        
        Vector vctContent = (Vector)vct.get(1);
        Vector header = (Vector)vctContent.get(0);
        Vector content = (Vector)vctContent.get(1);
        
        Vector footer = (Vector)vct.get(2);
        
        /** buat header untuk table */
        Table table = getListHeader(header);
        
        /** variabel bantu */
        boolean newPage = false;
        int nomor = 1;
        int subTotalBeli = 0;
        
        if (content != null && content.size() > 0) {
            try {
                /** list main */
                for (int i = 0; i < content.size(); i++) {
                    Vector vctfrs = (Vector)content.get(i);
                    Vector listItem = (Vector)vctfrs.get(4);
                    
                    /** list item */
                    for(int j=0; j<listItem.size(); j++) {
                        Vector vt = (Vector)listItem.get(j);
                        MatReceiveItem objMatReceiveItem = (MatReceiveItem)vt.get(0);
                        Material objMaterial = (Material)vt.get(1);
                        Unit objUnit = (Unit)vt.get(2);
                        Category objCategory = (Category)vt.get(3);
                        
                        subTotalBeli += objMatReceiveItem.getTotal();
                        table.setDefaultColspan(1);
                        table.setDefaultCellBackgroundColor(Color.WHITE);
                        if(j==0) {
                            // No
                            table.setDefaultCellBackgroundColor(Color.WHITE);
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase(String.valueOf(nomor)+".", fontLsContent));
                            
                            // Nomor Nota
                            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase((String)vctfrs.get(1), fontLsContent));
                            
                            // Tanggal
                            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase((String)vctfrs.get(2), fontLsContent));
                            
                            // Keterangan
                            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase((String)vctfrs.get(3), fontLsContent));
                        }
                        else {
                            table.setDefaultColspan(4);
                            table.addCell(new Phrase("", fontLsContent));
                        }
                        
                        table.setDefaultColspan(1);
                        // Kode
                        table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(objMaterial.getSku(), fontLsContent));
                        
                        // Nama
                        table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(objMaterial.getName(), fontLsContent));
                        
                        // Qty
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(objMatReceiveItem.getQty()), fontLsContent));
                        
                        // Satuan
                        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(objUnit.getCode(), fontLsContent));
                        
                        // Harga Beli
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(objMatReceiveItem.getCost()), fontLsContent));
                        
                        // Total Beli Item
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(objMatReceiveItem.getTotal()), fontLsContent));
                        
                        if(j==0) {
                            table.setDefaultColspan(1);
                            // Total Beli
                            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase((String)vctfrs.get(5), fontLsContent));
                        }
                        else {
                            table.setDefaultColspan(1);
                            table.addCell(new Phrase("", fontLsContent));
                        }
                        
                        /** buat baris kosong */
                        table.setDefaultColspan(11);
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        
                        if (!writer.fitsPage(table)) {
                            /** hapus baris kosong */
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            
                            Vector tempFooter = new Vector();
                            /** Sub Total*/
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalBeli));
                            
                            /** Grand Total */
                            tempFooter.add((String)footer.get(0));
                            
                            document.add(getFooter(tempFooter, table));
                            
                            /** set variabel sub = 0 untuk next page */
                            subTotalBeli = 0;
                            
                            document.newPage();
                            document.add(getHeader((Vector)vct.get(0)));
                            table = getListHeader(header);
                            newPage = true;
                        }
                        else {
                            /** hapus baris kosong */
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            
                            newPage = false;
                        }
                    }
                    nomor++;
                }
                
                if(newPage == false) {
                    Vector tempFooter = new Vector();
                    /** Sub Total*/
                    tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalBeli));
                    
                    /** Grand Total */
                    tempFooter.add((String)footer.get(0));
                    
                    table = getFooter(tempFooter, table);
                }
                
            }catch(Exception e){
                System.out.println("Exception getContent "+e.toString());
            }
        }
        
        return table;
    }
    
    private static String cekNull(String val){
        if(val.equals("null"))
            val = "";
        return val;
    }
    
    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}
