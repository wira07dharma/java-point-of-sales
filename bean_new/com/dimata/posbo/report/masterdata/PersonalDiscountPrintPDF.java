package com.dimata.posbo.report.masterdata;

import com.dimata.posbo.entity.masterdata.Material;
import com.dimata.posbo.entity.masterdata.MemberReg;
import com.dimata.posbo.entity.masterdata.PersonalDiscount;
import com.dimata.posbo.entity.masterdata.PstMaterial;
import com.dimata.posbo.entity.masterdata.PstMemberReg;
import com.dimata.posbo.entity.masterdata.PstPersonalDiscount;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.qdep.form.FRMHandler;
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import java.util.Vector;
import java.awt.*;
import java.io.IOException;
import java.io.ByteArrayOutputStream;

public class PersonalDiscountPrintPDF extends HttpServlet {


    public static final String textHeaderMain[][] =
            {
                    {"PERSONAL DISCOUNT", "Kode/Barcode", "Nama"},
                    {"PERSONAL DISCOUNT", "Code/Barcode", "Name"}
            };

    public static final String textHeaderItem[][] =
            {
                    {"No", "Kode", "Nama Barang", "Discount(%)", "Discount(Val)"},
                    {"No", "Code", "Description", "Discount(%)", "Discount(Val)"}
            };

    /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /**
     * Destroys the servlet.
     */
    public void destroy() {

    }

    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color bgColor = new Color(220, 220, 220);

    // setting some fonts in the color chosen by the user
    public static com.lowagie.text.Font fontTitle = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 13, com.lowagie.text.Font.BOLD, PersonalDiscountPrintPDF.border);
    public static com.lowagie.text.Font fontTitleUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 13, com.lowagie.text.Font.BOLD + com.lowagie.text.Font.UNDERLINE, PersonalDiscountPrintPDF.border);
    public static com.lowagie.text.Font fontMainHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.BOLD, PersonalDiscountPrintPDF.border);
    public static com.lowagie.text.Font fontHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.ITALIC, PersonalDiscountPrintPDF.border);
    public static com.lowagie.text.Font fontHeaderUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.ITALIC + com.lowagie.text.Font.UNDERLINE, PersonalDiscountPrintPDF.border);
    public static com.lowagie.text.Font fontListHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.BOLD, PersonalDiscountPrintPDF.border);
    public static com.lowagie.text.Font fontLsContent = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 8);
    public static com.lowagie.text.Font fontLsContentUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 8, com.lowagie.text.Font.UNDERLINE, PersonalDiscountPrintPDF.border);

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     *
     * @param request  servlet request
     * @param response servlet response
     */

    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        Color bgColor = new Color(200, 200, 200);
        com.lowagie.text.Rectangle rectangle = new com.lowagie.text.Rectangle(20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4, 20, 20, 30, 30);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {
            //step2.2: creating an instance of the writer
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            // step 3.1: adding some metadata to the document
            document.addSubject("This is a subject.");
            document.addSubject("This is a subject two.");

            //HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
            HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", PersonalDiscountPrintPDF.fontLsContent)), false);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setBorder(HeaderFooter.NO_BORDER);
            //document.setHeader(header);
            document.setFooter(footer);

            document.open();

            /* get data from session */
            Vector list = new Vector();
            HttpSession sess = request.getSession(true);
            //SrcMaterial srcMaterial = new SrcMaterial();
            //try{
            //    srcMaterial = (SrcMaterial)sess.getValue();
            //}catch(Exception e){}
            long oidMemberReg = 0;
            int SESS_LANGUAGE = 0;
            long oidCateg = 0;
            long oidMerk = 0;
            String code = "";
            String name = "";
            String approot = "";
            try {
                SESS_LANGUAGE = FRMQueryString.requestInt(request, "sess_language");
                oidMemberReg = FRMQueryString.requestLong(request, "hidden_member_id");
                approot = FRMQueryString.requestString(request, "approot");
                oidCateg = FRMQueryString.requestLong(request, "hidden_categ_id");
                oidMerk = FRMQueryString.requestLong(request, "hidden_merk_id");
                code = FRMQueryString.requestString(request, "hidden_code");
                name = FRMQueryString.requestString(request, "hidden_name");
            } catch (Exception e) {
                System.out.println("Exc : " + e.toString());
            }

            MemberReg memberReg = new MemberReg();
            Vector vctContent = new Vector();
            if (oidMemberReg != 0) {
                try {
                    memberReg = PstMemberReg.fetchExc(oidMemberReg);
                    String where = PstPersonalDiscount.fieldNames[PstPersonalDiscount.FLD_CONTACT_ID] + "=" + oidMemberReg;
                    vctContent = PstPersonalDiscount.list(0, 0, where, PstPersonalDiscount.fieldNames[PstPersonalDiscount.FLD_PERS_DISC_PCT]);
                } catch (Exception e) {
                    System.out.println("err : " + e.toString());
                }

                String pathImage = "http://" + request.getServerName() + ":" + request.getServerPort() + approot + "/images/company.jpg";
                System.out.println("approot = " + pathImage);
                com.lowagie.text.Image gambar = null;
                try {
                    gambar = com.lowagie.text.Image.getInstance(pathImage);
                } catch (Exception ex) {
                    System.out.println("gambar >>>>>> = " + gambar.getImageMask());
                }

                document.add(PersonalDiscountPrintPDF.getHeaderImage(SESS_LANGUAGE, gambar));
                document.add(PersonalDiscountPrintPDF.getHeader(SESS_LANGUAGE, memberReg));
                document = PersonalDiscountPrintPDF.getContent(vctContent, document,SESS_LANGUAGE);
                //document.add(PersonalDiscountPrintPDF.getHeaderApprove(PersonalDiscountPrintPDF.vect));
            }
        } catch (Exception e) {
            System.out.println("Exception e : " + e.toString());
        }

        // step 5: closing the document
        document.close();

        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }


    /* this method make table header */
    private static Table getHeaderImage(int SESS_LANGUAGE, com.lowagie.text.Image gambar) throws BadElementException, DocumentException {
        Table table = new Table(2);
        try {
            int ctnInt[] = {40, 60};
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);

            //  nama company, alamat,telp
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            //URL url = new URL("");

            gambar.setAlignment(com.lowagie.text.Image.MIDDLE);
            gambar.scalePercent(40);
            table.addCell(new Phrase(new Chunk(gambar, 0, 0)));
            table.addCell(new Phrase(PersonalDiscountPrintPDF.textHeaderMain[SESS_LANGUAGE][0], PersonalDiscountPrintPDF.fontTitleUnderline));

            table.addCell(new Phrase("", PersonalDiscountPrintPDF.fontHeader));
            table.addCell(new Phrase("", PersonalDiscountPrintPDF.fontTitle));

        } catch (Exception e) {
        }
        return table;
    }


    /* this method make table header */
    private static Table getHeader(int SESS_LANGUAGE, MemberReg memberReg) throws BadElementException, DocumentException {

        if (memberReg.getOID() != 0) {
            int ctnInt[] = {100};
            Table table = new Table(1);
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);

            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(memberReg.getMemberBarcode(), PersonalDiscountPrintPDF.fontHeader));
            table.addCell(new Phrase(memberReg.getPersonName(), PersonalDiscountPrintPDF.fontHeader));
            table.addCell(new Phrase(memberReg.getHomeAddr(), PersonalDiscountPrintPDF.fontHeader));
            table.addCell(new Phrase(memberReg.getHomeTelp(), PersonalDiscountPrintPDF.fontHeader));
            return table;
        }
        return new Table(1);
    }


    private static Table getListHeader(int SESS_LANGUAGE) throws BadElementException, DocumentException {
        int ctnInt[] = {3, 11, 35, 10, 10};
        Table table = new Table(5);
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(1);

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PersonalDiscountPrintPDF.bgColor);
            table.addCell(new Phrase(PersonalDiscountPrintPDF.textHeaderItem[SESS_LANGUAGE][0], PersonalDiscountPrintPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PersonalDiscountPrintPDF.bgColor);
            table.addCell(new Phrase(PersonalDiscountPrintPDF.textHeaderItem[SESS_LANGUAGE][1], PersonalDiscountPrintPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PersonalDiscountPrintPDF.bgColor);
            table.addCell(new Phrase(PersonalDiscountPrintPDF.textHeaderItem[SESS_LANGUAGE][2], PersonalDiscountPrintPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PersonalDiscountPrintPDF.bgColor);
            table.addCell(new Phrase(PersonalDiscountPrintPDF.textHeaderItem[SESS_LANGUAGE][3], PersonalDiscountPrintPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(PersonalDiscountPrintPDF.bgColor);
            table.addCell(new Phrase(PersonalDiscountPrintPDF.textHeaderItem[SESS_LANGUAGE][4], PersonalDiscountPrintPDF.fontListHeader));

        } catch (Exception e) {
            System.out.println("exc header" + e.toString());
        }

        return table;
    }

    private static Document getContent(Vector vct, Document document,int SESS_LANGUAGE) throws BadElementException, DocumentException {
        Table table = PersonalDiscountPrintPDF.getListHeader(SESS_LANGUAGE);
        if (vct != null && vct.size() > 0) {
            try {
                double total = 0;
                for (int i = 0; i < vct.size(); i++) {
                    PersonalDiscount personalDiscount = (PersonalDiscount)vct.get(i);
                    Material mat = new Material();
                    try{
                        mat = PstMaterial.fetchExc(personalDiscount.getMaterialId());
                    }catch(Exception e){
                        System.out.println("ERR Get Material : "+e.toString());
                    }
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(String.valueOf(i + 1), PersonalDiscountPrintPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(mat.getSku(), PersonalDiscountPrintPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(mat.getName(), PersonalDiscountPrintPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(personalDiscount.getPersDiscPct()), PersonalDiscountPrintPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(personalDiscount.getPersDiscVal()), PersonalDiscountPrintPDF.fontLsContent));

                    /*if (!writer.fitsPage(table)) {
                        table.deleteLastRow();
                        i--;
                        table.deleteLastRow();
                        i--;
                        document.add(table);
                        document.newPage();
                        table = getListHeader(SESS_LANGUAGE);
                    }*/
                }
                document.add(table);
            } catch (Exception e) {
                System.out.println("exc contenct" + e.toString());
            }
        }

        return document;
    }

    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request  servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request  servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}
