/**
 * User: gwawan
 * Date: Apr 24, 2007
 * Time: 9:31:23 AM
 * To change this template use Options | File Templates.
 */
package com.dimata.posbo.report.masterdata;

import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.*;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfWriter;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.ServletException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletOutputStream;
import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.util.Vector;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.posbo.entity.search.SrcMemberReg;
import com.dimata.posbo.session.masterdata.SessMemberReg;
import com.dimata.posbo.entity.masterdata.MemberReg;

public class MemberListPdf extends HttpServlet {
    /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }
    
    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color bgColor = new Color(220, 220, 220);
    
    // setting some fonts in the color chosen by the user
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 13, Font.BOLD, border);
    public static Font fontMainHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.BOLD, border);
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.ITALIC, border);
    public static Font fontListHeader = new Font(Font.TIMES_NEW_ROMAN, 8, Font.BOLD, border);
    public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 8);
    
    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        
        Color bgColor = new Color(200, 200, 200);
        Rectangle rectangle = new Rectangle(20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4, 20, 20, 30, 30);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        HttpSession session = request.getSession(true);
        SrcMemberReg srcMemberReg = new SrcMemberReg();
        Vector pdfContent = new Vector(1,1);
        
        try {
            //step 1: creating an instance of the writer
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            //step 2: adding some metadata to the document
            document.addSubject("This is a subject.");
            document.addSubject("This is a subject two.");
            
            HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", fontLsContent)), false);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setBorder(HeaderFooter.NO_BORDER);
            document.setFooter(footer);
            
            document.open();
            
            /*step 3: get data from session */
            try {
                pdfContent = (Vector)session.getValue("SESS_CONTACT_LIST_PDF");
            }
            catch(Exception e) {
                System.out.println("Error when get session \n"+e.toString());
            }
            
            Vector header = new Vector(1, 1);
            Vector records = new Vector(1, 1);
            Vector vctContent = new Vector(1,1);
            if ((pdfContent != null) && (pdfContent.size() > 0)) {
                header = (Vector)pdfContent.get(0);
                document.add(getHeader(header));
                
                srcMemberReg = (SrcMemberReg) pdfContent.get(1);
                records = SessMemberReg.searchMemberReg(srcMemberReg, 0, 0);
                document.add(getContent(records, (Vector)pdfContent.get(2), document, writer, request));
            }
            
        } catch (Exception e) {
            System.out.println("Exception e : " + e.toString());
        }
        
        //step 4: closing the document
        document.close();
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }
    
    
    /* this method make table header */
    private static Table getHeader(Vector vct) throws BadElementException, DocumentException {
        if (vct != null && vct.size() > 0) {
            int ctnInt[] = {100};
            Table table = new Table(1);
            String reportTitle = (String)vct.get(0);
            String compName = (String)vct.get(1);
            String compAddr = (String)vct.get(2);
            Vector tempCompDetail = (Vector)vct.get(3);
            String compTelpFax = (String)tempCompDetail.get(0)+" "+(String)tempCompDetail.get(1);
            
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            //  nama, alamat, telp company
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(compName, fontHeader));
            table.addCell(new Phrase(compAddr, fontHeader));
            table.addCell(new Phrase(compTelpFax, fontHeader));
            
            // header
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(reportTitle.toUpperCase(), fontTitle));
            
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("", fontTitle));
            
            return table;
        }
        
        return new Table(1);
    }
    
    
    private static Table getListHeader(Vector header) throws BadElementException, DocumentException {
        int ctnInt[] = {5,20,15,15,30};
        Table table = new Table(header.size());
        
        try{
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(0), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(1), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(2), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(3), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(4), fontListHeader));
            
        }catch(Exception e){
            System.out.println("exc header"+e.toString());
        }
        
        return table;
    }
    
    private static Table getContent(Vector records, Vector tableHeader, Document document, PdfWriter writer, HttpServletRequest request) throws BadElementException, DocumentException {
        Table table = getListHeader(tableHeader);
        
        if (records != null && records.size() > 0) {
            try{
                for (int i = 0; i < records.size(); i++) {
                    Vector temp = (Vector)records.get(i);
                    MemberReg memberReg = (MemberReg)temp.get(0);
                    
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(String.valueOf(i+1), fontLsContent));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(cekNull(memberReg.getPersonName())+" "+cekNull(memberReg.getPersonLastname()), fontLsContent));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(cekNull(memberReg.getHomeTelp()), fontLsContent));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(cekNull(memberReg.getTelpMobile()), fontLsContent));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(cekNull(memberReg.getHomeAddr()), fontLsContent));
                    
                    if (!writer.fitsPage(table)) {
                        table.deleteLastRow();
                        i--;
                        table.deleteLastRow();
                        i--;
                        document.add(table);
                        document.newPage();
                        table = getListHeader(tableHeader);
                    }
                }
                
            }catch(Exception e){
                System.out.println("exc contenct"+e.toString());
            }
        }
        
        return table;
    }
    
    private static String cekNull(String val){
        if(val.equals("null"))
            val = "";
        return val;
    }
    
    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}
