package com.dimata.posbo.report.sale;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.qdep.form.FRMHandler;
import com.dimata.posbo.entity.masterdata.Unit;
import com.dimata.posbo.entity.masterdata.PstUnit;
import com.dimata.posbo.entity.masterdata.MemberReg;
import com.dimata.posbo.entity.masterdata.PstMemberReg;
import com.dimata.posbo.report.purchase.PurchaseOrderPrintPDF;
import com.dimata.posbo.session.sales.SessSaleCommision;
import com.dimata.common.entity.location.Location;
import com.dimata.common.entity.location.PstLocation;
import com.dimata.common.entity.custom.PstDataCustom;
import com.dimata.common.entity.custom.DataCustom;
import com.dimata.util.Formater;
import com.dimata.pos.entity.billing.BillMain;
import com.dimata.pos.entity.billing.PstBillMain;
import com.dimata.pos.entity.billing.PstBillDetail;
import com.dimata.pos.entity.billing.Billdetail;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServlet;
import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Vector;

/**
 * Created by IntelliJ IDEA.
 * User: gadnyana
 * Date: Nov 18, 2006
 * Time: 9:53:25 AM
 * To change this template use File | Settings | File Templates.
 */
public class InvoiceInternalPDF extends HttpServlet {

    public static final String textHeaderMain[][] =
            {
                {"INVOICE", "Nomor", "Lokasi", "Tanggal", "Supplier", "Nama", "Alamat","Telp","Contact","Keterangan"},
                {"INVOICE", "Number", "From Location", "Date", "Supplier", "Name","Address" ,"Phone","Contact","Description"}
            };

    public static final String textHeaderItem[][] =
            {
                {"No", "Kode", "Nama Barang", "Unit", "Qty", "Harga", "Sub Total"},
                {"No", "Code", "Description", "Unit", "Qty", "Price", "Sub Total"}
            };

    /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Destroys the servlet.
     */
    public void destroy() {

    }

    public static Vector vect = new Vector();
    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color bgColor = new Color(220, 220, 220);

    // setting some fonts in the color chosen by the user
    public static com.lowagie.text.Font fontTitle = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 13, com.lowagie.text.Font.BOLD, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontTitleUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 13, com.lowagie.text.Font.BOLD + com.lowagie.text.Font.UNDERLINE, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontMainHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.BOLD, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.ITALIC, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontHeaderUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.ITALIC + com.lowagie.text.Font.UNDERLINE, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontListHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.BOLD, PurchaseOrderPrintPDF.border);
    public static com.lowagie.text.Font fontLsContent = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 8);
    public static com.lowagie.text.Font fontLsContentUnderline = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 8,com.lowagie.text.Font.UNDERLINE, PurchaseOrderPrintPDF.border);

    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */

    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        Color bgColor = new Color(200, 200, 200);
        com.lowagie.text.Rectangle rectangle = new com.lowagie.text.Rectangle(20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4, 20, 20, 30, 30);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {
            //step2.2: creating an instance of the writer
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            // step 3.1: adding some metadata to the document
            document.addSubject("This is a subject.");
            document.addSubject("This is a subject two.");

            //HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
            HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", PurchaseOrderPrintPDF.fontLsContent)), false);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setBorder(HeaderFooter.NO_BORDER);
            //document.setHeader(header);
            document.setFooter(footer);

            document.open();

            /* get data from session */
            Vector list = new Vector();
            HttpSession sess = request.getSession(true);
            long oidBill = 0;
            int SESS_LANGUAGE = 0;
            String approot = "";
            try {
                SESS_LANGUAGE = FRMQueryString.requestInt(request, "sess_language");
                oidBill = FRMQueryString.requestLong(request, "hidden_bill_main_id");
                approot = FRMQueryString.requestString(request, "approot");
            } catch (Exception e) {
                System.out.println("Exc : " + e.toString());
            }

            BillMain billMain = new BillMain();
            Vector vctContent = new Vector();
            if (oidBill != 0) {
                try {
                    billMain = PstBillMain.fetchExc(oidBill);
                    String where = PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+"="+oidBill;
                    vctContent = PstBillDetail.list(0, 0, where,"");
                } catch (Exception e) {
                    System.out.println("err : " + e.toString());
                }

                String pathImage = "http://"+request.getServerName()+":"+request.getServerPort()+approot+ "/images/company.jpg";
                System.out.println("approot = "+pathImage);
                com.lowagie.text.Image gambar = null;
                try{
                    gambar = com.lowagie.text.Image.getInstance(pathImage);
                }catch(Exception ex){
                    System.out.println("gambar >>>>>> = "+gambar.getImageMask());
                }
                System.out.println("approot 00.1 = "+gambar);
                vect = new Vector();
                document.add(InvoiceInternalPDF.getHeaderImage(SESS_LANGUAGE,gambar));
                document.add(InvoiceInternalPDF.getHeader(SESS_LANGUAGE, billMain));
                vect.add("ACCOUNTING");
                 System.out.println("approot = "+gambar);
                document = InvoiceInternalPDF.getContent(vctContent, document, writer, SESS_LANGUAGE, billMain);
                document.add(InvoiceInternalPDF.getAccountInformation());
                document.add(InvoiceInternalPDF.getHeaderApprove(vect));
            }
        } catch (Exception e) {
            System.out.println("Exception e : " + e.toString());
        }

        // step 5: closing the document
        document.close();

        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }


    /* this method make table header */
    private static Table getHeaderImage(int SESS_LANGUAGE, com.lowagie.text.Image gambar) throws BadElementException, DocumentException {
        Table table = new Table(2);
        try {
            int ctnInt[] = {40, 60};
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);

            //  nama company, alamat,telp
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            //URL url = new URL("");

            gambar.setAlignment(com.lowagie.text.Image.MIDDLE);
            gambar.scalePercent(40);
            table.addCell(new Phrase(new Chunk(gambar,0,0)));
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderMain[SESS_LANGUAGE][0], InvoiceInternalPDF.fontTitleUnderline));

            table.addCell(new Phrase("", InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase("", InvoiceInternalPDF.fontTitle));

        } catch (Exception e) {
        }
        return table;
    }


    /* this method make table header */
    private static Table getHeader(int SESS_LANGUAGE, BillMain billMain) throws BadElementException, DocumentException {

        if (billMain.getOID() != 0) {

            int ctnInt[] = {10, 3, 39, 15, 3, 30};
            Table table = new Table(6);
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);

            //  nama company, alamat,telp
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderMain[SESS_LANGUAGE][1], InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(" :", InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(billMain.getInvoiceNumber(), InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase("For Customer", InvoiceInternalPDF.fontHeaderUnderline));
            table.addCell(new Phrase("", InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase("", InvoiceInternalPDF.fontHeader));

            // tanggal transaksi, lokasi tujuan
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderMain[SESS_LANGUAGE][3], InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(" :", InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(Formater.formatDate(billMain.getBillDate(), "dd-MM-yyyy"), InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderMain[SESS_LANGUAGE][5], InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(" :", InvoiceInternalPDF.fontHeader));
            Location locTujuan = new Location();
            MemberReg memberReg = new MemberReg();
            try {
                //locTujuan = PstLocation.fetchExc(billMain.getLocationId());
                memberReg = PstMemberReg.fetchExc(billMain.getCustomerId());
                locTujuan.setName(memberReg.getPersonName());
                locTujuan.setAddress(memberReg.getHomeAddr());
                locTujuan.setTelephone(memberReg.getTelpNr());
                locTujuan.setFax(memberReg.getFax());
                locTujuan.setPerson(memberReg.getPersonName());
            } catch (Exception e) {
            }
            table.addCell(new Phrase(locTujuan.getName(), InvoiceInternalPDF.fontHeader));

            // nama sto, alamat tujuan
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultColspan(3);
            Location loc = new Location();
            try {
                String where = PstLocation.fieldNames[PstLocation.FLD_TYPE]+"="+PstLocation.TYPE_LOCATION_WAREHOUSE;
                Vector vlist = PstLocation.list(0,0,where,"");
                if(vlist!=null && vlist.size()>0){
                    loc = (Location)vlist.get(0);
                }
            } catch (Exception e) {
            }
            table.addCell(new Phrase(loc.getName(), InvoiceInternalPDF.fontHeader));
            vect.add(loc.getName());

            table.setDefaultColspan(1);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderMain[SESS_LANGUAGE][6], InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(" :", InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(locTujuan.getAddress(), InvoiceInternalPDF.fontHeader));

            // Alamat, telp supplier
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultColspan(3);
            table.addCell(new Phrase(loc.getAddress(), InvoiceInternalPDF.fontHeader));

            table.setDefaultColspan(1);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderMain[SESS_LANGUAGE][7], InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(" :", InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(locTujuan.getTelephone()+"/Fax : "+locTujuan.getFax(), InvoiceInternalPDF.fontHeader));

            // Telp, Contact supplier
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultColspan(3);
            table.addCell(new Phrase(loc.getTelephone(), InvoiceInternalPDF.fontHeader));

            table.setDefaultColspan(1);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderMain[SESS_LANGUAGE][8], InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(" :", InvoiceInternalPDF.fontHeader));
            table.addCell(new Phrase(locTujuan.getPerson(), InvoiceInternalPDF.fontHeader));

            return table;
        }

        return new Table(1);
    }


    private static Table getListHeader(int SESS_LANGUAGE) throws BadElementException, DocumentException {
        //int ctnInt[] = {5, 15, 40, /*15,15,*/8,10,/*15,*/15/*,10*/};

        int ctnInt[] = {3, 11, 35, 5, 5, 10, 10};
        //Table table = new Table(10);
        Table table = new Table(7);
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(1);

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(InvoiceInternalPDF.bgColor);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderItem[SESS_LANGUAGE][0], InvoiceInternalPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(InvoiceInternalPDF.bgColor);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderItem[SESS_LANGUAGE][1], InvoiceInternalPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(InvoiceInternalPDF.bgColor);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderItem[SESS_LANGUAGE][2], InvoiceInternalPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(InvoiceInternalPDF.bgColor);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderItem[SESS_LANGUAGE][3], InvoiceInternalPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(InvoiceInternalPDF.bgColor);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderItem[SESS_LANGUAGE][4], InvoiceInternalPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(InvoiceInternalPDF.bgColor);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderItem[SESS_LANGUAGE][5], InvoiceInternalPDF.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(InvoiceInternalPDF.bgColor);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderItem[SESS_LANGUAGE][6], InvoiceInternalPDF.fontListHeader));

        } catch (Exception e) {
            System.out.println("exc header" + e.toString());
        }

        return table;
    }

    private static Document getContent(Vector vct, Document document, PdfWriter writer, int SESS_LANGUAGE, BillMain billMain) throws BadElementException, DocumentException {
        Table table = InvoiceInternalPDF.getListHeader(SESS_LANGUAGE);
        if (vct != null && vct.size() > 0) {
            try {
                double total = 0;
                double totalQty = 0;
                for (int i = 0; i < vct.size(); i++) {
                    Billdetail  billDetail = (Billdetail)vct.get(i);
                    total += (billDetail.getItemPrice() * billDetail.getQty());

                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(String.valueOf(i + 1), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(billDetail.getSku(), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(billDetail.getItemName(), InvoiceInternalPDF.fontLsContent));

                    Unit unit = new Unit();
                    try{
                        unit = PstUnit.fetchExc(billDetail.getUnitId());
                    }catch(Exception e){}
                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(unit.getCode(), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(String.valueOf(billDetail.getQty()), InvoiceInternalPDF.fontLsContent));
                    totalQty += billDetail.getQty();

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(billDetail.getItemPrice()), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(billDetail.getItemPrice() * billDetail.getQty()), InvoiceInternalPDF.fontLsContent));

                    /*if (!writer.fitsPage(table)) {
                        table.deleteLastRow();
                        i--;
                        table.deleteLastRow();
                        i--;
                        document.add(table);
                        document.newPage();
                        table = getListHeader(SESS_LANGUAGE);
                    }*/
                }

                // total real
                table.setDefaultCellBackgroundColor(Color.WHITE);
                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.setDefaultColspan(4);
                table.addCell(new Phrase("Rec. Retail", InvoiceInternalPDF.fontListHeader));

                table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.setDefaultColspan(1);
                table.addCell(new Phrase(""+totalQty, InvoiceInternalPDF.fontLsContent));

                table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase("", InvoiceInternalPDF.fontLsContent));

                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(total), InvoiceInternalPDF.fontLsContent));

                Vector vOtherComm = SessSaleCommision.getDataCommision(billMain.getOID());
                DataCustom dataCustomOther = PstDataCustom.getDataCustom(billMain.getOID(),SessSaleCommision.strNameCommision[SessSaleCommision.COST_OTHER]);
                DataCustom dataCustomCargo = PstDataCustom.getDataCustom(billMain.getOID(),SessSaleCommision.strNameCommision[SessSaleCommision.COST_CARGO]);
                DataCustom dataCustomSupp = PstDataCustom.getDataCustom(billMain.getOID(),SessSaleCommision.strNameCommision[SessSaleCommision.COST_SUPPLIER]);
                DataCustom dataCustomPpn = PstDataCustom.getDataCustom(billMain.getOID(),SessSaleCommision.strNameCommision[SessSaleCommision.COST_PPN]);

                DataCustom dataCustomDiscOutlet = PstDataCustom.getDataCustom(billMain.getOID(),SessSaleCommision.strNameCommision[SessSaleCommision.DISC_OUTLET]);
                DataCustom dataCustomCommOutlet = PstDataCustom.getDataCustom(billMain.getOID(),SessSaleCommision.strNameCommision[SessSaleCommision.COMM_OUTLET]);
                DataCustom dataCustomSavingPc = PstDataCustom.getDataCustom(billMain.getOID(),SessSaleCommision.strNameCommision[SessSaleCommision.SAVING_PC]);


                double total1 = (total * Double.parseDouble(dataCustomOther.getDataValue()))/100;
                total1 = total1 + (total * Double.parseDouble(dataCustomCargo.getDataValue()))/100;
                total1 = total1 + (total * Double.parseDouble(dataCustomSupp.getDataValue()))/100;
                double profit = (total * Double.parseDouble(dataCustomPpn.getDataValue()))/100;
                if(vOtherComm!=null && vOtherComm.size()>0){
                    //total = total - billMain.getDiscount();
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(4);
                    table.addCell(new Phrase("Commision Outlet", InvoiceInternalPDF.fontListHeader));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(1);
                    table.addCell(new Phrase("", InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal((Double.parseDouble(dataCustomCommOutlet.getDataValue())/total)*100), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(Double.parseDouble(dataCustomCommOutlet.getDataValue())), InvoiceInternalPDF.fontLsContent));

                    // discount spg
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(4);
                    table.addCell(new Phrase("Discount SPG", InvoiceInternalPDF.fontListHeader));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(1);
                    table.addCell(new Phrase("", InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal((Double.parseDouble(dataCustomDiscOutlet.getDataValue())/total)*100), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(Double.parseDouble(dataCustomDiscOutlet.getDataValue())), InvoiceInternalPDF.fontLsContent));

                    double costcomm = Double.parseDouble(dataCustomCommOutlet.getDataValue());
                    double costspg = Double.parseDouble(dataCustomDiscOutlet.getDataValue());
                    double netComm = costcomm - costspg;

                    // Net Commision Outlet
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(4);
                    table.addCell(new Phrase("Net Commision Outlet", InvoiceInternalPDF.fontListHeader));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(1);
                    table.addCell(new Phrase("", InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal((netComm/total)*100), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(netComm), InvoiceInternalPDF.fontLsContent));

                    // cost supplier
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(4);
                    table.addCell(new Phrase("Net Supplier", InvoiceInternalPDF.fontListHeader));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(1);
                    table.addCell(new Phrase("", InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal((Double.parseDouble(dataCustomSupp.getDataValue())/total)*100), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(Double.parseDouble(dataCustomSupp.getDataValue())), InvoiceInternalPDF.fontLsContent));

                    // cost cargo
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(4);
                    table.addCell(new Phrase("Cost Cargo", InvoiceInternalPDF.fontListHeader));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(1);
                    table.addCell(new Phrase("", InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal((Double.parseDouble(dataCustomCargo.getDataValue())/total)*100), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(Double.parseDouble(dataCustomCargo.getDataValue())), InvoiceInternalPDF.fontLsContent));

                    // cost ppn
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(4);
                    table.addCell(new Phrase("PPN", InvoiceInternalPDF.fontListHeader));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(1);
                    table.addCell(new Phrase("", InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal((Double.parseDouble(dataCustomPpn.getDataValue())/(total-costcomm))*100), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(Double.parseDouble(dataCustomPpn.getDataValue())), InvoiceInternalPDF.fontLsContent));

                    //
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(4);
                    table.addCell(new Phrase("Profit Merchandise", InvoiceInternalPDF.fontListHeader));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(1);
                    table.addCell(new Phrase("", InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal((Double.parseDouble(dataCustomOther.getDataValue())/total)*100), InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(Double.parseDouble(dataCustomOther.getDataValue())), InvoiceInternalPDF.fontLsContent));

                    // saving PC
                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(4);
                    table.addCell(new Phrase("Saving PC", InvoiceInternalPDF.fontListHeader));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.setDefaultColspan(1);
                    table.addCell(new Phrase("", InvoiceInternalPDF.fontLsContent));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(Double.parseDouble(dataCustomSavingPc.getDataValue())), InvoiceInternalPDF.fontLsContent));

                    double totp_pc = (Double.parseDouble(dataCustomOther.getDataValue()) * Double.parseDouble(dataCustomSavingPc.getDataValue())) / 100;
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(totp_pc), InvoiceInternalPDF.fontLsContent));
                }

                document.add(table);
                document.add(InvoiceInternalPDF.getHeaderLast(SESS_LANGUAGE, billMain, totalQty, total));
            } catch (Exception e) {
                System.out.println("exc contenct" + e.toString());
            }
        }

        return document;
    }


    private static Table getHeaderLast(int SESS_LANGUAGE, BillMain billMain, double totalQty, double total) throws BadElementException, DocumentException {
        int ctnInt[] = {10, 1, 60, 10, 1, 15};
        //Table table = new Table(10);
        Table table = new Table(6);
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(0);
            table.setCellspacing(0);

            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            //table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase(InvoiceInternalPDF.textHeaderMain[SESS_LANGUAGE][9], InvoiceInternalPDF.fontLsContentUnderline));

            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            //table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase(":", InvoiceInternalPDF.fontLsContent));

            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            table.setDefaultColspan(4);
            table.addCell(new Phrase("", InvoiceInternalPDF.fontLsContent));

        } catch (Exception e) {
            System.out.println("exc header" + e.toString());
        }
        return table;
    }

    private static Table getHeaderApprove(Vector vect) throws BadElementException, DocumentException {
        Table table = new Table(vect.size());
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(1);
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            for (int k = 0; k < vect.size(); k++) {
                table.addCell("");
            }
            for (int k = 0; k < vect.size(); k++) {
                table.addCell(new Phrase(String.valueOf(vect.get(k)), InvoiceInternalPDF.fontLsContent));
            }
            for (int k = 0; k < vect.size(); k++) {
                table.addCell("");
                table.addCell("");
            }
            for (int k = 0; k < vect.size(); k++) {
                table.addCell(new Phrase(String.valueOf("(....................................)"), InvoiceInternalPDF.fontLsContent));
            }
        } catch (Exception e) {
            System.out.println("exc header" + e.toString());
        }
        return table;
    }

    /**
     * gadnyana
     * @return
     * @throws BadElementException
     * @throws DocumentException
     */
    private static Table getAccountInformation() throws BadElementException, DocumentException {
        Table table = new Table(1);
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setAlignment(Table.ALIGN_LEFT);
            table.setWidth(60);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(1);

            String shipping = "";
            try {
                shipping = (String)com.dimata.system.entity.PstSystemProperty.getValueByName("REKENING_ACCOUNT_NUMBER");
            } catch (Exception e) {
                shipping = " ";
            }

            String strShipping = shipping.replaceAll(";", "\n");

            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_TOP);
            table.addCell(new Phrase(String.valueOf(strShipping), InvoiceInternalPDF.fontLsContent));

        } catch (Exception e) {
            System.out.println("exc header" + e.toString());
        }
        return table;
    }

    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}
