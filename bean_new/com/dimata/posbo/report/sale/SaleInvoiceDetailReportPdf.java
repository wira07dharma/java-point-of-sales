/**
 * User: gwawan
 * Date: Apr 24, 2007
 * Time: 9:31:23 AM
 * To change this template use Options | File Templates.
 */
package com.dimata.posbo.report.sale;

import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.*;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfWriter;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.ServletException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletOutputStream;
import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.util.Vector;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.qdep.form.FRMHandler;
import com.dimata.pos.entity.billing.Billdetail;
import com.dimata.pos.entity.billing.PstBillDetail;
import com.dimata.pos.session.billing.SessBilling;
import com.dimata.posbo.entity.masterdata.Unit;

public class SaleInvoiceDetailReportPdf extends HttpServlet {
    /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }
    
    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color bgColor = new Color(220, 220, 220);
    
    // setting some fonts in the color chosen by the user
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 13, Font.BOLD, border);
    public static Font fontMainHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.BOLD, border);
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.ITALIC, border);
    public static Font fontListHeader = new Font(Font.TIMES_NEW_ROMAN, 9, Font.BOLD, border);
    public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 9);
    
    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        
        Color bgColor = new Color(200, 200, 200);
        Rectangle rectangle = new Rectangle(20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4.rotate(), 20, 20, 10, 0);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        HttpSession session = request.getSession(true);
        Vector pdfContent = new Vector(1,1);
        
        try {
            //step 1: creating an instance of the writer
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            // step 2: adding some metadata to the document
            document.addSubject("This is a subject.");
            document.addSubject("This is a subject two.");
            
            HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", fontLsContent)), false);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setBorder(HeaderFooter.NO_BORDER);
            document.setFooter(footer);
            
            document.open();
            
            /* step 3: get data from session */
            try {
                pdfContent = (Vector)session.getValue("SESS_SALE_INVOICE_DETAIL_PDF");
            }
            catch(Exception e) {
                System.out.println("Error when get session \n"+e.toString());
            }
            
            if ((pdfContent != null) && (pdfContent.size() > 0)) {
                /*document.add(getHeader((Vector)pdfContent.get(0)));
                document.add(getContent((Vector)pdfContent.get(1), document, writer));*/
                document.add(getContent(pdfContent, document, writer));
            }
            
        } catch (Exception e) {
            System.out.println("Exception Main : " + e.toString());
        }
        
        // step 4: closing the document
        document.close();
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }
    
    /* this method make table header */
    private static Table getHeader(Vector vct) throws BadElementException, DocumentException {
        if (vct != null && vct.size() > 0) {
            int ctnInt[] = {100};
            Table table = new Table(1);
            String compName = (String)vct.get(0);
            String compAddr = (String)vct.get(1);
            String compTelpFax = (String)vct.get(2);
            String reportTitle = (String)vct.get(3);
            
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            //  nama, alamat, telp company
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(compName, fontHeader));
            table.addCell(new Phrase(compAddr, fontHeader));
            table.addCell(new Phrase(compTelpFax, fontHeader));
            
            // judul laporan
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(reportTitle.toUpperCase(), fontTitle));
            
            // lokasi, tanggal, tipe penjualan
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("", fontTitle));
            table.addCell(new Phrase((String)vct.get(4), fontMainHeader));
            table.addCell(new Phrase((String)vct.get(5), fontMainHeader));
            table.addCell(new Phrase((String)vct.get(6), fontMainHeader));
            table.addCell(new Phrase((String)vct.get(7), fontMainHeader));
            
            return table;
        }
        
        return new Table(1);
    }
    
    
    private static Table getListHeader(Vector header) throws BadElementException, DocumentException {
        //int ctnInt[] = {3, 7, 6, 8, 7, 7, 6, 6, 6, 3, 8, 9, 7, 7, 9};
        int ctnInt[] = {3, 7, 6, 8, 7, 7, 6, 6, 6, 3, 8, 9, 7, 7, 7, 9};
        //Table table = new Table(15);
        Table table = new Table(16);
        try{
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            table.setDefaultRowspan(2);

            
            // No
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(0), fontListHeader));
            
            // Nomor Invoice
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(1),fontListHeader));
            
            // Tanggal
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(2), fontListHeader));
            
            // Kasir
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(3), fontListHeader));
            
            // Keterangan
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(4), fontListHeader));
            
            table.setDefaultRowspan(1);
            table.setDefaultColspan(6);
            // Detail Item
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(5), fontListHeader));
            
            table.setDefaultRowspan(2);
            table.setDefaultColspan(1);
            
            // Amount Bruto
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(6), fontListHeader));
            
            // Diskon
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(7), fontListHeader));
            
            // Pajak
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(8), fontListHeader));

            // service
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(9), fontListHeader));
            
            // Amount Netto
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(10), fontListHeader));
            
            table.setDefaultRowspan(1);
            table.setDefaultColspan(1);
            /** Kode Item */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(11), fontListHeader));
            
            /** Harga */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(12), fontListHeader));
            
            /** Diskon */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(13), fontListHeader));
            
            /** Unit */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(14), fontListHeader));
            
            /** Qty */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(15), fontListHeader));
            
            /** Total */
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            table.addCell(new Phrase((String)header.get(16), fontListHeader));
            
        }catch(Exception e){
            System.out.println("Exception getListHeader "+e.toString());
        }
        
        return table;
    }
    
    private static Table getFooter(Vector footer, Table table) {
        try {
            /** Sub Total */
            table.setDefaultColspan(11);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("Sub Total", fontListHeader));
            
            table.setDefaultColspan(1);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(0), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(1), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(2), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(3), fontListHeader));

            //add service
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String)footer.get(4), fontListHeader));
            
            /** Grand Total */
            table.setDefaultColspan(11);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("Grand Total", fontListHeader));
            
            table.setDefaultColspan(1);
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            //table.addCell(new Phrase((String)footer.get(4), fontListHeader));
            table.addCell(new Phrase((String)footer.get(5), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            //table.addCell(new Phrase((String)footer.get(5), fontListHeader));
            table.addCell(new Phrase((String)footer.get(6), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            //table.addCell(new Phrase((String)footer.get(6), fontListHeader));
            table.addCell(new Phrase((String)footer.get(7), fontListHeader));
            
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            //table.addCell(new Phrase((String)footer.get(7), fontListHeader));
            table.addCell(new Phrase((String)footer.get(8), fontListHeader));

            //add service
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            //table.addCell(new Phrase((String)footer.get(8), fontListHeader));
            table.addCell(new Phrase((String)footer.get(9), fontListHeader));
        }
        catch(Exception e) {
            System.out.println("Exception getFooter "+e.toString());
        }
        return table;
    }
    
    private static Table getContent(Vector vct, Document document, PdfWriter writer) throws BadElementException, DocumentException {
        document.add(getHeader((Vector)vct.get(0)));
        
        Vector vctContent = (Vector)vct.get(1);
        Vector header = (Vector)vctContent.get(0);
        Vector content = (Vector)vctContent.get(1);
        Vector footer = (Vector)vctContent.get(2);
        
        /** buat header untuk table */
        Table table = getListHeader(header);
        
        /** variabel bantu */
        long oidInvoice = 0;
        double amountBruto = 0;
        double diskon = 0;
        double pajak = 0;
        double amountNetto = 0;
        double subAmountBruto = 0;
        double subDiskon = 0;
        double subPajak = 0;
        double subAmountNetto = 0;
        double rate = 0;
        long currencyId = 0;
        String whereClause = "";
        int nomor = 1;
        int counter = 1;
        boolean newPage = false;
        //add service
        double service = 0;
        double subService = 0;
        
        if (content != null && content.size() > 0) {
            try {
                for (int i = 0; i < content.size(); i++) {
                    Vector list = (Vector)content.get(i);
                    
                    oidInvoice = Long.parseLong((String)list.get(0));
                    amountBruto = Double.parseDouble((String)list.get(5));
                    diskon = Double.parseDouble((String)list.get(6));
                    pajak = Double.parseDouble((String)list.get(7));
                    //add service
                    service = Double.parseDouble((String)list.get(8));
                    amountNetto = Double.parseDouble((String)list.get(9));
                    rate = Double.parseDouble((String)list.get(10));
                    currencyId = Long.parseLong((String)list.get(11));
                    //amountNetto = Double.parseDouble((String)list.get(8));
                    //rate = Double.parseDouble((String)list.get(9));
                    //currencyId = Long.parseLong((String)list.get(10));
                    
                    subAmountBruto += amountBruto;
                    subDiskon += diskon;
                    subPajak += pajak;
                    subAmountNetto += amountNetto;
                    //adding subService
                    subService += service;
                    
                    whereClause = PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+"="+oidInvoice;
                    Vector listItem = SessBilling.listInvoiceDetail(0, 0, whereClause, "");
                    for(int j=0; j<listItem.size(); j++) {
                        Vector temp = (Vector)listItem.get(j);
                        Billdetail billDetail = (Billdetail)temp.get(0);
                        Unit unit = (Unit)temp.get(1);
                            
                        table.setDefaultCellBackgroundColor(Color.WHITE);
                        if(j==0) {
                            table.setDefaultColspan(1);
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase(String.valueOf(nomor), fontLsContent));
                            
                            // No Invoice
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase((String)list.get(1), fontLsContent));
                            
                            // Tanggal
                            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase((String)list.get(2), fontLsContent));
                            
                            // Kasir
                            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase((String)list.get(3), fontLsContent));

                            // Remark
                            String remark = (String)list.get(4);
                            remark = remark.replaceAll("\r\n", "");
                            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase(remark, fontLsContent));
                        }
                        else {
                            table.setDefaultColspan(5);
                            table.addCell(new Phrase("", fontLsContent));
                        }
                        
                        table.setDefaultColspan(1);
                        // Kode
                        table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(billDetail.getSku(), fontLsContent));
                        
                        // Harga
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        if(currencyId != 0) {
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(billDetail.getItemPrice()), fontLsContent));
                        }
                        else {
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(billDetail.getItemPrice() * rate), fontLsContent));
                        }
                        
                        // Diskon
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        if(currencyId != 0) {
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(billDetail.getDisc()), fontLsContent));
                        }
                        else {
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(billDetail.getDisc() * rate), fontLsContent));
                        }
                        
                        // Qty
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(billDetail.getQty()), fontLsContent));
                        
                        // Unit
                        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(unit.getCode(), fontLsContent));
                        
                        // Total
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        if(currencyId != 0) {
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(billDetail.getTotalPrice()), fontLsContent));
                        }
                        else {
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(billDetail.getTotalPrice() * rate), fontLsContent));
                        }
                        
                        if(j==0) {
                            table.setDefaultColspan(1);
                            // Amount Bruto
                            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(amountBruto), fontLsContent));
                            
                            // Diskon
                            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(diskon), fontLsContent));
                            
                            // Pajak
                            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(pajak), fontLsContent));

                            // Service
                            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(service), fontLsContent));
                            
                            // Amount Netto
                            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(amountNetto), fontLsContent));
                        }
                        else {
                            //table.setDefaultColspan(4);
                            table.setDefaultColspan(5);
                            table.addCell(new Phrase("", fontLsContent));
                        }
                        
                        /** buat baris kosong */
                        //table.setDefaultColspan(15);
                        table.setDefaultColspan(16);
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                        
                        if (!writer.fitsPage(table)) {
                            /*table.deleteLastRow();
                            i--; nomor--;
                            table.deleteLastRow();
                            i--;nomor--;
                            table.deleteLastRow();
                            i--; nomor--;*/
                            
                            /** hapus baris kosong */
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            //table.deleteLastRow();
                            
                            Vector tempFooter = new Vector();
                            /** Sub Total*/
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subAmountBruto));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subDiskon));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subPajak));
                            //add service
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subService));
                            tempFooter.add(FRMHandler.userFormatStringDecimal(subAmountNetto));
                            
                            /** Grand Total */
                            tempFooter.add((String)footer.get(0));
                            tempFooter.add((String)footer.get(1));
                            tempFooter.add((String)footer.get(2));
                            tempFooter.add((String)footer.get(3));
                            //add service
                            tempFooter.add((String)footer.get(4));
                            
                            document.add(getFooter(tempFooter, table));
                            
                            /** set variabel sub = 0 untuk next page */
                            subAmountBruto = 0;
                            subDiskon = 0;
                            subPajak = 0;
                            subService = 0;
                            subAmountNetto = 0;
                            
                            document.newPage();
                            document.add(getHeader((Vector)vct.get(0)));
                            table = getListHeader(header);
                            newPage = true;
                        }
                        else {
                            /** hapus baris kosong */
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            table.deleteLastRow();
                            
                            newPage = false;
                        }
                        counter++;
                    }
                    nomor++;
                }
                
                if(newPage == false) {
                    /** Sub Total */
                    table.setDefaultColspan(11);
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase("Sub Total", fontListHeader));
                    
                    table.setDefaultColspan(1);
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(subAmountBruto), fontListHeader));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(subDiskon), fontListHeader));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(subPajak), fontListHeader));

                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(subService), fontListHeader));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(subAmountNetto), fontListHeader));
                    
                    /** Grand Total */
                    table.setDefaultColspan(11);
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase("Grand Total", fontListHeader));
                    
                    table.setDefaultColspan(1);
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String)footer.get(0), fontListHeader));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String)footer.get(1), fontListHeader));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String)footer.get(2), fontListHeader));
                    
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String)footer.get(3), fontListHeader));

                    //add service
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String)footer.get(4), fontListHeader));
                }
                
            }catch(Exception e){
                System.out.println("Exception getContent "+e.toString());
            }
        }
        
        return table;
    }
    
    private static String cekNull(String val){
        if(val.equals("null"))
            val = "";
        return val;
    }
    
    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}
