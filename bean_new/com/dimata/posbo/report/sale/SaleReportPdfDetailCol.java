package com.dimata.posbo.report.sale;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.pdf.PdfPTable;
import com.dimata.qdep.form.FRMQueryString;
import com.dimata.posbo.entity.search.SrcSaleReport;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import java.awt.*;
import java.awt.Font;
import java.awt.Rectangle;
import java.io.ByteArrayOutputStream;
import java.util.Vector;

public class SaleReportPdfDetailCol extends HttpServlet {
/* Generated by Together */

    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /**
     * Destroys the servlet.
     */
    public void destroy() {

    }

    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color bgColor = new Color(220, 220, 220);

    // setting some fonts in the color chosen by the user
    public static com.lowagie.text.Font fontTitle = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 13, com.lowagie.text.Font.BOLD, SaleReportPdfDetailCol.border);
    public static com.lowagie.text.Font fontMainHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.BOLD, SaleReportPdfDetailCol.border);
    public static com.lowagie.text.Font fontHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 10, com.lowagie.text.Font.ITALIC, SaleReportPdfDetailCol.border);
    public static com.lowagie.text.Font fontListHeader = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 8, com.lowagie.text.Font.BOLD, SaleReportPdfDetailCol.border);
    public static com.lowagie.text.Font fontLsContent = new com.lowagie.text.Font(com.lowagie.text.Font.TIMES_NEW_ROMAN, 8);

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     *
     * @param request  servlet request
     * @param response servlet response
     */

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, java.io.IOException {

        Color bgColor = new Color(200, 200, 200);
        com.lowagie.text.Rectangle rectangle = new com.lowagie.text.Rectangle(20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4.rotate(), 20, 20, 30, 30);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {
            //step2.2: creating an instance of the writer
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            // step 3.1: adding some metadata to the document
            document.addSubject("This is a subject.");
            document.addSubject("This is a subject two.");

            //HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
            HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", SaleReportPdfDetailCol.fontLsContent)), false);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setBorder(HeaderFooter.NO_BORDER);
            //document.setHeader(header);
            document.setFooter(footer);

            document.open();

            /* get data from session */
            Vector list = new Vector();
            HttpSession sess = request.getSession(true);
            SrcSaleReport srcSaleReport = new SrcSaleReport();
            try {
                list = (Vector) sess.getValue(SaleReportDocument.SALE_REPORT_DOC_DETAIL_PDF);
                srcSaleReport = (SrcSaleReport) sess.getValue(SaleReportDocument.SALE_REPORT_DOC_DETAIL);
            } catch (Exception e) {
                System.out.println("Exc : " + e.toString());
                list = new Vector();
            }

            Vector header = new Vector(1, 1);
            Vector vctContent = new Vector(1, 1);
            if ((list != null) && (list.size() > 0)) {
                header = (Vector) list.get(0);
                vctContent = (Vector) list.get(1);
                document.add(SaleReportPdfDetailCol.getHeader(header));
                System.out.println("=>>> data proses tahap 1");
                //System.out.println("header printed");
                document.add(SaleReportPdfDetailCol.getContent(vctContent, document, writer, request, srcSaleReport));
                System.out.println("=>>> data proses tahap 1");
                //System.out.println("content printed");
            }

        } catch (Exception e) {
            System.out.println("Exception sdfzxczxczxc e : " + e.toString());
        }

        // step 5: closing the document
        document.close();

        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }


    /* this method make table header */
    private static Table getHeader(Vector vct) throws BadElementException, DocumentException {

        if (vct != null && vct.size() > 0) {

            int ctnInt[] = {100};
            Table table = new Table(1);
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);

            //  nama company, alamat,telp
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String) vct.get(0), SaleReportPdfDetailCol.fontHeader));
            table.addCell(new Phrase((String) vct.get(1), SaleReportPdfDetailCol.fontHeader));
            table.addCell(new Phrase((String) vct.get(2), SaleReportPdfDetailCol.fontHeader));

            // header, judul report, tanggal
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String) vct.get(3), SaleReportPdfDetailCol.fontTitle));
            table.addCell(new Phrase((String) vct.get(4), SaleReportPdfDetailCol.fontMainHeader));

            // group
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase((String) vct.get(5), SaleReportPdfDetailCol.fontMainHeader));
            table.addCell(new Phrase((String) vct.get(6), SaleReportPdfDetailCol.fontMainHeader));

            //table.addCell(new Phrase("TYPE  : "+(String)vct.get(7), fontMainHeader));

            return table;
        }

        return new Table(1);
    }


    private static Table getListHeader(Vector header, SrcSaleReport srcSaleReport, int viewImage) throws BadElementException, DocumentException {
        int plusarr = 0;
        if (viewImage == 1)
            plusarr = 1;

        int ctnInt[] = new int[header.size()];
        Table table = new Table(header.size());
        ctnInt[0] = 3;
        if (viewImage == 1)
            ctnInt[1] = 10;

        ctnInt[plusarr + 1] = 10;
        ctnInt[2 + plusarr] = 15;
        ctnInt[3 + plusarr] = 10;
        if (srcSaleReport.getViewColoumChange().size() > 0) {
            for (int k = 0; k < srcSaleReport.getViewColoumChange().size(); k++) {
                ctnInt[4 + plusarr + k] = 10;
            }
        }
        try {
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            System.out.println("viewImage : " + viewImage);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(0);

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
            table.addCell(new Phrase((String) header.get(0), SaleReportPdfDetailCol.fontListHeader));

            int x = 0;

            if (viewImage == 1) {
                table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
                table.addCell(new Phrase((String) header.get(1), SaleReportPdfDetailCol.fontListHeader));
                x = 1;
            } else {
                x = 0;
            }

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
            table.addCell(new Phrase((String) header.get(x + 1), SaleReportPdfDetailCol.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
            table.addCell(new Phrase((String) header.get(x + 2), SaleReportPdfDetailCol.fontListHeader));

            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
            table.addCell(new Phrase((String) header.get(x + 3), SaleReportPdfDetailCol.fontListHeader));

            if (srcSaleReport.getViewColoumChange().size() > 0) {
                for (int k = 0; k < srcSaleReport.getViewColoumChange().size(); k++) {
                    int coloum = Integer.parseInt((String) srcSaleReport.getViewColoumChange().get(k));
                    switch (coloum) {
                        case SrcSaleReport.SHOW_FIELD_CATEGORY:
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
                            table.addCell(new Phrase((String) header.get(x + (k + 4)), SaleReportPdfDetailCol.fontListHeader));
                            break;
                        case SrcSaleReport.SHOW_FIELD_MERK:
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
                            table.addCell(new Phrase((String) header.get(x + (k + 4)), SaleReportPdfDetailCol.fontListHeader));
                            break;
                        case SrcSaleReport.SHOW_FIELD_SELL_PRICE:
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
                            table.addCell(new Phrase((String) header.get(x + (k + 4)), SaleReportPdfDetailCol.fontListHeader));
                            break;
                        case SrcSaleReport.SHOW_FIELD_TOTAL_SALE:
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
                            table.addCell(new Phrase((String) header.get(x + (k + 4)), SaleReportPdfDetailCol.fontListHeader));
                            break;
                        case SrcSaleReport.SHOW_FIELD_SUPPLIER:
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
                            table.addCell(new Phrase((String) header.get(x + (k + 4)), SaleReportPdfDetailCol.fontListHeader));
                            break;
                        case SrcSaleReport.SHOW_FIELD_BUYING_PRICE:
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
                            table.addCell(new Phrase((String) header.get(x + (k + 4)), SaleReportPdfDetailCol.fontListHeader));
                            break;
                        case SrcSaleReport.SHOW_FIELD_SALES_NAME:
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
                            table.addCell(new Phrase((String) header.get(x + (k + 4)), SaleReportPdfDetailCol.fontListHeader));
                            break;
                        case SrcSaleReport.SHOW_FIELD_LOCATION:
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
                            table.addCell(new Phrase((String) header.get(x + (k + 4)), SaleReportPdfDetailCol.fontListHeader));
                            break;
                        case SrcSaleReport.SHOW_FIELD_SHIFT:
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.setDefaultCellBackgroundColor(SaleReportPdfDetailCol.bgColor);
                            table.addCell(new Phrase((String) header.get(x + (k + 4)), SaleReportPdfDetailCol.fontListHeader));
                            break;
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("exc header" + e.toString());
        }

        return table;
    }

    private static Table getContent(Vector vct, Document document, PdfWriter writer, HttpServletRequest request, SrcSaleReport srcSaleReport) throws BadElementException, DocumentException {
        Vector header = (Vector) vct.get(0);
        Vector body = (Vector) vct.get(1);
        Vector footer = (Vector) vct.get(2);
        String approot = "";
        int SESS_LANGUAGE = 0;
        int viewPhoto = 0;
        try {
            approot = FRMQueryString.requestString(request, "approot");
            viewPhoto = FRMQueryString.requestInt(request, "view_photo");
        } catch (Exception e) {
            System.out.println("Exc : " + e.toString());
        }
        Table table = SaleReportPdfDetailCol.getListHeader(header, srcSaleReport, viewPhoto);
        if (body != null && body.size() > 0) {
            try {
                for (int i = 0; i < body.size(); i++) {
                    Vector vctfrs = (Vector) body.get(i);

                    table.setDefaultCellBackgroundColor(Color.WHITE);
                    table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String) vctfrs.get(0), SaleReportPdfDetailCol.fontLsContent));

                    int x = 0;
                    if (viewPhoto == 1) {
                        String pathImage = "http://" + request.getServerName() + ":" + request.getServerPort() + approot + "/imgcache/" + vctfrs.get(1) + ".jpg";
                        System.out.println("approot = " + pathImage);
                        com.lowagie.text.Image gambar = null;
                        try {
                            gambar = com.lowagie.text.Image.getInstance(pathImage);

                        } catch (Exception ex) {
                            System.out.println("gambar >>>>>> = " + ex.toString());
                        }
                        boolean bool = false;
                        try {
                            gambar.setAlignment(com.lowagie.text.Image.MIDDLE);
                            gambar.scalePercent(40);
                            table.addCell(new Phrase(new Chunk(gambar, 0, 0)));
                        } catch (Exception e) {
                            bool =true;
                            System.out.println("gambar 2>>>>>> = " + e.toString());
                        }
                        if(bool){
                            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                            table.addCell(new Phrase(" ", SaleReportPdfDetailCol.fontLsContent));
                        }
                    }

                    table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String) vctfrs.get(1), SaleReportPdfDetailCol.fontLsContent));
                    table.addCell(new Phrase((String) vctfrs.get(2), SaleReportPdfDetailCol.fontLsContent));
                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                    table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                    table.addCell(new Phrase((String) vctfrs.get(3), SaleReportPdfDetailCol.fontLsContent));

                    if (srcSaleReport.getViewColoumChange().size() > 0) {
                        for (int k = 0; k < srcSaleReport.getViewColoumChange().size(); k++) {
                            int coloum = Integer.parseInt((String) srcSaleReport.getViewColoumChange().get(k));
                            switch (coloum) {
                                case SrcSaleReport.SHOW_FIELD_CATEGORY:
                                    table.addCell(new Phrase((String) vctfrs.get(k+4), SaleReportPdfDetailCol.fontLsContent));
                                    break;
                                case SrcSaleReport.SHOW_FIELD_MERK:
                                    table.addCell(new Phrase((String) vctfrs.get(k+4), SaleReportPdfDetailCol.fontLsContent));
                                    break;
                                case SrcSaleReport.SHOW_FIELD_SELL_PRICE:
                                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                    table.addCell(new Phrase((String) vctfrs.get(k+4), SaleReportPdfDetailCol.fontLsContent));
                                    break;
                                case SrcSaleReport.SHOW_FIELD_TOTAL_SALE:
                                    table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                    table.addCell(new Phrase((String) vctfrs.get(k+4), SaleReportPdfDetailCol.fontLsContent));
                                    break;
                                case SrcSaleReport.SHOW_FIELD_SUPPLIER:
                                    table.addCell(new Phrase((String) vctfrs.get(k+4), SaleReportPdfDetailCol.fontLsContent));
                                    break;
                                case SrcSaleReport.SHOW_FIELD_BUYING_PRICE:
                                    table.addCell(new Phrase((String) vctfrs.get(k+4), SaleReportPdfDetailCol.fontLsContent));
                                    break;
                                case SrcSaleReport.SHOW_FIELD_SALES_NAME:
                                    table.addCell(new Phrase((String) vctfrs.get(k+4), SaleReportPdfDetailCol.fontLsContent));
                                    break;
                                case SrcSaleReport.SHOW_FIELD_LOCATION:
                                    table.addCell(new Phrase((String) vctfrs.get(k+4), SaleReportPdfDetailCol.fontLsContent));
                                    break;
                                case SrcSaleReport.SHOW_FIELD_SHIFT:
                                    table.addCell(new Phrase((String) vctfrs.get(k+4), SaleReportPdfDetailCol.fontLsContent));
                                    break;
                            }
                        }
                    }

                    if (!writer.fitsPage(table)) {
                        table.deleteLastRow();
                        i--;
                        table.deleteLastRow();
                        i--;
                        document.add(table);
                        document.newPage();
                        table = SaleReportPdfDetailCol.getListHeader(header, srcSaleReport, viewPhoto);
                    }
                }
                int x = 0;
                if (viewPhoto == 1) {
                    table.setDefaultColspan(4);
                } else {
                    table.setDefaultColspan(3);
                }

                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                //table.addCell(new Phrase((String) footer.get(0), SaleReportPdfDetailCol.fontLsContent));
                //table.setDefaultColspan(1);
                table.addCell(new Phrase((String) footer.get(2), SaleReportPdfDetailCol.fontLsContent));
                table.setDefaultColspan(1);
                table.addCell(new Phrase((String) footer.get(3), SaleReportPdfDetailCol.fontLsContent));

                if (srcSaleReport.getViewColoumChange().size() > 0) {
                    int colspan = 0;
                    for (int k = 0; k < srcSaleReport.getViewColoumChange().size(); k++) {
                        int coloum = Integer.parseInt((String) srcSaleReport.getViewColoumChange().get(k));
                        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                        switch (coloum) {
                            case SrcSaleReport.SHOW_FIELD_CATEGORY:
                                table.setDefaultColspan(1);
                                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                table.addCell(new Phrase(" ", SaleReportPdfDetailCol.fontLsContent));
                                break;
                            case SrcSaleReport.SHOW_FIELD_MERK:
                                table.setDefaultColspan(1);
                                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                table.addCell(new Phrase(" ", SaleReportPdfDetailCol.fontLsContent));
                                break;
                            case SrcSaleReport.SHOW_FIELD_SELL_PRICE:
                                table.setDefaultColspan(1);
                                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                table.addCell(new Phrase(" ", SaleReportPdfDetailCol.fontLsContent));
                                break;
                            case SrcSaleReport.SHOW_FIELD_TOTAL_SALE:
                                table.setDefaultColspan(1);
                                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                table.addCell(new Phrase((String) footer.get(4), SaleReportPdfDetailCol.fontLsContent));
                                break;
                            case SrcSaleReport.SHOW_FIELD_SUPPLIER:
                                table.setDefaultColspan(1);
                                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                table.addCell(new Phrase(" ", SaleReportPdfDetailCol.fontLsContent));
                                break;
                            case SrcSaleReport.SHOW_FIELD_BUYING_PRICE:
                                table.setDefaultColspan(1);
                                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                table.addCell(new Phrase(" ", SaleReportPdfDetailCol.fontLsContent));
                                break;
                            case SrcSaleReport.SHOW_FIELD_SALES_NAME:
                                table.setDefaultColspan(1);
                                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                table.addCell(new Phrase(" ", SaleReportPdfDetailCol.fontLsContent));
                                break;
                            case SrcSaleReport.SHOW_FIELD_LOCATION:
                                table.setDefaultColspan(1);
                                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                table.addCell(new Phrase(" ", SaleReportPdfDetailCol.fontLsContent));
                                break;
                            case SrcSaleReport.SHOW_FIELD_SHIFT:
                                table.setDefaultColspan(1);
                                table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                                table.addCell(new Phrase(" ", SaleReportPdfDetailCol.fontLsContent));
                                break;
                        }
                    }
                }

                /*table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                table.addCell(new Phrase((String) footer.get(8), SaleReportPdfDetailCol.fontLsContent));
                table.addCell(new Phrase((String) footer.get(9), SaleReportPdfDetailCol.fontLsContent));
                table.addCell(new Phrase((String) footer.get(10), SaleReportPdfDetailCol.fontLsContent));
                table.addCell(new Phrase((String) footer.get(11), SaleReportPdfDetailCol.fontLsContent));
                table.addCell(new Phrase((String) footer.get(12), SaleReportPdfDetailCol.fontLsContent));*/

                //table.addCell(new Phrase((String)footer.get(x+11), SaleReportPdfDetailCol.fontLsContent));

            } catch (Exception e) {
                System.out.println("exc contenct" + e.toString());
            }
        }

        return table;
    }


    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request  servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, java.io.IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request  servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, java.io.IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}
