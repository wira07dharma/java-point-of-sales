/**
 * User: gwawan
 * Date: Dec 7, 2007
 * Time: 12:47:23 PM
 * To change this template use Options | File Templates.
 */
package com.dimata.posbo.report.retur;

import com.dimata.posbo.session.transferdata.ItemFailedPDF;
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import java.io.IOException;
import java.util.Vector;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;

import com.dimata.qdep.form.FRMHandler;


public class ReturnDetailReportPdf extends HttpServlet {
    /* Generated by Together */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }
    
    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color bgColor = new Color(220, 220, 220);
    
    // setting some fonts in the color chosen by the user
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 13, Font.BOLD, border);
    public static Font fontMainHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.BOLD, border);
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.ITALIC, border);
    public static Font fontListHeader = new Font(Font.TIMES_NEW_ROMAN, 9, Font.BOLD, border);
    public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 9);
    
    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        
        Color bgColor = new Color(200, 200, 200);
        Rectangle rectangle = new Rectangle(20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4.rotate(), 20, 20, 10, 0);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        HttpSession session = request.getSession(true);
        Vector pdfContent = new Vector(1,1);
        
        try {
            //step 1: creating an instance of the writer
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            // step 2: adding some metadata to the document
            document.addSubject("This is a subject.");
            document.addSubject("This is a subject two.");
            
            HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("", fontLsContent)), false);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setBorder(HeaderFooter.NO_BORDER);
            document.setFooter(footer);
            
            document.open();
            
            /* step 3: get data from session */
            try {
                pdfContent = (Vector)session.getValue("REPORT_RETURN_DETAIL_PDF");
            }
            catch(Exception e) {
                System.out.println("Error when get session \n"+e.toString());
            }
            
            if ((pdfContent != null) && (pdfContent.size() > 0)) {
                //document.add();
                getContent(pdfContent, document, writer);
            }
            
            //untuk membuat mengetehui dan bla bla bla
            Table tableApproval = getListFooter();
            document.add(tableApproval);
            
        } catch (Exception e) {
            System.out.println("Exception Main : " + e.toString());
        }
        
        // step 4: closing the document
        document.close();
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }
    
    
    private static Table getListFooter() throws BadElementException, DocumentException {
        int ctnInt[] = {30, 40, 30};
	Table table = new Table(3);
        //table.setBorderColor(new Color(255, 255, 255));
        table.setWidth(100);
        table.setWidths(ctnInt);
        table.setBorderWidth(0);
        table.setCellpadding(0);
        table.setCellspacing(1);
        
        table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("Mengetahui", ItemFailedPDF.fontListHeader));
        
         table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("Accounting", ItemFailedPDF.fontListHeader));

        table.setBorderColor(new Color(255, 255, 255));    
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("Edp/Inventory", ItemFailedPDF.fontListHeader));
        
        
         table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));
        
         table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));

        table.setBorderColor(new Color(255, 255, 255));    
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));
        
        
        table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));
        
         table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));

        table.setBorderColor(new Color(255, 255, 255));    
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));
        
        
        table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));
        
         table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));

        table.setBorderColor(new Color(255, 255, 255));    
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));
        
        
        table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));
        
         table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));

        table.setBorderColor(new Color(255, 255, 255));    
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("", ItemFailedPDF.fontListHeader));
        
        
        table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("(.................................)", ItemFailedPDF.fontListHeader));
        
         table.setBorderColor(new Color(255, 255, 255));
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("(.................................)", ItemFailedPDF.fontListHeader));

        table.setBorderColor(new Color(255, 255, 255));    
        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
        table.addCell(new Phrase("(.................................)", ItemFailedPDF.fontListHeader));
        
        return table;
    }
    
    
    /* this method make table header */
    private static Table getHeader(Vector vct) throws BadElementException, DocumentException {
        if (vct != null && vct.size() > 0) {
            int ctnInt[] = {7,93};
            Table table = new Table(2);
            String compName = (String)vct.get(0);
            String compAddr = (String)vct.get(1);
            String compTelpFax = (String)vct.get(2);
            String reportTitle = (String)vct.get(3);
            
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            //  nama, alamat, telp company
            table.setDefaultCellBorder(Table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultColspan(2);
            table.addCell(new Phrase(compName, fontHeader));
            table.addCell(new Phrase(compAddr, fontHeader));
            table.addCell(new Phrase(compTelpFax, fontHeader));
            
            // judul laporan
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase(reportTitle.toUpperCase(), fontTitle));
            
            // periode, lokasi
            table.setDefaultCellBorder(table.NO_BORDER);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.addCell(new Phrase("", fontTitle));
            table.setDefaultColspan(1);
            table.addCell(new Phrase((String)vct.get(4), fontMainHeader));
            table.addCell(new Phrase(" : "+(String)vct.get(5), fontMainHeader));
            table.addCell(new Phrase((String)vct.get(6), fontMainHeader));
            table.addCell(new Phrase(" : "+(String)vct.get(7), fontMainHeader));
            
            return table;
        }
        
        return new Table(1);
    }
    
    
    private static Table getListHeader(Vector header) throws BadElementException, DocumentException {
        int ctnInt[] = {3, 12, 7, 13, 8, 15, 7, 7, 9, 9, 10};
        Table table = new Table(11);
        try{
            table.setBorderColor(new Color(255, 255, 255));
            table.setWidth(100);
            table.setWidths(ctnInt);
            table.setBorderWidth(0);
            table.setCellpadding(1);
            table.setCellspacing(0);
            
            table.setDefaultRowspan(2);
            table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            table.setDefaultCellBackgroundColor(bgColor);
            
            // No
            table.addCell(new Phrase((String)header.get(0), fontListHeader));
            
            // Nomor Nota
            table.addCell(new Phrase((String)header.get(1),fontListHeader));
            
            // Tanggal
            table.addCell(new Phrase((String)header.get(2), fontListHeader));
            
            // Suplier
            table.addCell(new Phrase((String)header.get(3), fontListHeader));
            
            table.setDefaultRowspan(1);
            table.setDefaultColspan(6);
            
            // Item
            table.addCell(new Phrase((String)header.get(4), fontListHeader));
            
            table.setDefaultRowspan(2);
            table.setDefaultColspan(1);
            
            // Total Retur
            table.addCell(new Phrase((String)header.get(5), fontListHeader));
            
            table.setDefaultRowspan(1);
            table.setDefaultColspan(1);
            
            // SKU
            table.addCell(new Phrase((String)header.get(6), fontListHeader));
            
            // Nama Barang
            table.addCell(new Phrase((String)header.get(7), fontListHeader));
            
            // Qty
            table.addCell(new Phrase((String)header.get(8), fontListHeader));
            
            // Satuan
            table.addCell(new Phrase((String)header.get(9), fontListHeader));
            
            // Harga Beli
            table.addCell(new Phrase((String)header.get(10), fontListHeader));
            
            // Total
            table.addCell(new Phrase((String)header.get(11), fontListHeader));
            
        }catch(Exception e){
            System.out.println("Exception getListHeader "+e.toString());
        }
        
        return table;
    }
    
    private static Table getFooter(Vector footer, Table table) {
        try {
            
            table.setDefaultColspan(10);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
            
            /** Sub Total */
            table.addCell(new Phrase("SUB TOTAL", fontListHeader));
            
            table.setDefaultColspan(1);
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            
            table.addCell(new Phrase((String)footer.get(0), fontListHeader));
            
            table.setDefaultColspan(10);
            table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
            
            /** Grand Total */
            table.addCell(new Phrase("GRAND TOTAL", fontListHeader));
            
            table.setDefaultColspan(1);
            table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
            
            table.addCell(new Phrase((String)footer.get(1), fontListHeader));
        }
        catch(Exception e) {
            System.out.println("Exception getFooter "+e.toString());
        }
        return table;
    }
    
    /**
     * gadnyana
     * for get total document
     * return double: total of vector
     */
    public static double getSubTotal(Vector content, long prevMatReturnOid, int j){
        long currentMatReturnOid = 0;
        double subTotalRetur = 0.0;
        try{
            for(int i=j;i<content.size();i++){
                Vector objVector = (Vector)content.get(i);                
                currentMatReturnOid = Long.parseLong((String)objVector.get(0));
                if(currentMatReturnOid != prevMatReturnOid) {
                    break;
                }else{
                    double qty = Double.parseDouble((String)objVector.get(7));
                    double price = Double.parseDouble((String)objVector.get(8));
                    double rate = Double.parseDouble((String)objVector.get(9));
                    
                    // for calculate
                    subTotalRetur += (qty * price * rate);
                }
            }
        }catch(Exception x){}
        return subTotalRetur;
    }
    
    
    private static Table getContent(Vector vct, Document document, PdfWriter writer) throws BadElementException, DocumentException {
        document.add(getHeader((Vector)vct.get(0)));
        
        Vector vctContent = (Vector)vct.get(1);
        Vector header = (Vector)vctContent.get(0);
        Vector content = (Vector)vctContent.get(1);
        Vector footer = (Vector)vctContent.get(2);
        
        /** buat header untuk table */
        Table table = getListHeader(header);
        
        /** variabel bantu */
        long oidInvoice = 0;
        double qty = 0;
        double price = 0;
        double rate = 0;
        double totalRetur = 0;
        double subTotalRetur = 0;
        long currentMatReturnOid = 0;
        long prevMatReturnOid = 0;
        int nomor = 1;
        boolean newPage = false;
        
        table.setDefaultCellBackgroundColor(Color.WHITE);
        
        if (content != null && content.size() > 0) {
            try {
                for(int i=0; i<content.size(); i++)	{
                    Vector rowx = new Vector();
                    Vector objVector = (Vector)content.get(i);
                    
                    currentMatReturnOid = Long.parseLong((String)objVector.get(0));
                    qty = Double.parseDouble((String)objVector.get(7));
                    price = Double.parseDouble((String)objVector.get(8));
                    rate = Double.parseDouble((String)objVector.get(9));
                    
                    totalRetur = (qty * price * rate);
                    subTotalRetur += (qty * price * rate);
                    
                    if(currentMatReturnOid != prevMatReturnOid) {
                        table.setDefaultColspan(1);
                        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.addCell(new Phrase(String.valueOf(nomor++), fontLsContent));
                        table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                        table.addCell(new Phrase((String)objVector.get(1), fontLsContent));
                        table.addCell(new Phrase((String)objVector.get(2), fontLsContent));
                        table.addCell(new Phrase((String)objVector.get(3), fontLsContent));
                        table.addCell(new Phrase((String)objVector.get(4), fontLsContent));
                        table.addCell(new Phrase((String)objVector.get(5), fontLsContent));
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(qty), fontLsContent));
                        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                        table.addCell(new Phrase((String)objVector.get(6), fontLsContent));
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(price * rate), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(totalRetur), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(getSubTotal(content,currentMatReturnOid,i)), fontLsContent));
                        
                    }
                    else {
                        table.setDefaultHorizontalAlignment(Table.ALIGN_LEFT);
                        table.setDefaultVerticalAlignment(Table.ALIGN_MIDDLE);
                        table.setDefaultColspan(4);
                        table.addCell(new Phrase("", fontLsContent));
                        table.setDefaultColspan(1);
                        table.addCell(new Phrase((String)objVector.get(4), fontLsContent));
                        table.addCell(new Phrase((String)objVector.get(5), fontLsContent));
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(qty), fontLsContent));
                        table.setDefaultHorizontalAlignment(Table.ALIGN_CENTER);
                        table.addCell(new Phrase((String)objVector.get(6), fontLsContent));
                        table.setDefaultHorizontalAlignment(Table.ALIGN_RIGHT);
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(price * rate), fontLsContent));
                        table.addCell(new Phrase(FRMHandler.userFormatStringDecimal(totalRetur), fontLsContent));
                        table.addCell(new Phrase("", fontLsContent));
                    }
                    
                    /** set untuk iterasi selanjutnya */
                    prevMatReturnOid = currentMatReturnOid;
                    
                    /** buat baris kosong */
                    table.setDefaultColspan(11);
                    table.addCell(new Phrase("", fontLsContent));
                    table.addCell(new Phrase("", fontLsContent));
                    table.addCell(new Phrase("", fontLsContent));
                    table.addCell(new Phrase("", fontLsContent));
                    table.addCell(new Phrase("", fontLsContent));
                    table.addCell(new Phrase("", fontLsContent));
                    
                    if (!writer.fitsPage(table)) { // kondisi jika sudah pada baris paling akhir dari halaman
                        
                        /** hapus baris kosong */
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        
                        Vector tempFooter = new Vector();
                        /** Sub Total*/
                        tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalRetur));
                        
                        /** Grand Total */
                        tempFooter.add((String)footer.get(0));
                        
                        document.add(getFooter(tempFooter, table));
                        
                        /** set variabel sub = 0 untuk next page */
                        subTotalRetur = 0;
                        
                        document.newPage();
                        document.add(getHeader((Vector)vct.get(0)));
                        table = getListHeader(header);
                        newPage = true;
                    }
                    else { // masih tersisa baris kosong pada halaman
                        /** hapus baris kosong */
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        table.deleteLastRow();
                        
                        newPage = false;
                    }
                }
                
                if(newPage == false) {
                    Vector tempFooter = new Vector();
                    /** Sub Total*/
                    tempFooter.add(FRMHandler.userFormatStringDecimal(subTotalRetur));
                    
                    /** Grand Total */
                    tempFooter.add((String)footer.get(0));
                    
                    document.add(getFooter(tempFooter, table));
                }
                
            }catch(Exception e){
                System.out.println("Exception getContent "+e.toString());
            }
        }
        
        return table;
    }
    
    private static String cekNull(String val){
        if(val.equals("null"))
            val = "";
        return val;
    }
    
    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}
