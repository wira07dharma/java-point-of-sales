/* Generated by Together */

package com.dimata.posbo.form.warehouse;

/* java package */ 
import java.util.*; 
import javax.servlet.*;
import javax.servlet.http.*; 
/* dimata package */
import com.dimata.util.*;
import com.dimata.util.lang.*;
/* qdep package */
import com.dimata.qdep.system.*;
import com.dimata.qdep.form.*;
import com.dimata.qdep.entity.*;
import com.dimata.posbo.db.*;
/* project package */
import com.dimata.posbo.entity.masterdata.*;
import com.dimata.posbo.entity.warehouse.*;
import com.dimata.posbo.entity.purchasing.*;
import com.dimata.posbo.session.warehouse.*;
import com.dimata.posbo.session.purchasing.*;

public class CtrlMatDispatchTransfer extends Control implements I_Language  {

    public static int RSLT_OK = 0;
	public static int RSLT_UNKNOWN_ERROR = 1;
	public static int RSLT_EST_CODE_EXIST = 2;
	public static int RSLT_FORM_INCOMPLETE = 3;

	public static String[][] resultText = {
		{"Berhasil", "Tidak dapat diproses", "NoPerkiraan sudah ada", "Data tidak lengkap"},
		{"Succes", "Can not process", "Estimation code exist", "Data incomplete"}
	};

	private int start;
	private String msgString;
	private MatDispatch matDispatch;
	private PstMatDispatch pstMatDispatch;
	private FrmMatDispatchTransfer frmMatDispatch;
	int language = LANGUAGE_DEFAULT;
    long oid = 0;
    int requestStatus = I_DocStatus.DOCUMENT_STATUS_FINAL;

	public CtrlMatDispatchTransfer(HttpServletRequest request){
		msgString = "";
		matDispatch = new MatDispatch();
		try{
			pstMatDispatch = new PstMatDispatch(0);
		}catch(Exception e){;}
		//frmMatDispatch = new FrmMatDispatchTransfer(request, matDispatch);
	}

	private String getSystemMessage(int msgCode){
		switch (msgCode){
			case I_DBExceptionInfo.MULTIPLE_ID :
				//this.frmMatDispatch.addError(frmMatDispatch.FRM_FIELD_MAT_DISPATCH_ID, resultText[language][RSLT_EST_CODE_EXIST] );
				return resultText[language][RSLT_EST_CODE_EXIST];
			default:
				return resultText[language][RSLT_UNKNOWN_ERROR]; 
		}
	}

	private int getControlMsgId(int msgCode){
		switch (msgCode){
			case I_DBExceptionInfo.MULTIPLE_ID :
				return RSLT_EST_CODE_EXIST;
			default:
				return RSLT_UNKNOWN_ERROR;
		}
	}

	public int getLanguage(){ return language; }

	public void setLanguage(int language){ this.language = language; }

	public MatDispatch getMatDispatch() { return matDispatch; } 

	public FrmMatDispatchTransfer getForm() { return frmMatDispatch; }

	public String getMessage(){ return msgString; }

	public int getStart() { return start; }

    public long getOidTransfer(){ return oid;}

    public int getRequestStatus(){ return requestStatus;}

	public int action(int cmd , MatDispatch matRequest, Vector matRequestItem, Vector itemDispatch){
		msgString = "";
		int excCode = I_DBExceptionInfo.NO_EXCEPTION;
		int rsCode = RSLT_OK;
		switch(cmd){

			case Command.SUBMIT :
                Date dispatchDate = null;
                int counter = 0;
                long oidLocation = 0;
				int st = 0;

				if(matRequest!=null){
					try{

                        /**** insert new material dispatch */
                        //matDispatch.setDfmDate(new Date());
                        //matDispatch.setDispatchFrom(matRequest.getDispatchFrom());
                        matDispatch.setDispatchTo(matRequest.getDispatchTo());

                        I_PstDocType i_pstDocType = (I_PstDocType) Class.forName(I_DocType.DOCTYPE_CLASSNAME).newInstance();
	                    int docType = i_pstDocType.composeDocumentType(I_DocType.SYSTEM_MATERIAL,I_DocType.MAT_DOC_TYPE_DF);
                        //matDispatch.setDocType(docType);

                        //int dfType = SessMatDispatch.getDispatchType(matDispatch.getDispatchFrom(), matDispatch.getDispatchTo());
		                //matDispatch.setDispatchType(dfType);

                        SessMatDispatch sessDispatch = new SessMatDispatch();

                        //int maxCounter = sessDispatch.getMaxDispacthCounter(matDispatch.getDfmDate());
		                //maxCounter = maxCounter + 1;
		                //matDispatch.setDispatchCodeCounter(maxCounter);

                        //System.out.println("----maxCounter2 : "+maxCounter);
		                //System.out.println("----materialDispatch : "+materialDispatch.getOID());
		                //System.out.println("----maxCounter1 : "+maxCounter);
		                //.out.println("after + 1 ctrl : -->"+maxCounter);
		
		                //String code = DocCodeGenerator.getDocumentCode(matDispatch.getDocType(), matDispatch.getDfmDate(), matDispatch.getDispatchCodeCounter());//sessDispatch.generateRequestCode(materialDispatch);
		
		                //matDispatch.setDispatchCode(code);
                        //matDispatch.setDfStatus(I_DocStatus.DOCUMENT_STATUS_DRAFT);
                        //matDispatch.setRequestDfmId(matRequest.getOID());

                        oid = PstMatDispatch.insertExc(matDispatch);

                        /************* success inser dispatch, then insert the item and update workflow */
                        if(oid!=0){
                            I_Workflow i_Workflow = (I_Workflow)Class.forName(I_Workflow.WORKFLOW_CLASSNAME).newInstance();
	                        i_Workflow.generateNewApproval(oid, docType);

	                        if(matRequestItem!=null && matRequestItem.size()>0){
	                            for(int i=0; i<matRequestItem.size(); i++){
	                                MatDispatchItem regitem = (MatDispatchItem)matRequestItem.get(i);
	                                MatDispatchItem dfitem = getDispatchItem(regitem, itemDispatch, oid);
	                                long oiditem = PstMatDispatchItem.insertExc(dfitem);

                                    if(oiditem!=0){
                                        MaterialStock matStock = new MaterialStock();
                                        //matStock = PstMatStock.fetchExc(dfitem.getMatStockId());
                                        //matStock.setReservQuantity(matStock.getReservQuantity()+dfitem.getIssuedQuantity());
                                        PstMaterialStock.updateExc(matStock);
                                    }

	                                System.out.println("---------->>>>>> sukses insert item oid : "+oid);
	                            }
	                        }


                            PstMatDispatch pstMatDispatch = new PstMatDispatch();
                            int index = pstMatDispatch.setDocumentStatus(matRequest.getOID(), I_DocStatus.DOCUMENT_STATUS_CLOSED);
                            System.out.println("---------->>>>>> index : "+index);
                            requestStatus = index;

                        }

					}catch(Exception exc){
                        System.out.println("Exception e : "+exc.toString());
					}
				}


			//	if(frmMatDispatch.errorSize()>0) {
			//		msgString = FRMMessage.getMsg(FRMMessage.MSG_INCOMPLATE);
			//		return RSLT_FORM_INCOMPLETE;
			//	}

				break;


			default :

		}
		return rsCode;
	}


    public MatDispatchItem getDispatchItem(MatDispatchItem regitem, Vector itemDispatch, long dfOID){

        MatDispatchItem dfitem = new MatDispatchItem();
        //dfitem.setMatStockId(regitem.getMatStockId());
        //dfitem.setMatDispatchId(dfOID);
        //dfitem.setRegQuantity(regitem.getRegQuantity());

        if(itemDispatch!=null && itemDispatch.size()>0){
            for(int i=0; i<itemDispatch.size(); i++){
                MatDispatchItem tempitem = (MatDispatchItem)itemDispatch.get(i);
                if(regitem.getOID()==tempitem.getOID()){
					//dfitem.setIssuedQuantity(tempitem.getIssuedQuantity());
                    //dfitem.setComment(tempitem.getComment());
                    break;
                }
            }
        }

        return dfitem;
    }
}
