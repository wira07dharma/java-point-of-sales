/* Generated by Together */
package com.dimata.pos.entity.masterCashier;

import com.dimata.common.entity.custom.PstDataCustom;
import com.dimata.posbo.db.DBException;
import com.dimata.posbo.db.DBHandler;
import com.dimata.posbo.db.DBResultSet;
import com.dimata.posbo.db.I_DBInterface;
import com.dimata.posbo.db.I_DBType;

/* package java */
/* package qdep */
import java.sql.ResultSet;
import java.util.Vector;

//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;
import com.dimata.posbo.entity.masterdata.*;
import com.dimata.pos.entity.balance.*;

public class PstCashMaster extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language {

    //public static final String TBL_CASH_MASTER = "CASH_MASTER";
    public static final String TBL_CASH_MASTER = "cash_master";

    public static final int FLD_CASH_MASTER_ID = 0;
    public static final int FLD_LOCATION_ID = 1;
    public static final int FLD_CASHIER_NUMBER = 2;
    public static final int FLD_TAX = 3;
    public static final int FLD_SERVICE = 4;
    public static final int FLD_PRICE_TYPE = 5;
    //update opie-eyek 20130916
    public static final int FLD_CABANG = 6;
    //added by dewok 2018-06-22
    public static final int FLD_CASHIER_DATABASE_MODE = 7;
    public static final int FLD_CASHIER_STOCK_MODE = 8;

    public static final String[] fieldNames = {
        "CASH_MASTER_ID",
        "LOCATION_ID",
        "CASHIER_NUMBER",
        "TAX",
        "SERVICE",
        "PRICE_TYPE",
        "CABANG",
        //added by dewok 2018-06-22
        "CASHIER_DATABASE_MODE",
        "CASHIER_STOCK_MODE"
    };

    public static final int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_STRING,
        TYPE_STRING,
        //added by dewok 2018-06-22
        TYPE_INT,
        TYPE_INT
    };

    // ianrizky 2018-06-08 (integrasi database dengan ProchainPOS)
    //==========CASHIER_DATABASE_MODE==========
    // prochain dan kasir satu db
    public static final int DATABASE_MODE_ONLINE = 0;
    // prochain dan kasir beda db,
    // masing-masing pc kasir punya aplikasi dan db sendiri,
    // koneksi ke prochain dan semua kasir lainnya
    public static final int DATABASE_MODE_OFFLINE_SELF_DB = 1;
    // prochain dan kasir beda db,
    // masing-masing pc kasir punya aplikasi sendiri namun db-nya jadi satu dengan pc kasir lain,
    // koneksi ke prochain saja
    public static final int DATABASE_MODE_OFFLINE_ONE_DB_PER_OUTLET = 2;
    
    public static final String DATABASE_MODE_TITLE[] = {
        "Database Mode Online",
        "Database Mode Offline Self DB",
        "Database Mode Offline One DB Per Outlet"
    };

    //==========CASHIER_STOCK_MODE==========
    // tidak ada pengecekan stok ke ProchainPOS
    public static final int STOCK_MODE_NO_STOCK_CHECKING = 0;
    // ada pengecekan stok ke ProchainPOS, pembelian tidak bisa dilakukan jika stok kosong / 0
    public static final int STOCK_MODE_STOCK_CHECKING_DISABLE_BYPASS = 1;
    // ada pengecekan stok ke ProchainPOS, pembelian bisa dilakukan meskipun stok kosong / 0
    public static final int STOCK_MODE_STOCK_CHECKING_ENABLE_BYPASS_BY_CASHIER = 2;
    // ada pengecekan stok ke ProchainPOS, pembelian bisa dilakukan meskipun stok kosong / 0, harus seizin supervisor
    public static final int STOCK_MODE_STOCK_CHECKING_ENABLE_BYPASS_BY_SPV = 3;
    
    public static final String STOCK_MODE_TITLE[] = {
        "Stock Mode No Stock Checking",
        "Stock Mode Stock Checking Disable Bypass",
        "Stock Mode Stock Checking Enable Bypass By Cashier",
        "Stock Mode Stock Checking Enable Bypass By SPV"
    };

    //constructor
    public PstCashMaster() {
    }

    public PstCashMaster(int i) throws DBException {
        super(new PstCashMaster());
    }

    public PstCashMaster(String sOid) throws DBException {
        super(new PstCashMaster(0));
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public PstCashMaster(long lOid) throws DBException {
        super(new PstCashMaster(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_CASH_MASTER;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstCashMaster().getClass().getName();
    }

    public long fetchExc(Entity ent) throws Exception {
        CashMaster cashMaster = fetchExc(ent.getOID());
        ent = (Entity) cashMaster;
        return cashMaster.getOID();
    }

    public long insertExc(Entity ent) throws Exception {
        return insertExc((CashMaster) ent);
    }

    public long updateExc(Entity ent) throws Exception {
        return updateExc((CashMaster) ent);
    }

    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());

    }

    public static CashMaster fetchExc(long oid) throws DBException {
        try {
            CashMaster cashMaster = new CashMaster();
            PstCashMaster pstCashMaster = new PstCashMaster(oid);
            cashMaster.setOID(oid);
            cashMaster.setLocationId(pstCashMaster.getlong(FLD_LOCATION_ID));
            cashMaster.setCashierNumber(pstCashMaster.getInt(FLD_CASHIER_NUMBER));
            cashMaster.setCashTax(pstCashMaster.getdouble(FLD_TAX));
            cashMaster.setCashService(pstCashMaster.getdouble(FLD_SERVICE));
            cashMaster.setPriceType(pstCashMaster.getString(FLD_PRICE_TYPE));
            //update opie-eyek 20130916
            cashMaster.setCabang(pstCashMaster.getString(FLD_CABANG));
            //added by dewok 2018-06-22
            cashMaster.setCashierDatabaseMode(pstCashMaster.getInt(FLD_CASHIER_DATABASE_MODE));
            cashMaster.setCashierStockMode(pstCashMaster.getInt(FLD_CASHIER_STOCK_MODE));
            return cashMaster;
        } catch (DBException dbe) {
            System.out.println("error =" + dbe);
            throw dbe;
        } catch (Exception e) {
            System.out.println("error =" + e);
            throw new DBException(new PstCashMaster(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(CashMaster cashMaster) throws DBException {
        try {
            PstCashMaster pstCashMaster = new PstCashMaster(0);
            pstCashMaster.setLong(FLD_LOCATION_ID, cashMaster.getLocationId());
            pstCashMaster.setInt(FLD_CASHIER_NUMBER, cashMaster.getCashierNumber());
            pstCashMaster.setDouble(FLD_TAX, cashMaster.getCashTax());
            pstCashMaster.setDouble(FLD_SERVICE, cashMaster.getCashService());
            pstCashMaster.setString(FLD_PRICE_TYPE, cashMaster.getPriceType());
            //update opie-eyek 20130916
            pstCashMaster.setString(FLD_CABANG, cashMaster.getCabang());
            //cashMaster.setCabang(pstCashMaster.getString(FLD_CABANG));
            //added by dewok 2018-06-22
            pstCashMaster.setInt(FLD_CASHIER_DATABASE_MODE, cashMaster.getCashierDatabaseMode());
            pstCashMaster.setInt(FLD_CASHIER_STOCK_MODE, cashMaster.getCashierStockMode());
            pstCashMaster.insert();

            long oidDataSync = PstDataSyncSql.insertExc(pstCashMaster.getInsertSQL());
            PstDataSyncStatus.insertExc(oidDataSync);
            cashMaster.setOID(pstCashMaster.getlong(FLD_CASH_MASTER_ID));
			
			//kebutuhan untuk service transfer katalog
			PstDataCustom.insertDataForSyncAllLocation(pstCashMaster.getInsertSQL());
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCashMaster(0), DBException.UNKNOWN);
        }
        return cashMaster.getOID();
    }
	
	public static long insertExcByOid(CashMaster cashMaster) throws DBException {
        try {
            PstCashMaster pstCashMaster = new PstCashMaster(0);
            pstCashMaster.setLong(FLD_LOCATION_ID, cashMaster.getLocationId());
            pstCashMaster.setInt(FLD_CASHIER_NUMBER, cashMaster.getCashierNumber());
            pstCashMaster.setDouble(FLD_TAX, cashMaster.getCashTax());
            pstCashMaster.setDouble(FLD_SERVICE, cashMaster.getCashService());
            pstCashMaster.setString(FLD_PRICE_TYPE, cashMaster.getPriceType());
            //update opie-eyek 20130916
            pstCashMaster.setString(FLD_CABANG, cashMaster.getCabang());
            //cashMaster.setCabang(pstCashMaster.getString(FLD_CABANG));
            //added by dewok 2018-06-22
            pstCashMaster.setInt(FLD_CASHIER_DATABASE_MODE, cashMaster.getCashierDatabaseMode());
            pstCashMaster.setInt(FLD_CASHIER_STOCK_MODE, cashMaster.getCashierStockMode());
            pstCashMaster.insertByOid(cashMaster.getOID());

            long oidDataSync = PstDataSyncSql.insertExc(pstCashMaster.getInsertSQL());
            PstDataSyncStatus.insertExc(oidDataSync);
            //cashMaster.setOID(pstCashMaster.getlong(FLD_CASH_MASTER_ID));
			//kebutuhan untuk service transfer katalog
			PstDataCustom.insertDataForSyncAllLocation(pstCashMaster.getInsertSQL());
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCashMaster(0), DBException.UNKNOWN);
        }
        return cashMaster.getOID();
    }

    public static long updateExc(CashMaster cashMaster) throws DBException {
        try {
            if (cashMaster.getOID() != 0) {
                PstCashMaster pstCashMaster = new PstCashMaster(cashMaster.getOID());
                pstCashMaster.setLong(FLD_LOCATION_ID, cashMaster.getLocationId());
                pstCashMaster.setInt(FLD_CASHIER_NUMBER, cashMaster.getCashierNumber());
                pstCashMaster.setDouble(FLD_TAX, cashMaster.getCashTax());
                pstCashMaster.setDouble(FLD_SERVICE, cashMaster.getCashService());
                pstCashMaster.setString(FLD_PRICE_TYPE, cashMaster.getPriceType());
                //update opie-eyek 20130916
                pstCashMaster.setString(FLD_CABANG, cashMaster.getCabang());
                //added by dewok 2018-06-22
                pstCashMaster.setInt(FLD_CASHIER_DATABASE_MODE, cashMaster.getCashierDatabaseMode());
                pstCashMaster.setInt(FLD_CASHIER_STOCK_MODE, cashMaster.getCashierStockMode());
                pstCashMaster.update();

                long oidDataSync = PstDataSyncSql.insertExc(pstCashMaster.getUpdateSQL());
                PstDataSyncStatus.insertExc(oidDataSync);
				//kebutuhan untuk service transfer katalog
				PstDataCustom.insertDataForSyncAllLocation(pstCashMaster.getUpdateSQL());
                return cashMaster.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCashMaster(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long oid) throws DBException {
        try {
            PstCashMaster pstCashMaster = new PstCashMaster(oid);
            pstCashMaster.delete();

            long oidDataSync = PstDataSyncSql.insertExc(pstCashMaster.getDeleteSQL());
            PstDataSyncStatus.insertExc(oidDataSync);
			//kebutuhan untuk service transfer katalog
			PstDataCustom.insertDataForSyncAllLocation(pstCashMaster.getDeleteSQL());

        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCashMaster(0), DBException.UNKNOWN);
        }
        return oid;
    }

    public static Vector listAll() {
        return list(0, 500, "", "");
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID] + ") FROM " + TBL_CASH_MASTER;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_MASTER;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                CashMaster cashMaster = new CashMaster();
                resultToObject(rs, cashMaster);
                lists.add(cashMaster);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * Ari Wiweka 13/06/2013 List Cashier Number
     */
    public static Vector listCashierNumber(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            //String sql = "SELECT * FROM " + TBL_CASH_MASTER;
            String sql = "SELECT * FROM (SELECT * FROM " + TBL_CASH_MASTER + " CM WHERE NOT EXISTS (SELECT * FROM "
                    + PstCashCashier.TBL_CASH_CASHIER + " CC WHERE " + PstCashCashier.fieldNames[PstCashCashier.FLD_SPVCLOSE_OID] + " = '1' "
                    + " AND CM." + fieldNames[FLD_CASH_MASTER_ID] + " = CC." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID] + ")) tmp";

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                CashMaster cashMaster = new CashMaster();
                resultToObject(rs, cashMaster);
                lists.add(cashMaster);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static void resultToObject(ResultSet rs, CashMaster cashMaster) {
        try {
            cashMaster.setOID(rs.getLong(PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]));
            cashMaster.setLocationId(rs.getLong(PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID]));
            cashMaster.setCashierNumber(rs.getInt(PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER]));
            cashMaster.setCashTax(rs.getDouble(PstCashMaster.fieldNames[PstCashMaster.FLD_TAX]));
            cashMaster.setCashService(rs.getDouble(PstCashMaster.fieldNames[PstCashMaster.FLD_SERVICE]));
            cashMaster.setPriceType(rs.getString(PstCashMaster.fieldNames[PstCashMaster.FLD_PRICE_TYPE]));
            //update opie-eyek 20130916
            cashMaster.setCabang(rs.getString(PstCashMaster.fieldNames[PstCashMaster.FLD_CABANG]));
            //added by dewok 2018-06-22
            cashMaster.setCashierDatabaseMode(rs.getInt(PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_DATABASE_MODE]));
            cashMaster.setCashierStockMode(rs.getInt(PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_STOCK_MODE]));
        } catch (Exception e) {
        }
    }
	
	public static boolean checkOID(long cashMasterId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_MASTER
                    + " WHERE " + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]
                    + " = " + cashMasterId;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

}
