/* Generated by Together */

package com.dimata.pos.entity.billing;

import com.dimata.posbo.db.DBException;
import com.dimata.posbo.db.DBHandler;
import com.dimata.posbo.db.DBResultSet;
import com.dimata.posbo.db.I_DBInterface;
import com.dimata.posbo.db.I_DBType;

/* package java */

import java.util.Vector;

/* package qdep */
import java.sql.ResultSet;
import java.util.Date;
//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.pos.entity.balance.PstCashCashier;
import com.dimata.pos.entity.masterCashier.PstCashMaster;
import com.dimata.posbo.entity.search.SrcSaleReport;
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.Formater;
import com.dimata.util.lang.I_Language;

public class PstPendingOrder extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language {
    //public static final String TBL_CASH_PENDING_ORDER = "CASH_PENDING_ORDER";
    public static final String TBL_CASH_PENDING_ORDER = "cash_pending_order";
    
    
    public static final int FLD_CASH_PENDING_ORDER_ID = 0;
    public static final int FLD_SALES_ID = 1;
    public static final int FLD_MEMBER_ID = 2;
    public static final int FLD_PO_NUMBER = 3;
    public static final int FLD_PO_COUNTER = 4;
    public static final int FLD_ORDER_NUMBER = 5;
    public static final int FLD_NAME = 6;
    public static final int FLD_PHONE = 7;
    public static final int FLD_ADDRESS = 8;
    public static final int FLD_CREATION_DATE = 9;
    public static final int FLD_PLAN_TAKEN_DATE = 10;
    public static final int FLD_EXPIRED_DATE = 11;
    public static final int FLD_DOWN_PAYMENT = 12;
    public static final int FLD_RATE = 13;
    public static final int FLD_CASH_CASHIER_ID = 14;
    public static final int FLD_CURRENCY_ID = 15;
    public static final int FLD_PENDING_ORDER_STATUS = 16;
    public static final int FLD_PAYMENT_STATUS = 17;
    public static final int FLD_STATUS_POSTED = 18;


    public static final String[] fieldNames = {
        
        "CASH_PENDING_ORDER_ID",
        "SALES_ID",
        "MEMBER_ID",
        "PO_NUMBER",
        "PO_COUNTER",
        "ORDER_NUMBER",
        "NAME",
        "PHONE",
        "ADDRESS",
        "CREATION_DATE",
        "PLAN_TAKEN_DATE",
        "EXPIRED_DATE",
        "DOWN_PAYMENT",
        
        "RATE",
        "CASH_CASHIER_ID",
        "CURRENCY_ID",
        
        "PENDING_ORDER_STATUS",
        "PAYMENT_STATUS",
        "STATUS_POSTED"
    };
    
    public static final int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_STRING,
        TYPE_INT,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_FLOAT,
        
        TYPE_FLOAT,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        
        TYPE_INT,
        TYPE_INT,
        TYPE_INT
    };
    
   
    // pending order status status
    public static final int STATUS_CLOSED = 0;
    public static final int STATUS_OPEN = 1;
    
    
    //constructor
    public PstPendingOrder() {
    }
    
    public PstPendingOrder(int i) throws DBException {
        super(new PstPendingOrder());
    }
    
    public PstPendingOrder(String sOid) throws DBException {
        super(new PstPendingOrder(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    public PstPendingOrder(long lOid) throws DBException {
        super(new PstPendingOrder(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    public int getFieldSize() {
        return fieldNames.length;
    }
    
    public String getTableName() {
        return TBL_CASH_PENDING_ORDER;
    }
    
    public String[] getFieldNames() {
        return fieldNames;
    }
    
    public int[] getFieldTypes() {
        return fieldTypes;
    }
    
    public String getPersistentName() {
        return new PstPendingOrder().getClass().getName();
    }
    
    public long fetchExc(Entity ent) throws Exception {
        PendingOrder pendingOrder = fetchExc(ent.getOID());
        ent = (Entity) pendingOrder;
        return pendingOrder.getOID();
    }
    
    public long insertExc(Entity ent) throws Exception {
        return insertExc((PendingOrder) ent);
    }
    
    public long updateExc(Entity ent) throws Exception {
        return updateExc((PendingOrder) ent);
    }
    
    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }
    
    public static PendingOrder fetchExc(long oid) throws DBException {
        try {
            PendingOrder pendingOrder = new PendingOrder();
            PstPendingOrder pstPendingOrder = new PstPendingOrder(oid);
            pendingOrder.setOID(oid);
            pendingOrder.setSalesId(pstPendingOrder.getlong(FLD_SALES_ID));
            pendingOrder.setMemberId(pstPendingOrder.getlong(FLD_MEMBER_ID));
            pendingOrder.setPoNumber(pstPendingOrder.getString(FLD_PO_NUMBER));
            pendingOrder.setPoCounter(pstPendingOrder.getInt(FLD_PO_COUNTER));
            pendingOrder.setOrderNumber(pstPendingOrder.getString(FLD_ORDER_NUMBER));
            pendingOrder.setName(pstPendingOrder.getString(FLD_NAME));
            pendingOrder.setPhone(pstPendingOrder.getString(FLD_PHONE));
            pendingOrder.setAddress(pstPendingOrder.getString(FLD_ADDRESS));
            pendingOrder.setCreationDate(pstPendingOrder.getDate(FLD_CREATION_DATE));
            pendingOrder.setPlanTakenDate(pstPendingOrder.getDate(FLD_PLAN_TAKEN_DATE));
            pendingOrder.setExpiredDate(pstPendingOrder.getDate(FLD_EXPIRED_DATE));
            pendingOrder.setDownPayment(pstPendingOrder.getdouble(FLD_DOWN_PAYMENT));
            
            pendingOrder.setRate(pstPendingOrder.getdouble(FLD_RATE));
            pendingOrder.setCashierId(pstPendingOrder.getlong(FLD_CASH_CASHIER_ID));
            pendingOrder.setCurrencyId(pstPendingOrder.getlong(FLD_CURRENCY_ID));
            
            pendingOrder.setPendingOrderStatus(pstPendingOrder.getInt(FLD_PENDING_ORDER_STATUS));
            pendingOrder.setPaymentStatus(pstPendingOrder.getInt(FLD_PAYMENT_STATUS));
            pendingOrder.setStatusPosted(pstPendingOrder.getInt(FLD_STATUS_POSTED));

            return pendingOrder;
        } catch (DBException dbe) {
            System.out.println("error =" + dbe);
            throw dbe;
        } catch (Exception e) {
            System.out.println("error =" + e);
            throw new DBException(new PstPendingOrder(0), DBException.UNKNOWN);
        }
    }
    
    public static long insertExc(PendingOrder pendingOrder) throws DBException {
        try {
            PstPendingOrder pstPendingOrder = new PstPendingOrder(0);
            
            
            pstPendingOrder.setLong(FLD_SALES_ID, pendingOrder.getSalesId());
            pstPendingOrder.setLong(FLD_MEMBER_ID, pendingOrder.getMemberId());
            pstPendingOrder.setString(FLD_PO_NUMBER, pendingOrder.getPoNumber());
            pstPendingOrder.setInt(FLD_PO_COUNTER, pendingOrder.getPoCounter());
            pstPendingOrder.setString(FLD_ORDER_NUMBER, pendingOrder.getOrderNumber());
            pstPendingOrder.setString(FLD_NAME, pendingOrder.getName());
            pstPendingOrder.setString(FLD_PHONE, pendingOrder.getPhone());
            pstPendingOrder.setString(FLD_ADDRESS, pendingOrder.getAddress());
            pstPendingOrder.setDate(FLD_CREATION_DATE, pendingOrder.getCreationDate());
            pstPendingOrder.setDate(FLD_PLAN_TAKEN_DATE, pendingOrder.getPlanTakenDate());
            pstPendingOrder.setDate(FLD_EXPIRED_DATE, pendingOrder.getExpiredDate());
            pstPendingOrder.setDouble(FLD_DOWN_PAYMENT, pendingOrder.getDownPayment());
            
            pstPendingOrder.setDouble(FLD_RATE, pendingOrder.getRate());
            pstPendingOrder.setLong(FLD_CASH_CASHIER_ID, pendingOrder.getCashierId());
            pstPendingOrder.setLong(FLD_CURRENCY_ID, pendingOrder.getCurrencyId());
            
            pstPendingOrder.setInt(FLD_PENDING_ORDER_STATUS, pendingOrder.getPendingOrderStatus());
            pstPendingOrder.setInt(FLD_PAYMENT_STATUS, pendingOrder.getPaymentStatus());
            pstPendingOrder.setInt(FLD_STATUS_POSTED, pendingOrder.getStatusPosted());

            pstPendingOrder.insert();
            pendingOrder.setOID(pstPendingOrder.getlong(FLD_CASH_PENDING_ORDER_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPendingOrder(0), DBException.UNKNOWN);
        }
        return pendingOrder.getOID();
    }

    public static long insertExcByOid(PendingOrder pendingOrder) throws DBException {
        try {
            PstPendingOrder pstPendingOrder = new PstPendingOrder(0);


            pstPendingOrder.setLong(FLD_SALES_ID, pendingOrder.getSalesId());
            pstPendingOrder.setLong(FLD_MEMBER_ID, pendingOrder.getMemberId());
            pstPendingOrder.setString(FLD_PO_NUMBER, pendingOrder.getPoNumber());
            pstPendingOrder.setInt(FLD_PO_COUNTER, pendingOrder.getPoCounter());
            pstPendingOrder.setString(FLD_ORDER_NUMBER, pendingOrder.getOrderNumber());
            pstPendingOrder.setString(FLD_NAME, pendingOrder.getName());
            pstPendingOrder.setString(FLD_PHONE, pendingOrder.getPhone());
            pstPendingOrder.setString(FLD_ADDRESS, pendingOrder.getAddress());
            pstPendingOrder.setDate(FLD_CREATION_DATE, pendingOrder.getCreationDate());
            pstPendingOrder.setDate(FLD_PLAN_TAKEN_DATE, pendingOrder.getPlanTakenDate());
            pstPendingOrder.setDate(FLD_EXPIRED_DATE, pendingOrder.getExpiredDate());
            pstPendingOrder.setDouble(FLD_DOWN_PAYMENT, pendingOrder.getDownPayment());

            pstPendingOrder.setDouble(FLD_RATE, pendingOrder.getRate());
            pstPendingOrder.setLong(FLD_CASH_CASHIER_ID, pendingOrder.getCashierId());
            pstPendingOrder.setLong(FLD_CURRENCY_ID, pendingOrder.getCurrencyId());

            pstPendingOrder.setInt(FLD_PENDING_ORDER_STATUS, pendingOrder.getPendingOrderStatus());
            pstPendingOrder.setInt(FLD_PAYMENT_STATUS, pendingOrder.getPaymentStatus());
            pstPendingOrder.setInt(FLD_STATUS_POSTED, pendingOrder.getStatusPosted());

            pstPendingOrder.insertByOid(pendingOrder.getOID());

            //pendingOrder.setOID(pstPendingOrder.getlong(FLD_CASH_PENDING_ORDER_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPendingOrder(0), DBException.UNKNOWN);
        }
        return pendingOrder.getOID();
    }


    public static long updateExc(PendingOrder pendingOrder) throws DBException {
        try {
            if (pendingOrder.getOID() != 0) {
                PstPendingOrder pstPendingOrder = new PstPendingOrder(pendingOrder.getOID());
                
                pstPendingOrder.setLong(FLD_SALES_ID, pendingOrder.getSalesId());
                pstPendingOrder.setLong(FLD_MEMBER_ID, pendingOrder.getMemberId());
                pstPendingOrder.setString(FLD_PO_NUMBER, pendingOrder.getPoNumber());
                pstPendingOrder.setInt(FLD_PO_COUNTER, pendingOrder.getPoCounter());
                pstPendingOrder.setString(FLD_ORDER_NUMBER, pendingOrder.getOrderNumber());
                pstPendingOrder.setString(FLD_NAME, pendingOrder.getName());
                pstPendingOrder.setString(FLD_PHONE, pendingOrder.getPhone());
                pstPendingOrder.setString(FLD_ADDRESS, pendingOrder.getAddress());
                pstPendingOrder.setDate(FLD_CREATION_DATE, pendingOrder.getCreationDate());
                pstPendingOrder.setDate(FLD_PLAN_TAKEN_DATE, pendingOrder.getPlanTakenDate());
                pstPendingOrder.setDate(FLD_EXPIRED_DATE, pendingOrder.getExpiredDate());
                pstPendingOrder.setDouble(FLD_DOWN_PAYMENT, pendingOrder.getDownPayment());
                
                pstPendingOrder.setDouble(FLD_RATE, pendingOrder.getRate());
                pstPendingOrder.setLong(FLD_CASH_CASHIER_ID, pendingOrder.getCashierId());
                pstPendingOrder.setLong(FLD_CURRENCY_ID, pendingOrder.getCurrencyId());
                
                pstPendingOrder.setInt(FLD_PENDING_ORDER_STATUS, pendingOrder.getPendingOrderStatus());
                pstPendingOrder.setInt(FLD_PAYMENT_STATUS, pendingOrder.getPaymentStatus());
                pstPendingOrder.setInt(FLD_STATUS_POSTED, pendingOrder.getStatusPosted());

                pstPendingOrder.update();
                return pendingOrder.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPendingOrder(0), DBException.UNKNOWN);
        }
        return 0;
    }
    
    public static long deleteExc(long oid) throws DBException {
        try {
            PstPendingOrder pstPendingOrder = new PstPendingOrder(oid);
            pstPendingOrder.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPendingOrder(0), DBException.UNKNOWN);
        }
        return oid;
    }
    
    public static int getCount(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = list(limitStart, recordToGet, whereClause, order);
        return lists.size();
    }
    
    
    /**
     *
     * @param whereClause
     * @return
     */
    public static int getCount(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_CASH_PENDING_ORDER_ID] + ") AS CNT FROM " + TBL_CASH_PENDING_ORDER;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_PENDING_ORDER;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;
                    
                default:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
            }
            System.out.println("sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                PendingOrder pendingOrder = new PendingOrder();
                resultToObject(rs, pendingOrder);
                lists.add(pendingOrder);
            }
            rs.close();
            return lists;
            
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    

    public static double getDp(long oidCashCashier) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_DOWN_PAYMENT] +")" +
            " FROM " + TBL_CASH_PENDING_ORDER + " CPO" +
            " WHERE " + fieldNames[FLD_CASH_CASHIER_ID]+
            " = " + oidCashCashier;

            //if (whereClause != null && whereClause.length() > 0)
               // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    public static void resultToObject(ResultSet rs, PendingOrder pendingOrder) {
        try {
            pendingOrder.setOID(rs.getLong(PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_PENDING_ORDER_ID]));
            pendingOrder.setSalesId(rs.getLong(PstPendingOrder.fieldNames[PstPendingOrder.FLD_SALES_ID]));
            pendingOrder.setMemberId(rs.getLong(PstPendingOrder.fieldNames[PstPendingOrder.FLD_MEMBER_ID]));
            pendingOrder.setPoCounter(rs.getInt(PstPendingOrder.fieldNames[PstPendingOrder.FLD_PO_COUNTER]));
            pendingOrder.setPoNumber(rs.getString(PstPendingOrder.fieldNames[PstPendingOrder.FLD_PO_NUMBER]));
            pendingOrder.setOrderNumber(rs.getString(PstPendingOrder.fieldNames[PstPendingOrder.FLD_ORDER_NUMBER]));
            pendingOrder.setName(rs.getString(PstPendingOrder.fieldNames[PstPendingOrder.FLD_NAME]));
            pendingOrder.setPhone(rs.getString(PstPendingOrder.fieldNames[PstPendingOrder.FLD_PHONE]));
            pendingOrder.setAddress(rs.getString(PstPendingOrder.fieldNames[PstPendingOrder.FLD_ADDRESS]));
            pendingOrder.setCreationDate(rs.getDate(PstPendingOrder.fieldNames[PstPendingOrder.FLD_CREATION_DATE]));
            pendingOrder.setPlanTakenDate(rs.getDate(PstPendingOrder.fieldNames[PstPendingOrder.FLD_PLAN_TAKEN_DATE]));
            pendingOrder.setExpiredDate(rs.getDate(PstPendingOrder.fieldNames[PstPendingOrder.FLD_EXPIRED_DATE]));
            pendingOrder.setDownPayment(rs.getDouble(PstPendingOrder.fieldNames[PstPendingOrder.FLD_DOWN_PAYMENT]));
            
            pendingOrder.setRate(rs.getDouble(PstPendingOrder.fieldNames[PstPendingOrder.FLD_RATE]));
            pendingOrder.setCashierId(rs.getLong(PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_CASHIER_ID]));
            pendingOrder.setCurrencyId(rs.getLong(PstPendingOrder.fieldNames[PstPendingOrder.FLD_CURRENCY_ID]));
            
            pendingOrder.setPendingOrderStatus(rs.getInt(PstPendingOrder.fieldNames[PstPendingOrder.FLD_PENDING_ORDER_STATUS]));
            pendingOrder.setPaymentStatus(rs.getInt(PstPendingOrder.fieldNames[PstPendingOrder.FLD_PAYMENT_STATUS]));
            pendingOrder.setStatusPosted(rs.getInt(PstPendingOrder.fieldNames[PstPendingOrder.FLD_STATUS_POSTED]));


        } catch (Exception e) {
        }
    }
    
    //Discount Type
    public static int DISC_TYPE_PERCENT = 0;
    public static int DISC_TYPE_VALUE = 1;
    
    public static boolean checkOID(long pendingOrderId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_PENDING_ORDER +
            " WHERE " + PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_PENDING_ORDER_ID] +
            " = " + pendingOrderId;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }
    
    /**
     * bobo
     * pembuatan number invoice yang di counter berdasarkan
     * lokasi dan cashier number
     * retrun = TTBBCCCCC
     * TT = tahun
     * BB = bulan
     * CCCCC = counter
     */
    public static String generateNumberInvoice(Date dtNow, long locationId, int cashierNumber, int docType) {
        //Date dtNow = billMain.getBillDate();
        String invoiceNumber = "";
        try {
            invoiceNumber = Formater.formatDate(dtNow, "yy");
            invoiceNumber = invoiceNumber + Formater.formatDate(dtNow, "MM");
            
            int counter = getCounterTransaction(locationId, cashierNumber, docType);
            if (counter > 99999)
                counter = 1;
            
            String maxCounter = "99999";
            int count = maxCounter.length() - String.valueOf(counter).length();
            if (count > 0) {
                for (int k = 0; k < count; k++) {
                    invoiceNumber = invoiceNumber + "0";
                }
            }
            invoiceNumber = invoiceNumber + String.valueOf(counter);
            
        } catch (Exception e) {
            System.out.println("ERR GENERATE INVOICE NUMBER : " + e.toString());
        }
        return invoiceNumber;
    }
    
    /**
     * bobo
     * pencarian counter yang terbesar sesuai dengan lokasi dan cashier number
     * return adalah int counter yang sudah di tambah dengan 1
     */
    public static int getCounterTransaction(long locationId, int cashierNumber, int docType) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT MAX(" + PstPendingOrder.fieldNames[PstPendingOrder.FLD_PO_COUNTER] + ") AS MNT " +
            " FROM " + TBL_CASH_PENDING_ORDER + "  AS BILL INNER JOIN " + PstCashCashier.TBL_CASH_CASHIER + " AS CSH " +
            " ON BILL." + PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_CASHIER_ID] + " = CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID] +
            " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " AS MSTR " +
            " ON CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID] + " = MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID];
            
            //" WHERE BILL." + PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID] + " = "+locationId+
            //" AND MSTR."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER]+"="+cashierNumber+
            //" AND BILL." + PstPendingOrder.fieldNames[PstPendingOrder.FLD_DOC_TYPE] + " = "+docType;
            
            //System.out.println("SQL > "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while (rs.next()) {
                count = rs.getInt("MNT");
            }
            rs.close();
            count = count + 1;
            return count;
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    /**
     *
     * @param srcSaleReport
     * @return
     */
    public static int getCountPendingOrder(SrcSaleReport srcSaleReport) {
        DBResultSet dbrs = null;
        int cnt = 0;
        try {
            String sql = "SELECT COUNT(PO." +PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_PENDING_ORDER_ID]+") AS CNT "+
            " FROM " + PstPendingOrder.TBL_CASH_PENDING_ORDER + " AS PO " +
            " INNER JOIN " + PstCashCashier.TBL_CASH_CASHIER+ " AS CC ON " +
            " PO." + PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_CASHIER_ID] +
            " = CC." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID] +
            " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER+ " AS CM ON " +
            " CC." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID] +
            " = CM." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID] +
            " WHERE PO." + PstPendingOrder.fieldNames[PstPendingOrder.FLD_CREATION_DATE] + " BETWEEN '" + Formater.formatDate(srcSaleReport.getDateFrom(), "yyyy-MM-dd 00:00:01") + "'" +
            " AND '" + Formater.formatDate(srcSaleReport.getDateTo(), "yyyy-MM-dd 23:59:59") + "'";
            
            if(srcSaleReport.getLocationId()!=0){
                sql = sql + " AND CM." + PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID]+"="+srcSaleReport.getLocationId();
            }
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                cnt = rs.getInt(1);
            }
            
        } catch (Exception e) {
            System.out.println("Err : " + e.toString());
        }
        return cnt;
    }
    
    /**
     *
     * @param srcSaleReport
     * @param start
     * @param recordToGet
     * @return
     */
    public static Vector getDataPendingOrder(SrcSaleReport srcSaleReport, int start, int recordToGet) {
        DBResultSet dbrs = null;
        Vector list = new Vector(1, 1);
        try {
            String sql = "SELECT PO.* " +
            " FROM " + PstBillMain.TBL_CASH_BILL_MAIN + " AS PO " +
            " INNER JOIN " + PstCashCashier.TBL_CASH_CASHIER+ " AS CC ON " +
            " PO." + PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_CASHIER_ID] +
            " = CC." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID] +
            " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER+ " AS CM ON " +
            " CC." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID] +
            " = CM." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID] +
            " WHERE PO." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE] + " BETWEEN '" + Formater.formatDate(srcSaleReport.getDateFrom(), "yyyy-MM-dd 00:00:01") + "'" +
            " AND '" + Formater.formatDate(srcSaleReport.getDateTo(), "yyyy-MM-dd 23:59:59") + "'"+
            " AND ("+
                PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]+"=0 AND "+
                PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]+"=0"+" AND "+
                PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]+"=1"+    
            ")";
            
            if(srcSaleReport.getLocationId()!=0){
                sql = sql + " AND CM." + PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID]+"="+srcSaleReport.getLocationId();
            }
            
            if(srcSaleReport.getCurrencyOid() != 0)
            {
                sql = sql + " AND PO." + PstPendingOrder.fieldNames[PstPendingOrder.FLD_CURRENCY_ID]+"="+srcSaleReport.getCurrencyOid();                
            }
            
            if (start == 0 && recordToGet == 0)
                sql = sql + "";
            else
                sql = sql + " LIMIT " + start + "," + recordToGet;
            System.out.println("List Search Pending Order : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector vect = new Vector(1,1);
                BillMain bill = new BillMain();
                PstBillMain.resultToObject(rs, bill);
                list.add(bill);
            }
            
        } catch (Exception e) {
            System.out.println("Err : " + e.toString());
        }
        return list;
    }
    
    
    /**
     *
     * @return
     */
    public static Vector getDataPendingOrderUsed(SrcSaleReport srcSaleReport, int start, int recordToGet) {
        DBResultSet dbrs = null;
        Vector list = new Vector(1, 1);
        try {
            String sql = "SELECT CM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]+",CM."+PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]+", CO.* " +
            " FROM " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CM " +
            " INNER JOIN " + PstPendingOrder.TBL_CASH_PENDING_ORDER + " AS CO ON " +
            " CM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_PENDING_ORDER_ID] +
            " = CO." + PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_PENDING_ORDER_ID] +
            " WHERE CM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE] + " BETWEEN '" + Formater.formatDate(srcSaleReport.getDateFrom(), "yyyy-MM-dd 00:00:01") + "'" +
            " AND '" + Formater.formatDate(srcSaleReport.getDateTo(), "yyyy-MM-dd 23:59:59") + "'";
            
            if(srcSaleReport.getLocationId()!=0){
                sql = sql + " AND CM." + PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID]+"="+srcSaleReport.getLocationId();
            }
            
            if (start == 0 && recordToGet == 0)
                sql = sql + "";
            else
                sql = sql + " LIMIT " + start + "," + recordToGet;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector vect = new Vector(1,1);
                PendingOrder pendingOrder = new PendingOrder();
                BillMain bill = new BillMain();
                resultToObject(rs, pendingOrder);
                vect.add(pendingOrder);
                
                bill.setBillDate(rs.getDate(1));
                bill.setInvoiceNumber(rs.getString(2));
                vect.add(bill);
                
                list.add(vect);
            }
            
        } catch (Exception e) {
            System.out.println("Err : " + e.toString());
        }
        return list;
    }
    
    /**
     *
     * @param srcSaleReport
     * @return
     */
    public static int getCountPendingOrderUsed(SrcSaleReport srcSaleReport) {
        DBResultSet dbrs = null;
        int cnt = 0;
        try {
            String sql = "SELECT COUNT(CO." +PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_PENDING_ORDER_ID]+") AS CNT "+
            " FROM " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CM " +
            " INNER JOIN " + PstPendingOrder.TBL_CASH_PENDING_ORDER + " AS CO ON " +
            " CM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_PENDING_ORDER_ID] +
            " = CO." + PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_PENDING_ORDER_ID] +
            " WHERE CM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE] + " BETWEEN '" + Formater.formatDate(srcSaleReport.getDateFrom(), "yyyy-MM-dd 00:00:01") + "'" +
            " AND '" + Formater.formatDate(srcSaleReport.getDateTo(), "yyyy-MM-dd 23:59:59") + "'";
            
            if(srcSaleReport.getLocationId()!=0){
                sql = sql + " AND CM." + PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID]+"="+srcSaleReport.getLocationId();
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                cnt = rs.getInt(1);
            }
            
        } catch (Exception e) {
            System.out.println("Err : " + e.toString());
        }
        return cnt;
    }
    
    public static double getDpValue(long billMainId){
        double value = 0;
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT PO."+PstPendingOrder.fieldNames[PstPendingOrder.FLD_DOWN_PAYMENT]+
            " FROM "+PstPendingOrder.TBL_CASH_PENDING_ORDER+" AS PO "+
            " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS BM "+
            " ON PO."+PstPendingOrder.fieldNames[PstPendingOrder.FLD_CASH_PENDING_ORDER_ID]+
            " =  BM."+PstBillMain.fieldNames[PstBillMain.FLD_CASH_PENDING_ORDER_ID]+
            " WHERE BM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+
            " = "+billMainId;
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            if (rs.next()) {
                value = rs.getDouble(1);
            }
            
        } catch (Exception e) {
            System.out.println("Err : " + e.toString());
        }
        return value;
    }
    
}
