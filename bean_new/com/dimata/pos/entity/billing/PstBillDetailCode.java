/* Generated by Together */

package com.dimata.pos.entity.billing;

import com.dimata.posbo.db.DBException;
import com.dimata.posbo.db.DBHandler;
import com.dimata.posbo.db.DBResultSet;
import com.dimata.posbo.db.I_DBInterface;
import com.dimata.posbo.db.I_DBType;

/* package java */
/* package qdep */
import java.sql.ResultSet;
import java.util.Vector;

//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;
import com.dimata.posbo.entity.warehouse.*;
import com.dimata.posbo.form.warehouse.*;
import com.dimata.posbo.entity.masterdata.*;

public class PstBillDetailCode extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language
{
    //public static final String TBL_CASH_BILL_DETAIL_CODE = "CASH_BILL_DETAIL_CODE";
    public static final String TBL_CASH_BILL_DETAIL_CODE = "cash_bill_detail_code";

    public static final int FLD_CASH_BILL_DETAIL_CODE_ID  = 0 ;
    public static final int FLD_SALE_ITEM_ID    = 1 ;
    public static final int FLD_STOCK_CODE         = 2 ;
    public static final int FLD_STOCK_VALUE         = 3 ;
    public static final int FLD_DISPATCH_MATERIAL_ITEM_CODE_ID        = 4 ;

    public static final String[] fieldNames =
    {
        "CASH_BILL_DETAIL_CODE_ID",
        "SALE_ITEM_ID",
        "STOCK_CODE",
        "VALUE",
        "DISPATCH_MATERIAL_ITEM_CODE_ID"

    };

    public static final  int[] fieldTypes =
    {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_STRING,
        TYPE_FLOAT,
        TYPE_LONG

    };

    public static final int UPDATE_STATUS_NONE=0;
    public static final int UPDATE_STATUS_INSERTED=1;
    public static final int UPDATE_STATUS_UPDATED=2;
    public static final int UPDATE_STATUS_DELETED=3;
     //constructor
    public PstBillDetailCode (){
    }

    public PstBillDetailCode (int i) throws DBException {
        super(new PstBillDetailCode());
    }

    public PstBillDetailCode (String sOid) throws DBException {
        super(new PstBillDetailCode(0));
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        else
            return;
    }

     public PstBillDetailCode (long lOid) throws DBException {
        super(new PstBillDetailCode(0));
        String sOid="0";
        try {
            sOid = String.valueOf(lOid);
        }catch(Exception e) {
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
		else
			return;
	 }

    public int getFieldSize(){
	   return fieldNames.length;
	 }

    public String getTableName(){
	   return TBL_CASH_BILL_DETAIL_CODE;
	}

	public String[] getFieldNames(){
		return fieldNames;
	}

	public int[] getFieldTypes(){
		return fieldTypes;
	}

	public String getPersistentName(){
		return new PstBillDetailCode().getClass().getName();
	}

    public long fetchExc(Entity ent) throws Exception{
        BillDetailCode billDetailCode = fetchExc(ent.getOID());
        ent = (Entity)billDetailCode;
        return billDetailCode.getOID();
    }

    public long insertExc(Entity ent) throws Exception{
        return insertExc((BillDetailCode) ent);
    }

    public long updateExc(Entity ent) throws Exception{
        return updateExc((BillDetailCode) ent);
    }

    public long deleteExc(Entity ent) throws Exception{
        if(ent==null){
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
     }

    public static BillDetailCode fetchExc(long oid) throws DBException
    {
        try
        {
            BillDetailCode billDetailCode = new BillDetailCode();
            PstBillDetailCode pstBillDetail = new PstBillDetailCode(oid);
            billDetailCode.setOID(oid);

            billDetailCode.setSaleItemId (pstBillDetail.getlong(FLD_SALE_ITEM_ID));
            billDetailCode.setStockCode (pstBillDetail.getString(FLD_STOCK_CODE));
            billDetailCode.setValue(pstBillDetail.getdouble(FLD_STOCK_VALUE));
            billDetailCode.setDpMaterialItemCodeId(pstBillDetail.getlong(FLD_DISPATCH_MATERIAL_ITEM_CODE_ID));
            
            return billDetailCode;
       	}
        catch(DBException dbe)
        {
            System.out.println("error ="+dbe);
            throw dbe;
	}
        catch(Exception e)
        {
            System.out.println("error ="+e);
            throw new DBException(new PstBillDetailCode(0),DBException.UNKNOWN);
	}
    }

    public static long insertExc(BillDetailCode billDetailCode) throws DBException{
        try{
            PstBillDetailCode pstBillDetail = new PstBillDetailCode(0);

            pstBillDetail.setLong(FLD_SALE_ITEM_ID,billDetailCode.getSaleItemId ());
            pstBillDetail.setString (FLD_STOCK_CODE,billDetailCode.getStockCode ());
            pstBillDetail.setDouble(FLD_STOCK_VALUE, billDetailCode.getValue());
            pstBillDetail.setLong(FLD_DISPATCH_MATERIAL_ITEM_CODE_ID, billDetailCode.getDpMaterialItemCodeId());
            
            pstBillDetail.insert();
            billDetailCode.setOID(pstBillDetail.getlong(FLD_CASH_BILL_DETAIL_CODE_ID));
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstBillDetailCode(0),DBException.UNKNOWN);
        }
        return billDetailCode.getOID();
    }

    public static long insertExcByOid(BillDetailCode billDetailCode) throws DBException{
        try{
            PstBillDetailCode pstBillDetail = new PstBillDetailCode(0);

            pstBillDetail.setLong(FLD_SALE_ITEM_ID,billDetailCode.getSaleItemId ());
            pstBillDetail.setString (FLD_STOCK_CODE,billDetailCode.getStockCode ());
            pstBillDetail.setDouble(FLD_STOCK_VALUE, billDetailCode.getValue());
            pstBillDetail.setLong(FLD_DISPATCH_MATERIAL_ITEM_CODE_ID, billDetailCode.getDpMaterialItemCodeId());
            
            pstBillDetail.insertByOid(billDetailCode.getOID());
            //billDetailCode.setOID(pstBillDetail.getlong(FLD_CASH_BILL_DETAIL_CODE_ID));
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstBillDetailCode(0),DBException.UNKNOWN);
        }
        return billDetailCode.getOID();
    }

    public static long updateExc(BillDetailCode billDetailCode) throws DBException{
     try{
        if(billDetailCode.getOID() != 0){
            PstBillDetailCode pstBillDetail = new PstBillDetailCode(billDetailCode.getOID());
            pstBillDetail.setLong(FLD_SALE_ITEM_ID,billDetailCode.getSaleItemId ());
            pstBillDetail.setString (FLD_STOCK_CODE,billDetailCode.getStockCode ());
            pstBillDetail.setDouble(FLD_STOCK_VALUE, billDetailCode.getValue());
            pstBillDetail.setLong(FLD_DISPATCH_MATERIAL_ITEM_CODE_ID, billDetailCode.getDpMaterialItemCodeId());
            
            pstBillDetail.update();
            return billDetailCode.getOID();
          }
        }catch(DBException dbe){
			throw dbe;
		}catch(Exception e){
			throw new DBException(new PstBillDetailCode(0),DBException.UNKNOWN);
		}
		return 0;
    }

    public static long deleteExc(long oid) throws DBException{
        try{
              PstBillDetailCode pstBillDetail = new PstBillDetailCode(oid);
              pstBillDetail.delete();
        }catch(DBException dbe){
			throw dbe;
		}catch(Exception e){
			throw new DBException(new PstBillDetailCode(0),DBException.UNKNOWN);
		}
		return oid;
	}

    public static Vector listAll(){
		return list(0, 500, "","");
	}

	public static Vector list(int limitStart,int recordToGet, String whereClause, String order){
		Vector lists = new Vector();
		DBResultSet dbrs = null;
		try {
			String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL_CODE;
			if(whereClause != null && whereClause.length() > 0)
				sql = sql + " WHERE " + whereClause;
			if(order != null && order.length() > 0)
				sql = sql + " ORDER BY " + order;

			switch (DBHandler.DBSVR_TYPE) {
			case DBHandler.DBSVR_MYSQL :
					if(limitStart == 0 && recordToGet == 0)
						sql = sql + "";
					else
						sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
				 break;
			case DBHandler.DBSVR_POSTGRESQL :
 					if(limitStart == 0 && recordToGet == 0)
						sql = sql + "";
					else
						sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
				 break;
			case DBHandler.DBSVR_SYBASE :
				 break;
			case DBHandler.DBSVR_ORACLE :
				 break;
			case DBHandler.DBSVR_MSSQL :
				 break;

			default:
                if(limitStart == 0 && recordToGet == 0)
					sql = sql + "";
				else
					sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
			}
            dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();
			while(rs.next()) {
				BillDetailCode billDetailCode = new BillDetailCode();
				resultToObject(rs, billDetailCode);
				lists.add(billDetailCode);
			}
			rs.close();
			return lists;

		}catch(Exception e) {
			System.out.println(e);
		}finally {
			DBResultSet.close(dbrs);
		}
			return new Vector();
	}

        /**
         * Ari_wiweka 20130702
         * untuk list stock code
         */
        public static Vector getListStockCode(long oidMaterial, int limitStart, int recordToGet, String orderBy) {
        Vector result = new Vector(1, 1);
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT MIC." + PstDispatchStockCode.fieldNames[PstDispatchStockCode.FLD_DISPATCH_MATERIAL_ITEM_ID] +
                    " , M." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] +
                    " , MIC." + PstDispatchStockCode.fieldNames[PstDispatchStockCode.FLD_STOCK_CODE] +
                    " FROM " + PstDispatchStockCode.TBL_POS_DISPATCH_MATERIAL_CODE + " MIC " +
                    " INNER JOIN " + PstMaterial.TBL_MATERIAL + " M " +
                    " ON MIC." + PstDispatchStockCode.fieldNames[PstDispatchStockCode.FLD_DISPATCH_MATERIAL_ITEM_ID] +
                    " = M." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID];

            sql = "SELECT * FROM (" + sql + ") TMP" +
                    " WHERE " +PstDispatchStockCode.fieldNames[PstDispatchStockCode.FLD_STOCK_CODE]+ " NOT IN " +
                    "(SELECT " +PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_STOCK_CODE]+ " FROM " +TBL_CASH_BILL_DETAIL_CODE+ ")"+
                    " AND " +PstDispatchStockCode.fieldNames[PstDispatchStockCode.FLD_DISPATCH_MATERIAL_ITEM_ID]+ " = '" +oidMaterial+ "'";

            //sql = sql + " ORDER BY " + orderBy;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;
                default:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
            }

            System.out.println("list item " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector vt = new Vector(1, 1);
                Material material = new Material();
                DispatchStockCode dispatchStockCode = new DispatchStockCode();


                //dispatchStockCode.setOID(rs.getLong(1));
                dispatchStockCode.setDispatchMaterialItemId(rs.getLong(1));
                dispatchStockCode.setStockCode(rs.getString(3));
                vt.add(dispatchStockCode);

                material.setName(rs.getString(2));
                vt.add(material);

                result.add(vt);
            }
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

        /**
         * Untuk mencari jumlah serial number untuk suatu barang
         * Ari_wiweka 20130702
         *
         * @param whereClause
         * @return
         */
        public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_CASH_BILL_DETAIL_CODE_ID] + ") FROM " + TBL_CASH_BILL_DETAIL_CODE;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    public static void resultToObject(ResultSet rs, BillDetailCode billDetailCode)
    {
        try
        {

            billDetailCode.setOID(rs.getLong(PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_CASH_BILL_DETAIL_CODE_ID]));
            billDetailCode.setSaleItemId (rs.getLong(PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_SALE_ITEM_ID]));
            billDetailCode.setStockCode (rs.getString(PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_STOCK_CODE]));
            billDetailCode.setValue(rs.getDouble(PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_STOCK_VALUE]));
            billDetailCode.setDpMaterialItemCodeId(rs.getLong(PstBillDetail.fieldNames[PstBillDetailCode.FLD_DISPATCH_MATERIAL_ITEM_CODE_ID]));
            
        }
        catch(Exception e){ }
    }

    //Discount Type
    public static int DISC_TYPE_PERCENT = 0;
    public static int DISC_TYPE_VALUE   = 1;

    public static boolean checkOID(long billDetailCodeId)
    {
        DBResultSet dbrs = null;
        boolean result = false;
        try
        {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL_CODE +
                " WHERE " + PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_CASH_BILL_DETAIL_CODE_ID] +
                " = " + billDetailCodeId;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while(rs.next())
            {
                result = true;
            }
            rs.close();
        }
        catch(Exception e)
        {
            System.out.println("err : "+e.toString());
        }
        finally
        {
            DBResultSet.close(dbrs);
        }
        return result;
    }


    public static BillDetailCode getBillDetailCode(long lBillDetailOid)
    {
        BillDetailCode objResult = new BillDetailCode();
        DBResultSet dbrs = null;
        try
        {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL_CODE +
                         " WHERE " + PstBillDetailCode.fieldNames[PstBillDetailCode.FLD_SALE_ITEM_ID] +
                         " = " + lBillDetailOid;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next())
            {
                resultToObject(rs, objResult);
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        finally
        {
            DBResultSet.close(dbrs);

        }
        return objResult;
    }


     public static long deleteBillDetailCodeByDfCodeId(long oidDispatchStockCode) {

        String sql = "DELETE FROM" + TBL_CASH_BILL_DETAIL_CODE
                + " WHERE " + fieldNames[FLD_DISPATCH_MATERIAL_ITEM_CODE_ID] + " = '" + oidDispatchStockCode + "'";

        try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {
        }
        return oidDispatchStockCode;
    }

   public static Vector getSerialCodeReceiveBy(long oidMat, long oidRec) {
        Vector list = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT DCODE .* FROM " + TBL_CASH_BILL_DETAIL_CODE + " AS DCODE " +
                    " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " AS IT " +
                    " ON IT.CASH_BILL_DETAIL_ID = DCODE.SALE_ITEM_ID " +
                    " WHERE IT.CASH_BILL_DETAIL_ID = " + oidRec +
                    " AND IT.MATERIAL_ID = " + oidMat;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillDetailCode billDetailCode = new BillDetailCode();
                resultToObject(rs, billDetailCode);
                list.add(billDetailCode);
            }
        } catch (Exception e) {
            System.out.println("");
        }
        return list;
    }


   public static Vector getSerialCodeReturSale(long oidMat, long oidCashBillMainId) {
        /**
         *  SELECT CBDC.* FROM cash_bill_detail_code AS CBDC
            INNER JOIN cash_bill_detail AS CBD ON CBD.CASH_BILL_DETAIL_ID=CBDC.SALE_ITEM_ID
            INNER JOIN cash_bill_main AS CBM ON CBM.CASH_BILL_MAIN_ID=CBD.CASH_BILL_MAIN_ID
            WHERE CBM.CASH_BILL_MAIN_ID='504404547934328462' AND CBD.MATERIAL_ID='504404384580961000';
         */
        Vector list = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql =" SELECT CBDC.* FROM "+TBL_CASH_BILL_DETAIL_CODE+" AS CBDC "+
            " INNER JOIN "+ PstBillDetail.TBL_CASH_BILL_DETAIL +" AS CBD ON CBD.CASH_BILL_DETAIL_ID=CBDC.SALE_ITEM_ID "+
            " INNER JOIN "+ PstBillMain.TBL_CASH_BILL_MAIN +" AS CBM ON CBM.CASH_BILL_MAIN_ID=CBD.CASH_BILL_MAIN_ID "+
            " WHERE CBM.CASH_BILL_MAIN_ID='"+oidCashBillMainId+"' AND CBD.MATERIAL_ID='"+oidMat+"'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillDetailCode billDetailCode = new BillDetailCode();
                resultToObject(rs, billDetailCode);
                list.add(billDetailCode);
            }
        } catch (Exception e) {
            System.out.println("");
        }
        return list;
    }

}
