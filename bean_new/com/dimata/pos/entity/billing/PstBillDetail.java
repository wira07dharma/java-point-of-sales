/* Generated by Together */
package com.dimata.pos.entity.billing;

import com.dimata.interfaces.BOCashier.I_BillingDetail;
import com.dimata.pos.entity.balance.PstCashCashier;
import static com.dimata.pos.entity.billing.PstBillMain.FLD_CASH_CASHIER_ID;
import static com.dimata.pos.entity.billing.PstBillMain.fieldNames;
import com.dimata.pos.entity.masterCashier.PstCashMaster;
import com.dimata.posbo.db.DBException;
import com.dimata.posbo.db.DBHandler;
import com.dimata.posbo.db.DBResultSet;
import com.dimata.posbo.db.I_DBInterface;
import com.dimata.posbo.db.I_DBType;

/* package java */

/* package qdep */
import java.sql.ResultSet;
import java.util.Vector;

//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;

import com.dimata.posbo.entity.masterdata.*;
import com.dimata.util.Formater;
import java.awt.image.DataBuffer;
import java.util.Date;
import org.json.JSONObject;

public class PstBillDetail extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language, I_BillingDetail {
    //public static final String TBL_CASH_BILL_DETAIL = "CASH_BILL_DETAIL";

    public static final String TBL_CASH_BILL_DETAIL = "cash_bill_detail";
    public static final int FLD_BILL_DETAIL_ID = 0;
    public static final int FLD_BILL_MAIN_ID = 1;
    public static final int FLD_UNIT_ID = 2;
    public static final int FLD_MATERIAL_ID = 3;
    public static final int FLD_QUANTITY = 4;
    public static final int FLD_ITEM_PRICE = 5;
    public static final int FLD_DISC_TYPE = 6;
    public static final int FLD_DISC = 7;
    public static final int FLD_TOTAL_PRICE = 8;
    public static final int FLD_SKU = 9;
    public static final int FLD_ITEM_NAME = 10;
    public static final int FLD_MATERIAL_TYPE = 11;
    public static final int FLD_COST = 12;
    public static final int FLD_DISC_PCT = 13;
    public static final int FLD_QTY_STOCK = 14;
    public static final int FLD_ITEM_PRICE_STOCK = 15;
    public static final int FLD_DISC_GLOBAL = 16;

    //Ari wiweka 20130719
    public static final int FLD_DISC1 = 17;
    public static final int FLD_DISC2 = 18;
    public static final int FLD_TOTAL_DISC = 19;
    public static final int FLD_NOTE = 20;

    public static final int FLD_STATUS = 21;
    public static final int FLD_STATUS_PRINT = 22;
    public static final int FLD_LENGTH_OF_ORDER = 23;
    public static final int FLD_LENGTH_OF_FINISH_ORDER = 24;

    public static final int FLD_QTY_REQUEST_SO = 25;
    
    public static final int FLD_MATERIAL_DETAIL_ID = 26;
    public static final int FLD_SUPPLIER_ID = 27;
    //added by dewok 20180329 for jewelry
    public static final int FLD_BERAT = 28;
    public static final int FLD_SUSUTAN_WEIGHT = 29;
    public static final int FLD_SUSUTAN_PRICE = 30;
    public static final int FLD_TAX_PCT = 31;
    public static final int FLD_SERVICE_PCT = 32;
    public static final int FLD_TOTAL_TAX = 33;
    public static final int FLD_TOTAL_SERVICE = 34;
    //added by dewok 20180725 for jewelry
    public static final int FLD_ADDITIONAL_WEIGHT = 35;
    public static final int FLD_LATEST_ITEM_PRICE = 36;

    public static final String[] fieldNames = {
        "CASH_BILL_DETAIL_ID",
        "CASH_BILL_MAIN_ID",
        "UNIT_ID",
        "MATERIAL_ID",
        "QTY",
        "ITEM_PRICE",
        "DISC_TYPE",
        "DISC",
        "TOTAL_PRICE",
        "SKU",
        "ITEM_NAME",
        "MATERIAL_TYPE",
        "COST", "DISC_PCT",
        "QTY_STOCK", "ITEM_PRICE_STOCK",
        "DISC_GLOBAL",
        "DISC1",
        "DISC2",
        "TOTAL_DISC",
        "NOTE",
        "STATUS",
        "STATUS_PRINT",
        "LENGTH_OF_ORDER",
        "LENGTH_OF_ORDER_FINISH",
        "QTY_REQUEST_SO",
        "MATERIAL_DETAIL_ID",
        "SUPPLIER_ID",
        //added by dewok 20180329 for jewelry
        "BERAT",
        "SUSUTAN_WEIGHT",
        "SUSUTAN_PRICE",
        "TAX_PCT",
        "SERVICE_PCT",
        "TOTAL_TAX",
        "TOTAL_SERVICE",
        "ADDITIONAL_WEIGHT",
        "LATEST_ITEM_PRICE"
    };
    public static final int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_STRING,
        TYPE_INT,
        TYPE_INT,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_FLOAT,
        TYPE_LONG,
        TYPE_LONG,
        //added by dewok 20180329 for jewelry
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT
    };
    public static final int TYPE_DISC_VAL = 0;
    public static final int TYPE_DISC_PCT = 1;
    public static final int UPDATE_STATUS_NONE = 0;
    public static final int UPDATE_STATUS_INSERTED = 1;
    public static final int UPDATE_STATUS_UPDATED = 2;
    public static final int UPDATE_STATUS_DELETED = 3;

    //constructor
    public PstBillDetail() {
    }

    public PstBillDetail(int i) throws DBException {
        super(new PstBillDetail());
    }

    public PstBillDetail(String sOid) throws DBException {
        super(new PstBillDetail(0));
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public PstBillDetail(long lOid) throws DBException {
        super(new PstBillDetail(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_CASH_BILL_DETAIL;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstBillDetail().getClass().getName();
    }

    public long fetchExc(Entity ent) throws Exception {
        Billdetail billdetail = fetchExc(ent.getOID());
        ent = (Entity) billdetail;
        return billdetail.getOID();
    }

    public long insertExc(Entity ent) throws Exception {
        return insertExc((Billdetail) ent);
    }

    public long updateExc(Entity ent) throws Exception {
        return updateExc((Billdetail) ent);
    }

    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static Billdetail fetchExc(long oid) throws DBException {
        try {
            Billdetail billdetail = new Billdetail();
            PstBillDetail pstBillDetail = new PstBillDetail(oid);
            billdetail.setOID(oid);
            billdetail.setBillMainId(pstBillDetail.getlong(FLD_BILL_MAIN_ID));
            billdetail.setUnitId(pstBillDetail.getlong(FLD_UNIT_ID));
            billdetail.setMaterialId(pstBillDetail.getlong(FLD_MATERIAL_ID));
            billdetail.setItemName(pstBillDetail.getString(FLD_ITEM_NAME));
            billdetail.setItemPrice(pstBillDetail.getdouble(FLD_ITEM_PRICE));
            billdetail.setDiscType(pstBillDetail.getInt(FLD_DISC_TYPE));
            billdetail.setDisc(pstBillDetail.getdouble(FLD_DISC));
            billdetail.setQty(pstBillDetail.getdouble(FLD_QUANTITY));
            billdetail.setTotalPrice(pstBillDetail.getdouble(FLD_TOTAL_PRICE));
            billdetail.setSku(pstBillDetail.getString(FLD_SKU));
            billdetail.setMaterialType(pstBillDetail.getInt(FLD_MATERIAL_TYPE));
            billdetail.setCost(pstBillDetail.getdouble(FLD_COST));
            billdetail.setDiscPct(pstBillDetail.getdouble(FLD_DISC_PCT));
            billdetail.setQtyStock(pstBillDetail.getdouble(FLD_QTY_STOCK));
            billdetail.setItemPriceStock(pstBillDetail.getdouble(FLD_ITEM_PRICE_STOCK));
            billdetail.setDiscGlobal(pstBillDetail.getdouble(FLD_DISC_GLOBAL));
            billdetail.setDisc1(pstBillDetail.getdouble(FLD_DISC1));
            billdetail.setDisc2(pstBillDetail.getdouble(FLD_DISC2));
            billdetail.setTotalDisc(pstBillDetail.getdouble(FLD_TOTAL_DISC));
            billdetail.setSku(pstBillDetail.getString(FLD_SKU));
            billdetail.setNote(pstBillDetail.getString(FLD_NOTE));
            billdetail.setStatus(pstBillDetail.getInt(FLD_STATUS));
            billdetail.setStatusPrint(pstBillDetail.getInt(FLD_STATUS_PRINT));
            billdetail.setLengthOrder(pstBillDetail.getDate(FLD_LENGTH_OF_ORDER));
            billdetail.setQtyRequestSo(pstBillDetail.getdouble(FLD_QTY_REQUEST_SO));
            billdetail.setMaterialDetailId(pstBillDetail.getlong(FLD_MATERIAL_DETAIL_ID));
            billdetail.setSupplierId(pstBillDetail.getlong(FLD_SUPPLIER_ID));
            //added by dewok 20180329 for jewelry
            billdetail.setBerat(pstBillDetail.getdouble(FLD_BERAT));
            billdetail.setSusutanWeight(pstBillDetail.getdouble(FLD_SUSUTAN_WEIGHT));
            billdetail.setSusutanPrice(pstBillDetail.getdouble(FLD_SUSUTAN_PRICE));
            billdetail.setTaxPct(pstBillDetail.getdouble(FLD_TAX_PCT));
            billdetail.setServicePct(pstBillDetail.getdouble(FLD_SERVICE_PCT));
            billdetail.setTotalTax(pstBillDetail.getdouble(FLD_TOTAL_TAX));
            billdetail.setTotalService(pstBillDetail.getdouble(FLD_TOTAL_SERVICE));
            //added by dewok 20180725 for jewelry
            billdetail.setAdditionalWeight(pstBillDetail.getdouble(FLD_ADDITIONAL_WEIGHT));
            billdetail.setLatestItemPrice(pstBillDetail.getdouble(FLD_LATEST_ITEM_PRICE));
            return billdetail;
        } catch (DBException dbe) {
            System.out.println("error =" + dbe);
            throw dbe;
        } catch (Exception e) {
            System.out.println("error =" + e);
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(Billdetail billdetail) throws DBException {
        try {
            PstBillDetail pstBillDetail = new PstBillDetail(0);
            pstBillDetail.setLong(FLD_BILL_MAIN_ID, billdetail.getBillMainId());
            pstBillDetail.setLong(FLD_UNIT_ID, billdetail.getUnitId());
            pstBillDetail.setLong(FLD_MATERIAL_ID, billdetail.getMaterialId());
            pstBillDetail.setString(FLD_ITEM_NAME, billdetail.getItemName());
            pstBillDetail.setDouble(FLD_ITEM_PRICE, billdetail.getItemPrice());
            pstBillDetail.setInt(FLD_DISC_TYPE, billdetail.getDiscType());
            pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
            pstBillDetail.setDouble(FLD_QUANTITY, billdetail.getQty());
            pstBillDetail.setDouble(FLD_TOTAL_PRICE, billdetail.getTotalPrice());
            pstBillDetail.setString(FLD_SKU, billdetail.getSku());
            pstBillDetail.setInt(FLD_MATERIAL_TYPE, billdetail.getMaterialType());
            pstBillDetail.setDouble(FLD_COST, billdetail.getCost());
            pstBillDetail.setDouble(FLD_DISC_PCT, billdetail.getDiscPct());
            pstBillDetail.setDouble(FLD_QTY_STOCK, billdetail.getQtyStock());
            pstBillDetail.setDouble(FLD_ITEM_PRICE_STOCK, billdetail.getItemPriceStock());
            pstBillDetail.setDouble(FLD_DISC1, billdetail.getDisc1());
            pstBillDetail.setDouble(FLD_DISC2, billdetail.getDisc2());
            pstBillDetail.setDouble(FLD_TOTAL_DISC, billdetail.getTotalDisc());
            pstBillDetail.setString(FLD_NOTE, billdetail.getNote());
            pstBillDetail.setInt(FLD_STATUS, billdetail.getStatus());
            pstBillDetail.setInt(FLD_STATUS_PRINT, billdetail.getStatusPrint());
            pstBillDetail.setDate(FLD_LENGTH_OF_ORDER, billdetail.getLengthOrder());
            pstBillDetail.setDouble(FLD_QTY_REQUEST_SO, billdetail.getQtyRequestSo());
            pstBillDetail.setLong(FLD_MATERIAL_DETAIL_ID, billdetail.getMaterialDetailId());
            pstBillDetail.setLong(FLD_SUPPLIER_ID, billdetail.getSupplierId());
            //added by dewok 20180329 for jewelry
            pstBillDetail.setDouble(FLD_BERAT, billdetail.getBerat());
            pstBillDetail.setDouble(FLD_SUSUTAN_WEIGHT, billdetail.getSusutanWeight());
            pstBillDetail.setDouble(FLD_SUSUTAN_PRICE, billdetail.getSusutanPrice());
            pstBillDetail.setDouble(FLD_TAX_PCT, billdetail.getTaxPct());
            pstBillDetail.setDouble(FLD_SERVICE_PCT, billdetail.getServicePct());
            pstBillDetail.setDouble(FLD_TOTAL_TAX, billdetail.getTotalTax());
            pstBillDetail.setDouble(FLD_TOTAL_SERVICE, billdetail.getTotalService());
            //added by dewok 20180725 for jewelry
            pstBillDetail.setDouble(FLD_ADDITIONAL_WEIGHT, billdetail.getAdditionalWeight());
            pstBillDetail.setDouble(FLD_LATEST_ITEM_PRICE, billdetail.getLatestItemPrice());
            pstBillDetail.insert();
            billdetail.setOID(pstBillDetail.getlong(FLD_BILL_DETAIL_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return billdetail.getOID();
    }

    public static long insertExcByOid(Billdetail billdetail) throws DBException {
        try {
            PstBillDetail pstBillDetail = new PstBillDetail(0);
            pstBillDetail.setLong(FLD_BILL_MAIN_ID, billdetail.getBillMainId());
            pstBillDetail.setLong(FLD_UNIT_ID, billdetail.getUnitId());
            pstBillDetail.setLong(FLD_MATERIAL_ID, billdetail.getMaterialId());
            pstBillDetail.setString(FLD_ITEM_NAME, billdetail.getItemName());
            pstBillDetail.setDouble(FLD_ITEM_PRICE, billdetail.getItemPrice());
            pstBillDetail.setInt(FLD_DISC_TYPE, billdetail.getDiscType());
            pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
            pstBillDetail.setDouble(FLD_QUANTITY, billdetail.getQty());
            pstBillDetail.setDouble(FLD_TOTAL_PRICE, billdetail.getTotalPrice());
            pstBillDetail.setString(FLD_SKU, billdetail.getSku());
            pstBillDetail.setInt(FLD_MATERIAL_TYPE, billdetail.getMaterialType());
            pstBillDetail.setDouble(FLD_COST, billdetail.getCost());
            pstBillDetail.setDouble(FLD_DISC_PCT, billdetail.getDiscPct());
            pstBillDetail.setDouble(FLD_QTY_STOCK, billdetail.getQtyStock());
            pstBillDetail.setDouble(FLD_ITEM_PRICE_STOCK, billdetail.getItemPriceStock());
            pstBillDetail.setDouble(FLD_DISC_GLOBAL, billdetail.getDiscGlobal());
            pstBillDetail.setDouble(FLD_DISC1, billdetail.getDisc1());
            pstBillDetail.setDouble(FLD_DISC2, billdetail.getDisc2());
            pstBillDetail.setDouble(FLD_TOTAL_DISC, billdetail.getTotalDisc());
            pstBillDetail.setString(FLD_NOTE, billdetail.getNote());
            pstBillDetail.setInt(FLD_STATUS, billdetail.getStatus());
            pstBillDetail.setInt(FLD_STATUS_PRINT, billdetail.getStatusPrint());
            pstBillDetail.setDate(FLD_LENGTH_OF_ORDER, billdetail.getLengthOrder());
            pstBillDetail.setDouble(FLD_QTY_REQUEST_SO, billdetail.getQtyRequestSo());
            pstBillDetail.setLong(FLD_MATERIAL_DETAIL_ID, billdetail.getMaterialDetailId());
            pstBillDetail.setLong(FLD_SUPPLIER_ID, billdetail.getSupplierId());
            pstBillDetail.insertByOid(billdetail.getOID());
            //billdetail.setOID(pstBillDetail.getlong(FLD_BILL_DETAIL_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return billdetail.getOID();
    }

    public static long updateExc(Billdetail billdetail) throws DBException {
        try {
            if (billdetail.getOID() != 0) {
                PstBillDetail pstBillDetail = new PstBillDetail(billdetail.getOID());
                pstBillDetail.setLong(FLD_BILL_MAIN_ID, billdetail.getBillMainId());
                pstBillDetail.setLong(FLD_UNIT_ID, billdetail.getUnitId());
                pstBillDetail.setLong(FLD_MATERIAL_ID, billdetail.getMaterialId());
                pstBillDetail.setString(FLD_ITEM_NAME, billdetail.getItemName());
                pstBillDetail.setDouble(FLD_ITEM_PRICE, billdetail.getItemPrice());
                pstBillDetail.setInt(FLD_DISC_TYPE, billdetail.getDiscType());
                pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
                pstBillDetail.setDouble(FLD_QUANTITY, billdetail.getQty());
                pstBillDetail.setDouble(FLD_TOTAL_PRICE, billdetail.getTotalPrice());
                pstBillDetail.setString(FLD_SKU, billdetail.getSku());
                pstBillDetail.setInt(FLD_MATERIAL_TYPE, billdetail.getMaterialType());
                pstBillDetail.setDouble(FLD_COST, billdetail.getCost());
                pstBillDetail.setDouble(FLD_DISC_PCT, billdetail.getDiscPct());
                pstBillDetail.setDouble(FLD_QTY_STOCK, billdetail.getQtyStock());
                pstBillDetail.setDouble(FLD_ITEM_PRICE_STOCK, billdetail.getItemPriceStock());
                pstBillDetail.setDouble(FLD_DISC_GLOBAL, billdetail.getDiscGlobal());
                pstBillDetail.setDouble(FLD_DISC1, billdetail.getDisc1());
                pstBillDetail.setDouble(FLD_DISC2, billdetail.getDisc2());
                pstBillDetail.setDouble(FLD_TOTAL_DISC, billdetail.getTotalDisc());
                pstBillDetail.setString(FLD_NOTE, billdetail.getNote());
                pstBillDetail.setInt(FLD_STATUS, billdetail.getStatus());
                pstBillDetail.setInt(FLD_STATUS_PRINT, billdetail.getStatusPrint());
                pstBillDetail.setDate(FLD_LENGTH_OF_ORDER, billdetail.getLengthOrder());
                pstBillDetail.setDouble(FLD_QTY_REQUEST_SO, billdetail.getQtyRequestSo());
                pstBillDetail.setLong(FLD_MATERIAL_DETAIL_ID, billdetail.getMaterialDetailId());
                pstBillDetail.setLong(FLD_SUPPLIER_ID, billdetail.getSupplierId());
                //added by dewok 20180329 for jewelry
                pstBillDetail.setDouble(FLD_BERAT, billdetail.getBerat());
                pstBillDetail.setDouble(FLD_SUSUTAN_WEIGHT, billdetail.getSusutanWeight());
                pstBillDetail.setDouble(FLD_SUSUTAN_PRICE, billdetail.getSusutanPrice());
                pstBillDetail.setDouble(FLD_TAX_PCT, billdetail.getTaxPct());
                pstBillDetail.setDouble(FLD_SERVICE_PCT, billdetail.getServicePct());
                pstBillDetail.setDouble(FLD_TOTAL_TAX, billdetail.getTotalTax());
                pstBillDetail.setDouble(FLD_TOTAL_SERVICE, billdetail.getTotalService());
                //added by dewok 20180725 for jewelry
                pstBillDetail.setDouble(FLD_ADDITIONAL_WEIGHT, billdetail.getAdditionalWeight());
                pstBillDetail.setDouble(FLD_LATEST_ITEM_PRICE, billdetail.getLatestItemPrice());
                pstBillDetail.update();
                return billdetail.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long oid) throws DBException {
        try {
            PstBillDetail pstBillDetail = new PstBillDetail(oid);
            pstBillDetail.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return oid;
    }

    public static Vector listAll() {
        return list(0, 500, "", "");
    }

    public static Vector listTmp(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            System.out.println(sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Billdetail billdetail = new Billdetail();
                resultToObject(rs, billdetail);
                lists.add(billdetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * di cek dimana yang makai seperti ini?
     *
     * @param limitStart
     * @param recordToGet
     * @param whereClause
     * @param order
     * @return
     */
    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("List BillDetail : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                //Vector temp = new Vector();
                Billdetail billdetail = new Billdetail();

                //resultToObject(rs, billdetail);
                billdetail.setOID(rs.getLong("CASH_BILL_DETAIL_ID"));
                billdetail.setBillMainId(rs.getLong("CASH_BILL_MAIN_ID"));
                billdetail.setUnitId(rs.getLong("UNIT_ID"));
                billdetail.setMaterialId(rs.getLong("MATERIAL_ID"));
                billdetail.setSku(rs.getString("SKU"));
                billdetail.setItemName(rs.getString("ITEM_NAME"));
                billdetail.setQty(rs.getInt("QTY"));
                billdetail.setItemPrice(rs.getDouble("ITEM_PRICE"));
                billdetail.setDisc(rs.getDouble("DISC"));

                billdetail.setDisc1(rs.getDouble("DISC1"));
                billdetail.setDisc2(rs.getDouble("DISC2"));
                billdetail.setTotalDisc(rs.getDouble("TOTAL_DISC"));

                billdetail.setTotalPrice(rs.getDouble("TOTAL_PRICE"));
                billdetail.setNote(rs.getString("NOTE"));
                billdetail.setQtyRequestSo(rs.getDouble(fieldNames[FLD_QTY_REQUEST_SO]));
                //temp.add(billdetail);
                // lists.add(temp);
                //added by dewok 20180330
                billdetail.setBerat(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_BERAT]));
                billdetail.setSusutanWeight(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_SUSUTAN_WEIGHT]));
                billdetail.setSusutanPrice(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_SUSUTAN_PRICE]));
                billdetail.setTaxPct(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TAX_PCT]));
                billdetail.setServicePct(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_SERVICE_PCT]));
                billdetail.setTotalTax(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_TAX]));
                billdetail.setCost(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_COST]));
                billdetail.setMaterialType(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_TYPE]));
                billdetail.setTotalService(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_SERVICE]));
                billdetail.setDiscPct(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_PCT]));
                //added by dewok 20180725
                billdetail.setAdditionalWeight(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ADDITIONAL_WEIGHT]));
                billdetail.setLatestItemPrice(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_LATEST_ITEM_PRICE]));
                lists.add(billdetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * untuk mencari list item barang yang di pesan
     *
     * @param limitStart
     * @param recordToGet
     * @param whereClause
     * @param order
     * @return
     */
    public static Vector listDetailInvoicing(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector();
                Billdetail billdetail = new Billdetail();

                //resultToObject(rs, billdetail);
                billdetail.setOID(rs.getLong("CASH_BILL_DETAIL_ID"));
                billdetail.setBillMainId(rs.getLong("CASH_BILL_MAIN_ID"));
                billdetail.setUnitId(rs.getLong("UNIT_ID"));
                billdetail.setMaterialId(rs.getLong("MATERIAL_ID"));
                billdetail.setSku(rs.getString("SKU"));
                billdetail.setItemName(rs.getString("ITEM_NAME"));
                billdetail.setQty(rs.getInt("QTY"));
                billdetail.setItemPrice(rs.getDouble("ITEM_PRICE"));
                billdetail.setDisc1(rs.getDouble("DISC1"));
                billdetail.setDisc2(rs.getDouble("DISC2"));
                billdetail.setDisc(rs.getDouble("DISC"));
                billdetail.setTotalDisc(rs.getDouble("TOTAL_DISC"));
                billdetail.setTotalPrice(rs.getDouble("TOTAL_PRICE"));
                billdetail.setNote(rs.getString("NOTE"));
                billdetail.setQtyRequestSo(rs.getDouble(fieldNames[FLD_QTY_REQUEST_SO]));
                temp.add(billdetail);
                lists.add(temp);
                //lists.add(billdetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * Ari wiweka 20130721 List material for cashier
     *
     * @param rs
     * @param billdetail
     */
    public static Vector listMat(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT CD.*, "
                    + " UNT." + PstUnit.fieldNames[PstUnit.FLD_CODE]
                    + ", pm." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
                    + " FROM " + TBL_CASH_BILL_DETAIL + " AS CD INNER JOIN "
                    + PstUnit.TBL_P2_UNIT + " AS UNT ON "
                    + " CD." + fieldNames[PstBillDetail.FLD_UNIT_ID] + " = UNT." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
                    + " INNER JOIN pos_material AS pm ON pm.MATERIAL_ID=CD.MATERIAL_ID";

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector();
                Billdetail billdetail = new Billdetail();
                Unit unit = new Unit();
                //resultToObject(rs, billdetail);
                billdetail.setOID(rs.getLong("CASH_BILL_DETAIL_ID"));
                billdetail.setBillMainId(rs.getLong("CASH_BILL_MAIN_ID"));
                billdetail.setUnitId(rs.getLong("UNIT_ID"));
                billdetail.setMaterialId(rs.getLong("MATERIAL_ID"));
                billdetail.setSku(rs.getString("SKU"));
                billdetail.setItemName(rs.getString("ITEM_NAME"));
                billdetail.setQty(rs.getInt("QTY"));
                billdetail.setItemPrice(rs.getDouble("ITEM_PRICE"));
                billdetail.setDisc1(rs.getDouble("DISC1"));
                billdetail.setDisc2(rs.getDouble("DISC2"));
                billdetail.setDisc(rs.getDouble("DISC"));
                billdetail.setTotalDisc(rs.getDouble("TOTAL_DISC"));
                billdetail.setTotalPrice(rs.getDouble("TOTAL_PRICE"));
                billdetail.setNote(rs.getString("NOTE"));
                billdetail.setBarcodeMat(rs.getLong("BARCODE"));
                billdetail.setStatus(rs.getInt("STATUS"));
                billdetail.setQtyRequestSo(rs.getDouble("QTY_REQUEST_SO"));
                temp.add(billdetail);

                unit.setCode(rs.getString("CODE"));
                temp.add(unit);

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

	public static Vector listPemesanan(int limitStart, int recordToGet, String whereClause, String order) {
		Vector lists = new Vector(1,1);
		DBResultSet dbrs = null;
		try {
			String sql = "SELECT"
					+ " CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]
					+ " ,CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]
					+ " ,BM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
					+ " ,BM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO]
					+ " ,MT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
					+ " ,MT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
					+ " ,MT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
					+ " ,MT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
					+ " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
					+ " ,UN." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
					+ " ,UN." + PstUnit.fieldNames[PstUnit.FLD_NAME]
					+ " ,MK." + PstMerk.fieldNames[PstMerk.FLD_NAME]
					+ " ,MS." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_QTY]
					+ " FROM " + PstBillDetail.TBL_CASH_BILL_DETAIL + " AS CBD"
					+ " INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS MT"
					+ " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]
					+ " = MT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
					+ " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS BM"
					+ " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
					+ " = BM.`CASH_BILL_MAIN_ID`"
					+ " INNER JOIN " + PstCategory.TBL_CATEGORY + " AS CAT"
					+ " ON MT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
					+ " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
					+ " INNER JOIN " + PstUnit.TBL_P2_UNIT + " AS UN"
					+ " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID]
					+ " = UN." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
					+ " INNER JOIN " + PstMerk.TBL_MAT_MERK + " AS MK"
					+ " ON MT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
					+ " = MK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
					+ " INNER JOIN " + PstMaterialStock.TBL_MATERIAL_STOCK + " AS MS"
					+ " ON MS." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_MATERIAL_UNIT_ID]
					+ " = MT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
                    System.out.println(" Cek Stock Query : "+sql);
			dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();
			while (rs.next()) {
				Vector temp = new Vector();
				Material material = new Material();
				Unit unit = new Unit();
				BillMain bm = new BillMain();
				Category cat = new Category();
				MaterialStock ms = new MaterialStock();
				Merk mk = new Merk();
				Billdetail bd = new Billdetail();
				
				bm.setOID(rs.getLong("BM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]));
				bm.setInvoiceNo(rs.getString("BM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO]));
				
				material.setOID(rs.getLong("MT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]));
				material.setSku(rs.getString("MT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]));
				material.setName(rs.getString("MT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]));
				material.setName(rs.getString("MT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]));

				cat.setName(rs.getString("CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]));
				
				unit.setOID(rs.getLong("UN." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]));
				unit.setName(rs.getString("UN." + PstUnit.fieldNames[PstUnit.FLD_NAME]));
				
				mk.setName(rs.getString("MK." + PstMerk.fieldNames[PstMerk.FLD_NAME]));
				
				ms.setQty(rs.getInt("MS." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_QTY])); 

				bd.setOID(rs.getLong("CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID])); 
				bd.setQty(rs.getDouble("CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]));
				
				temp.add(bm);
				temp.add(material);
				temp.add(cat);
				temp.add(unit);
				temp.add(mk);
				temp.add(ms);
				temp.add(bd);
				lists.add(temp);
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			DBResultSet.close(dbrs);
		}
		return lists;
	}
	public static Vector listPemesananDokumen(int limitStart, int recordToGet, String whereClause, String order) {
		Vector lists = new Vector(1,1);
		DBResultSet dbrs = null;
		try {
			String sql = "SELECT"
					+ " CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]
					+ " ,CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]
					+ " ,BM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
					+ " ,BM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO]
					+ " ,MT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
					+ " ,MT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]
					+ " ,MT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
					+ " ,MT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
					+ " ,CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
					+ " ,UN." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
					+ " ,UN." + PstUnit.fieldNames[PstUnit.FLD_NAME]
					+ " ,MK." + PstMerk.fieldNames[PstMerk.FLD_NAME]
					+ " FROM " + PstBillDetail.TBL_CASH_BILL_DETAIL + " AS CBD"
					+ " INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS MT"
					+ " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]
					+ " = MT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
					+ " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS BM"
					+ " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
					+ " = BM.`CASH_BILL_MAIN_ID`"
					+ " INNER JOIN " + PstCategory.TBL_CATEGORY + " AS CAT"
					+ " ON MT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
					+ " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
					+ " INNER JOIN " + PstUnit.TBL_P2_UNIT + " AS UN"
					+ " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID]
					+ " = UN." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
					+ " INNER JOIN " + PstMerk.TBL_MAT_MERK + " AS MK"
					+ " ON MT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
					+ " = MK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
			dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();
			while (rs.next()) {
				Vector temp = new Vector();
				Material material = new Material();
				Unit unit = new Unit();
				BillMain bm = new BillMain();
				Category cat = new Category();
				Merk mk = new Merk();
				Billdetail bd = new Billdetail();
				
				bm.setOID(rs.getLong("BM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]));
				bm.setInvoiceNo(rs.getString("BM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO]));
				
				material.setOID(rs.getLong("MT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]));
				material.setSku(rs.getString("MT." + PstMaterial.fieldNames[PstMaterial.FLD_SKU]));
				material.setName(rs.getString("MT." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]));
				material.setName(rs.getString("MT." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]));

				cat.setName(rs.getString("CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]));
				
				unit.setOID(rs.getLong("UN." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]));
				unit.setName(rs.getString("UN." + PstUnit.fieldNames[PstUnit.FLD_NAME]));
				
				mk.setName(rs.getString("MK." + PstMerk.fieldNames[PstMerk.FLD_NAME]));
				

				bd.setOID(rs.getLong("CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID])); 
				bd.setQty(rs.getDouble("CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]));
				
				temp.add(bm);
				temp.add(material);
				temp.add(cat);
				temp.add(unit);
				temp.add(mk);
				temp.add(bd);
				lists.add(temp);
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			DBResultSet.close(dbrs);
		}
		return lists;
	}
	
    public static Vector listJoinMaterialUnit(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT"
                    + " cbd." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + ","
                    + " pm." + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ","
                    + " pm." + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ","
                    + " SUM(cbd." + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ") AS " + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ","
                    + " SUM(cbd." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ") AS " + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ","
                    + " pu." + PstUnit.fieldNames[PstUnit.FLD_NAME] + " AS UNIT"
                    + " FROM"
                    + " " + PstBillDetail.TBL_CASH_BILL_DETAIL + " AS cbd"
                    + " INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS pm "
                    + " ON cbd." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + " = pm." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + ""
                    + " INNER JOIN " + PstUnit.TBL_P2_UNIT + " AS pu"
                    + " ON pm." + PstMaterial.fieldNames[PstMaterial.FLD_DEFAULT_STOCK_UNIT_ID] + " = pu." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID] + "";

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector();
                Billdetail billDetail = new Billdetail();
                Material material = new Material();
                Unit unit = new Unit();

                billDetail.setMaterialId(rs.getLong("" + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + ""));
                billDetail.setQty(rs.getDouble("" + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ""));
                billDetail.setTotalPrice(rs.getDouble("" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ""));
                temp.add(billDetail);

                material.setSku(rs.getString("" + PstMaterial.fieldNames[PstMaterial.FLD_SKU] + ""));
                material.setName(rs.getString("" + PstMaterial.fieldNames[PstMaterial.FLD_NAME] + ""));
                temp.add(material);

                unit.setName(rs.getString("UNIT"));
                temp.add(unit);

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static void resultToObject(ResultSet rs, Billdetail billdetail) {
        try {
            billdetail.setOID(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]));
            billdetail.setBillMainId(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]));
            billdetail.setUnitId(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID]));
            billdetail.setMaterialId(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]));
            billdetail.setItemName(rs.getString(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_NAME]));
            billdetail.setItemPrice(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE]));
            billdetail.setDiscType(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_TYPE]));
            billdetail.setDisc(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC]));
            billdetail.setQty(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]));
            billdetail.setTotalPrice(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]));
            billdetail.setSku(rs.getString(PstBillDetail.fieldNames[PstBillDetail.FLD_SKU]));
            billdetail.setMaterialType(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_TYPE]));
            billdetail.setCost(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_COST]));
            billdetail.setDiscPct(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_PCT]));
            billdetail.setQtyStock(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_QTY_STOCK]));
            billdetail.setItemPriceStock(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE_STOCK]));
            billdetail.setDiscGlobal(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_GLOBAL]));
            billdetail.setDisc1(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC1]));
            billdetail.setDisc2(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC2]));
            billdetail.setTotalDisc(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_DISC]));
            billdetail.setNote(rs.getString(PstBillDetail.fieldNames[PstBillDetail.FLD_NOTE]));
            billdetail.setStatus(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS]));
            billdetail.setStatusPrint(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS_PRINT]));
            //added by dewok 20180329 for jewelry
            billdetail.setBerat(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_BERAT]));
            billdetail.setSusutanWeight(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_SUSUTAN_WEIGHT]));
            billdetail.setSusutanPrice(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_SUSUTAN_PRICE]));
            billdetail.setTaxPct(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TAX_PCT]));
            billdetail.setServicePct(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_SERVICE_PCT]));
            billdetail.setTotalTax(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_TAX]));
            billdetail.setTotalService(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_SERVICE]));
            //added by dewok 20180725 for jewelry
            billdetail.setAdditionalWeight(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ADDITIONAL_WEIGHT]));
            billdetail.setLatestItemPrice(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_LATEST_ITEM_PRICE]));
        } catch (Exception e) {
            System.out.println("err>>> : " + e.toString());
        }
    }
    
    public static int getCountRealizationTunai(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = ""
                    + "SELECT SUM(detail.QTY)"
                    + " FROM cash_bill_detail AS detail"
                    + " INNER JOIN cash_bill_main AS main"
                    + " ON main.CASH_BILL_MAIN_ID = detail.CASH_BILL_MAIN_ID"
                    + " AND ((main.DOC_TYPE = '0'"
                    + " AND main.TRANSACTION_TYPE = '0'"
                    + " AND main.TRANSACTION_STATUS = '0')"
                    + " OR (main.DOC_TYPE = '0'"
                    + " AND main.TRANSACTION_TYPE = '1'"
                    + " AND main.TRANSACTION_STATUS = '1')"
                    + " OR (main.DOC_TYPE = '0'"
                    + " AND main.TRANSACTION_TYPE = '1'"
                    + " AND main.TRANSACTION_STATUS = '0'))"
                    + " INNER JOIN marketing_promotion_detail_subject AS subjek"
                    + " ON detail.MATERIAL_ID = subjek.MATERIAL_ID"
                    + " INNER JOIN marketing_promotion_detail AS marde"
                    + " ON marde.MARKETING_PROMOTION_DETAIL_ID = subjek.MARKETING_PROMOTION_DETAIL_ID"
                    + " INNER JOIN marketing_promotion_location AS marloc"
                    + " INNER JOIN marketing_promotion AS marpro"
                    + " ON marpro.MARKETING_PROMOTION_ID = marloc.MARKETING_PROMOTION_ID"
                    + " AND marloc.LOCATION_ID = main.LOCATION_ID"
                    + " AND marpro.MARKETING_PROMOTION_START <= main.BILL_DATE"
                    + " AND marpro.MARKETING_PROMOTION_END >= main.BILL_DATE";
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static int getCountRealizationReturnTunai(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = ""
                    + "SELECT SUM(detail.QTY)"
                    + " FROM cash_bill_detail AS detail"
                    + " INNER JOIN cash_bill_main AS main"
                    + " ON main.CASH_BILL_MAIN_ID = detail.CASH_BILL_MAIN_ID"
                    + " AND ((main.DOC_TYPE = '1'"
                    + " AND main.TRANSACTION_TYPE = '0'"
                    + " AND main.TRANSACTION_STATUS = '0')"
                    + " OR (main.DOC_TYPE = '1'"
                    + " AND main.TRANSACTION_TYPE = '1'"
                    + " AND main.TRANSACTION_STATUS = '1'))"
                    + " INNER JOIN marketing_promotion_detail_subject AS subjek"
                    + " ON detail.MATERIAL_ID = subjek.MATERIAL_ID"
                    + " INNER JOIN marketing_promotion_detail AS marde"
                    + " ON marde.MARKETING_PROMOTION_DETAIL_ID = subjek.MARKETING_PROMOTION_DETAIL_ID"
                    + " INNER JOIN marketing_promotion_location AS marloc"
                    + " INNER JOIN marketing_promotion AS marpro"
                    + " ON marpro.MARKETING_PROMOTION_ID = marloc.MARKETING_PROMOTION_ID"
                    + " AND marloc.LOCATION_ID = main.LOCATION_ID"
                    + " AND marpro.MARKETING_PROMOTION_START <= main.BILL_DATE"
                    + " AND marpro.MARKETING_PROMOTION_END >= main.BILL_DATE";
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    //Discount Type
    public static int DISC_TYPE_PERCENT = 1;
    public static int DISC_TYPE_VALUE = 0;

    public static boolean checkOID(long billDetailId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]
                    + " = " + billDetailId;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }
	
	public static int getCountListPemesanan(String whereClause){
		int count = 0;
		DBResultSet dbrs = null;
		try {
			String sql = "SELECT"
					+ " COUNT(BM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO] + " ) AS CNT "
					+ " FROM " + PstBillDetail.TBL_CASH_BILL_DETAIL + " AS CBD"
					+ " INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS MT"
					+ " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]
					+ " = MT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
					+ " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS BM"
					+ " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
					+ " = BM.`CASH_BILL_MAIN_ID`"
					+ " INNER JOIN " + PstCategory.TBL_CATEGORY + " AS CAT"
					+ " ON MT." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
					+ " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
					+ " INNER JOIN " + PstUnit.TBL_P2_UNIT + " AS UN"
					+ " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID]
					+ " = UN." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
					+ " INNER JOIN " + PstMerk.TBL_MAT_MERK + " AS MK"
					+ " ON MT." + PstMaterial.fieldNames[PstMaterial.FLD_MERK_ID]
					+ " = MK." + PstMerk.fieldNames[PstMerk.FLD_MERK_ID]
					+ " INNER JOIN " + PstMaterialStock.TBL_MATERIAL_STOCK + " AS MS"
					+ " ON MS." + PstMaterialStock.fieldNames[PstMaterialStock.FLD_MATERIAL_UNIT_ID]
					+ " = MT." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
           
			dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();
			while (rs.next()) {
				count = rs.getInt("CNT");
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			DBResultSet.close(dbrs);
		}
		return count;
	}

    public static int getCount(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_BILL_DETAIL_ID] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getSummaryCost(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_COST] + " * " + fieldNames[FLD_QUANTITY] + ")  FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(0);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getTotalPrice(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_TOTAL_PRICE] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(0);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static double getTotalItemPrice(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_ITEM_PRICE] + "*"+fieldNames[FLD_QUANTITY]+") AS "+fieldNames[FLD_TOTAL_PRICE]+" FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static double getTotalPrices(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_TOTAL_PRICE] + "+TOTAL_TAX+TOTAL_SERVICE) AS "+fieldNames[FLD_TOTAL_PRICE]+" FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
     public static double getTotalTaxService(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(TAX_VALUE+SERVICE_VALUE) AS "+fieldNames[FLD_TOTAL_PRICE]+" FROM " + PstBillMain.TBL_CASH_BILL_MAIN;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static double getTotalDiscItem(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_DISC] + "*"+fieldNames[FLD_QUANTITY]+") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(0);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * Ari_wiweka 20130730 cek untuk item yang sudah exist
     */
    public static int getCountExist(long oidBillMain, long oidMaterial) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CD." + fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID] + ") "
                    + " FROM " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CM INNER JOIN " + TBL_CASH_BILL_DETAIL + " AS CD "
                    + " ON CM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = CD." + fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE CM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "' "
                    + " AND CD." + fieldNames[PstBillDetail.FLD_MATERIAL_ID] + " = '" + oidMaterial + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    //Menghitung Quantity Stock yang tersisa
    public static double getCountStock(long idBillMain, long matId) {

        double count = 0;
        double sum = 0;
        DBResultSet dbrs = null;
        try {
            // String sql = "SELECT " +PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+ " FROM " +PstBillMain.TBL_CASH_BILL_MAIN+
            //   " WHERE " +PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID]+ " = '"+idBillMain+"'";

            // sql = "SELECT  SUM("+fieldNames[FLD_QUANTITY]+") FROM " +TBL_CASH_BILL_DETAIL+
            //   " WHERE "+ fieldNames[FLD_BILL_MAIN_ID] +" =(" +sql+ ") AND " +fieldNames[FLD_MATERIAL_ID]+ " ='"+matId+"'" ;
            String sql = "SELECT SUM(cd." + fieldNames[FLD_QUANTITY] + ") FROM "
                    + TBL_CASH_BILL_DETAIL + " AS cd INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS cm "
                    + " ON cd." + fieldNames[FLD_BILL_MAIN_ID] + " = cm." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " WHERE cm." + PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID] + " = '" + idBillMain
                    + "' AND cd." + fieldNames[FLD_MATERIAL_ID] + " = '" + matId + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rsTmp = dbrs.getResultSet();
            while (rsTmp.next()) {
                sum = rsTmp.getDouble(1);
            }
            rsTmp.close();
            if (sum == 0) {
                sql = "'0'";
            }

            sql = "SELECT ((SELECT SUM(" + fieldNames[FLD_QUANTITY] + ") FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + fieldNames[FLD_BILL_MAIN_ID] + " ='" + idBillMain
                    + "' AND " + fieldNames[FLD_MATERIAL_ID] + " = '" + matId + "') - (" + sql + ")) AS sisaStock";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getSumTotalItem(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_TOTAL_PRICE] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    public static double getSumTotalItemBruto(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_ITEM_PRICE] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    public static double getTotalCOGS(long lBillMainOid) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_COST]
                    + "*" + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ")"
                    + " FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " = " + lBillMainOid;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static long getCashBillDetailId(long lBillMainOid, long materialId) {
        long count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT (" + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID] + ")"
                    + " FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " = '" + lBillMainOid + "'"
                    + " AND " + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]
                    + " = '" + materialId + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getLong(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * Untuk menghitung total penjualan Ari_wiweka 20130701
     *
     * @param oidCashCashier
     * @return
     */
    public static double getTotalAmount(long oidBillMain) {
        double count = 0;
        double sum = 0;
        DBResultSet dbrs = null;
        try {
            String sql1 = "SELECT SUM(CD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ") FROM " + PstBillDetail.TBL_CASH_BILL_DETAIL + " AS CD "
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CM ON CD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] + " = CM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " WHERE CM." + PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID] + " = '" + oidBillMain + "'";

            dbrs = DBHandler.execQueryResult(sql1);
            ResultSet rsTmp = dbrs.getResultSet();
            while (rsTmp.next()) {
                sum = rsTmp.getDouble(1);
            }

            rsTmp.close();
            if (sum == 0) {
                sql1 = "'0'";
            }

            String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")"
                    + " FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " = " + oidBillMain;

            sql = "SELECT (" + sql + ") - (" + sql1 + ") AS totalJumlah";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * Ari wiweka 20130716 delete bill detail berdasarkan bill main
     *
     * @param oidCashCashier
     * @return
     */
    public static long deleteBillDetail(long oidBillMain) {

        String sql = "DELETE * FROM" + TBL_CASH_BILL_DETAIL
                + " WHERE " + fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "'";

        try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {
        }
        return oidBillMain;
    }

    public static double getReturSales(long oidCashCashier) {
        return getReturSales(oidCashCashier, "");
    }

    public static double getReturSales(long oidCashCashier, String where) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            // String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" +
            String sql = "SELECT SUM(CBM." + PstBillMain.fieldNames[PstBillMain.FLD_RATE] + " * CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")"
                    + //adding tax, service
                    //by mirahu 31122011
                    //adding discount
                    //by opie-eyek 11102012
                    ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE] + " AS TAX_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE] + " AS SERVICE_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT] + " AS DISCOUNT_VALUE"
                    + " FROM " + TBL_CASH_BILL_DETAIL + " CBD"
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " CBM"
                    + " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " = CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " WHERE CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + "= 1"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "!= 2";
                    //+ " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID]
            //+ " = " + oidCashCashier
            if (oidCashCashier == 0) {
                sql = sql + " AND " + where;
            } else {
                sql = sql + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID] + " = " + oidCashCashier;
            }

            sql = sql + //group by cash bill main id
                    //by mirahu 31122011
                    " GROUP BY CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " ORDER BY " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS];

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                //count = rs.getInt(1);
                count += rs.getDouble(1) + rs.getDouble("TAX_VALUE") + rs.getDouble("SERVICE_VALUE") - rs.getDouble("DISCOUNT_VALUE");
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getSumTotalPriceByCategoryAndBillMain(String whereClause) {
        double summary = 0;
        DBResultSet dbrs = null;
        String sql = "";
        try {
            sql = " SELECT"
                    + " SUM(cbd." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ") "
                    + " AS " + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ""
                    + " FROM"
                    + " " + PstBillDetail.TBL_CASH_BILL_DETAIL + " cbd"
                    + " INNER JOIN " + PstMaterial.TBL_MATERIAL + " pm"
                    + " ON cbd." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + " = pm." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + ""
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " cbm"
                    + " ON cbd." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] + "= cbm." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + ""
                    + " INNER JOIN " + PstCategory.TBL_CATEGORY + " pc "
                    + " ON pc." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + " = pm." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID] + "";

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                summary += rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return summary;
    }

    public static double getSumTotalReturnByCategoryAndBillMain(String whereClause) {
        double summary = 0;
        DBResultSet dbrs = null;
        String sql = "";
        try {
            sql = " SELECT"
                    + " SUM(cbd." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ") "
                    + " AS " + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ""
                    + " FROM"
                    + " " + PstBillDetail.TBL_CASH_BILL_DETAIL + " cbd"
                    + " INNER JOIN " + PstMaterial.TBL_MATERIAL + " pm"
                    + " ON cbd." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + " = pm." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + ""
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " cbm"
                    + " ON cbd." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] + "= cbm." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + ""
                    + " INNER JOIN " + PstCategory.TBL_CATEGORY + " pc "
                    + " ON pc." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + " = pm." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID] + "";

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                summary += rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return summary;
    }

    public boolean isCatalogUsed(long oid) {

        String where = fieldNames[FLD_MATERIAL_ID] + "=" + oid;
        int count = getCount(where);

        if (count > 0) {
            return true;
        }
        return false;

    }

    public static int updateStatusItem(long oidBillDetail, int statusOrder) {
        int ud = 0;
        Date now = new Date();
        String sql = "UPDATE " + TBL_CASH_BILL_DETAIL
                + " SET " + fieldNames[FLD_STATUS] + " = '" + statusOrder + "', "
                + fieldNames[FLD_LENGTH_OF_FINISH_ORDER] + " = '" + Formater.formatDate(now, "yyyy-MM-dd hh:mm:ss") + "' "
                + " WHERE " + fieldNames[FLD_BILL_DETAIL_ID] + " = '" + oidBillDetail + "'";

        try {

            DBHandler.execUpdate(sql);

        } catch (Exception e) {
            ud = -1;
        }

        return ud;
    }
    
    //cek material name
public static Vector listMaterialItemConsigment(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT pmd."+PstMaterialDetail.fieldNames[PstMaterialDetail.FLD_MATERIAL_DETAIL_ID]+", pm."+PstMaterial.fieldNames[PstMaterial.FLD_SUPPLIER_ID]+", cbd.*"
//                + " SUM(cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+") as "+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+" "
                + " from "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS cbd "
                + " INNER JOIN "+PstMaterial.TBL_MATERIAL+" As pm "
                + " ON cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+" = pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+""               
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm  "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+" "                
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+""
                + " LEFT JOIN "+PstMaterialDetail.TBL_MATERIALDETAIL+" AS pmd"
                + " ON pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+" = pmd."+PstMaterialDetail.fieldNames[PstMaterialDetail.FLD_MATERIAL_ID]+"";
                            
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            //System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Billdetail billDetail = new Billdetail();
                billDetail.setItemName(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_NAME]+""));
                billDetail.setQty(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+""));
                billDetail.setTotalPrice(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+""));
                billDetail.setDisc(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_DISC]+""));
                billDetail.setSku(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_SKU]+""));
                billDetail.setMaterialDetailId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_DETAIL_ID]+""));
                billDetail.setSupplierId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_SUPPLIER_ID]+""));
                lists.add(billDetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static int updateDiscItem(long oidBillDetail, int statusOrder) {
        int ud = 0;
        Date now = new Date();
        String sql = "UPDATE cash_bill_detail SET disc_global='0' WHERE disc_global IS NULL";
        try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {
            ud = -1;
        }

        String sqlw = "UPDATE cash_bill_detail cd INNER JOIN pos_material AS pm ON cd.MATERIAL_ID=pm.MATERIAL_ID SET cd.ITEM_PRICE_STOCK=pm.AVERAGE_PRICE, cd.TOTAL_COST=pm.AVERAGE_PRICE*cd.QTY, cd.COST=pm.AVERAGE_PRICE WHERE (cd.item_price_stock=0 OR cd.total_cost=0 OR cd.cost=0)";
        try {
            DBHandler.execUpdate(sqlw);
        } catch (Exception e) {
            ud = -1;
        }

        return ud;
    }

    public static boolean checkUpdateStatusItem(long billDetailId, int statusOrder) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]
                    + " = " + billDetailId
                    + " AND " + PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS]
                    + " = 0";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    public static int updateStatusPrintItem(long oidBillDetail, int statusPrint) {
        int ud = 0;

        String sql = "UPDATE " + TBL_CASH_BILL_DETAIL
                + " SET " + fieldNames[FLD_STATUS_PRINT] + " = '" + statusPrint + "'"
                + " WHERE " + fieldNames[FLD_BILL_DETAIL_ID] + " = '" + oidBillDetail + "'";

        try {

            DBHandler.execUpdate(sql);

        } catch (Exception e) {
            ud = -1;
        }

        return ud;
    }
    
    
    public static double getSumTotalPriceByCategoryAndBillMainVoid(String whereClause) {
        double summary = 0;
        DBResultSet dbrs = null;
        String sql = "";
        try {
            sql = " SELECT"
                    + " SUM(cbd." + PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_TOTAL_PRICE] + ") "
                    + " AS " + PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_TOTAL_PRICE] + ""
                    + " FROM"
                    + " " + PstBillDetailVoid.TBL_CASH_BILL_DETAIL + " cbd"
                    + " INNER JOIN " + PstMaterial.TBL_MATERIAL + " pm"
                    + " ON cbd." + PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_MATERIAL_ID] + " = pm." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + ""
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " cbm"
                    + " ON cbd." + PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_BILL_MAIN_ID] + "= cbm." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + ""
                    + " INNER JOIN " + PstCategory.TBL_CATEGORY + " pc "
                    + " ON pc." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID] + " = pm." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID] + "";

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                summary += rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return summary;
    }
	
	  public static long insertByOid(Billdetail billdetail) throws DBException {
      try {
         PstBillDetail pstBillDetail = new PstBillDetail(0);
         pstBillDetail.setLong(FLD_BILL_MAIN_ID, billdetail.getBillMainId());
         pstBillDetail.setLong(FLD_UNIT_ID, billdetail.getUnitId());
         pstBillDetail.setLong(FLD_MATERIAL_ID, billdetail.getMaterialId());
         pstBillDetail.setDouble(FLD_QUANTITY, billdetail.getQty());
         pstBillDetail.setDouble(FLD_ITEM_PRICE, billdetail.getItemPrice());
         pstBillDetail.setInt(FLD_DISC_TYPE, billdetail.getDiscType());
         pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
         pstBillDetail.setDouble(FLD_TOTAL_PRICE, billdetail.getTotalPrice());
         pstBillDetail.setString(FLD_SKU, billdetail.getSku());
         pstBillDetail.setString(FLD_ITEM_NAME, billdetail.getItemName());
         pstBillDetail.setInt(FLD_MATERIAL_TYPE, billdetail.getMaterialType());
         pstBillDetail.setDouble(FLD_COST, billdetail.getCost());
         pstBillDetail.setDouble(FLD_DISC_PCT, billdetail.getDiscPct());
         pstBillDetail.setDouble(FLD_QTY_STOCK, billdetail.getQtyStock());
         pstBillDetail.setDouble(FLD_ITEM_PRICE_STOCK, billdetail.getItemPriceStock());
         pstBillDetail.setDouble(FLD_DISC_GLOBAL, billdetail.getDiscGlobal());
         pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
         pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
         pstBillDetail.setDouble(FLD_TOTAL_DISC, billdetail.getTotalDisc());
         pstBillDetail.setString(FLD_NOTE, billdetail.getNote());
         pstBillDetail.setInt(FLD_STATUS, billdetail.getStatus());
         pstBillDetail.setInt(FLD_STATUS_PRINT, billdetail.getStatusPrint());
         pstBillDetail.setDate(FLD_LENGTH_OF_ORDER, billdetail.getLengthOrder());
         pstBillDetail.setDate(FLD_LENGTH_OF_FINISH_ORDER, billdetail.getLengthFinishOrder());
         pstBillDetail.setDouble(FLD_QTY_REQUEST_SO, billdetail.getQtyRequestSo());
         pstBillDetail.setLong(FLD_MATERIAL_DETAIL_ID, billdetail.getMaterialDetailId());
         pstBillDetail.setLong(FLD_SUPPLIER_ID, billdetail.getSupplierId());
         pstBillDetail.setDouble(FLD_BERAT, billdetail.getBerat());
         pstBillDetail.setDouble(FLD_SUSUTAN_WEIGHT, billdetail.getSusutanWeight());
         pstBillDetail.setDouble(FLD_SUSUTAN_PRICE, billdetail.getSusutanPrice());
         pstBillDetail.setDouble(FLD_TAX_PCT, billdetail.getTaxPct());
         pstBillDetail.setDouble(FLD_SERVICE_PCT, billdetail.getServicePct());
         pstBillDetail.setDouble(FLD_TOTAL_TAX, billdetail.getTotalTax());
         pstBillDetail.setDouble(FLD_TOTAL_SERVICE, billdetail.getTotalService());
         pstBillDetail.setDouble(FLD_ADDITIONAL_WEIGHT, billdetail.getAdditionalWeight());
         pstBillDetail.setDouble(FLD_LATEST_ITEM_PRICE, billdetail.getLatestItemPrice());
         pstBillDetail.insertByOid(billdetail.getOID());
      } catch (DBException dbe) {
         throw dbe;
      } catch (Exception e) {
         throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
      }
      return billdetail.getOID();
   }
	
	 public static long syncExc(JSONObject jSONObject){
      long oid = 0;
      if (jSONObject != null){
       oid = jSONObject.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID],0);
         if (oid > 0){
          Billdetail billdetail = new Billdetail();
          billdetail.setOID(jSONObject.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID],0));
          billdetail.setBillMainId(jSONObject.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID],0));
          billdetail.setUnitId(jSONObject.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID],0));
          billdetail.setMaterialId(jSONObject.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID],0));
          billdetail.setQty(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY],0));
          billdetail.setItemPrice(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE],0));
          billdetail.setDiscType(jSONObject.optInt(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_TYPE],0));
          billdetail.setDisc(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC],0));
          billdetail.setTotalPrice(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE],0));
          billdetail.setSku(jSONObject.optString(PstBillDetail.fieldNames[PstBillDetail.FLD_SKU], ""));
          billdetail.setItemName(jSONObject.optString(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_NAME], ""));
          billdetail.setMaterialType(jSONObject.optInt(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_TYPE],0));
          billdetail.setCost(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_COST],0));
          billdetail.setDiscPct(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_PCT],0));
          billdetail.setQtyStock(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_QTY_STOCK],0));
          billdetail.setItemPriceStock(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE_STOCK],0));
          billdetail.setDiscGlobal(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_GLOBAL],0));
          billdetail.setDisc(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC],0));
          billdetail.setDisc(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC],0));
          billdetail.setTotalDisc(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_DISC],0));
          billdetail.setNote(jSONObject.optString(PstBillDetail.fieldNames[PstBillDetail.FLD_NOTE], ""));
          billdetail.setStatus(jSONObject.optInt(PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS],0));
          billdetail.setStatusPrint(jSONObject.optInt(PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS_PRINT],0));
          billdetail.setLengthOrder(Formater.formatDate(jSONObject.optString(PstBillDetail.fieldNames[PstBillDetail.FLD_LENGTH_OF_ORDER],  "0000-00-00"), "yyyy-MM-dd"));
          billdetail.setLengthFinishOrder(Formater.formatDate(jSONObject.optString(PstBillDetail.fieldNames[PstBillDetail.FLD_LENGTH_OF_FINISH_ORDER],  "0000-00-00"), "yyyy-MM-dd"));
          billdetail.setQtyRequestSo(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_QTY_REQUEST_SO],0));
          billdetail.setMaterialDetailId(jSONObject.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_DETAIL_ID],0));
          billdetail.setSupplierId(jSONObject.optLong(PstBillDetail.fieldNames[PstBillDetail.FLD_SUPPLIER_ID],0));
          billdetail.setBerat(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_BERAT],0));
          billdetail.setSusutanWeight(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_SUSUTAN_WEIGHT],0));
          billdetail.setSusutanPrice(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_SUSUTAN_PRICE],0));
          billdetail.setTaxPct(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TAX_PCT],0));
          billdetail.setServicePct(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_SERVICE_PCT],0));
          billdetail.setTotalTax(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_TAX],0));
          billdetail.setTotalService(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_SERVICE],0));
          billdetail.setAdditionalWeight(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ADDITIONAL_WEIGHT],0));
          billdetail.setLatestItemPrice(jSONObject.optDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_LATEST_ITEM_PRICE],0));
         boolean checkOidBilldetail = PstBillDetail.checkOID(oid);
          try{
            if(checkOidBilldetail){
               oid = PstBillDetail.updateExc(billdetail);
            }else{
               oid = PstBillDetail.insertByOid(billdetail);
            }
         }catch(Exception exc){
			 oid = 0;
		 }
         }
      }
   return oid;
   }


}

