/* Generated by Together */
package com.dimata.pos.entity.billing;

/* package java */

/* package qdep */

//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.common.entity.location.PstLocation;
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;

import com.dimata.posbo.db.DBException;
import com.dimata.posbo.db.DBHandler;
import com.dimata.posbo.db.DBResultSet;
import com.dimata.posbo.db.I_DBInterface;
import com.dimata.posbo.db.I_DBType;

/* package java */
import java.util.Vector;

/* package qdep */
import java.sql.ResultSet;
import java.util.Date;
//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.pos.entity.balance.PstCashCashier;
import com.dimata.pos.entity.masterCashier.PstCashMaster;
import com.dimata.util.Formater;

import com.dimata.posbo.entity.admin.*;
import com.dimata.posbo.entity.masterdata.*;
import com.dimata.common.entity.payment.*;
import com.dimata.common.session.report.SessCustomeReport;
import com.dimata.pos.entity.payment.CashCreditCard;
import com.dimata.pos.entity.payment.CashPayments;
import com.dimata.pos.entity.payment.PstCashCreditCard;
import com.dimata.pos.entity.payment.PstCashPayment;
import com.dimata.pos.entity.payment.PstCashReturn;
import com.dimata.posbo.entity.warehouse.PstMatDispatch;
import com.dimata.posbo.entity.warehouse.PstMatDispatchBill;
import com.dimata.posbo.session.report.SessSalesSummaryReport;
import org.json.JSONObject;

public class PstBillMain  extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language {
    //public static final String TBL_CASH_BILL_MAIN = "CASH_BILL_MAIN";

    public static final String TBL_CASH_BILL_MAIN = "cash_bill_main";
    public static final int FLD_BILL_MAIN_ID = 0;
    public static final int FLD_CASH_CASHIER_ID = 1;
    public static final int FLD_LOCATION_ID = 2;
    public static final int FLD_BILL_DATE = 3;
    public static final int FLD_INVOICE_NO = 4;
    public static final int FLD_APPUSER_ID = 5;
    public static final int FLD_SHIFT_ID = 6;
    public static final int FLD_DISC_TYPE = 7;
    public static final int FLD_DISCOUNT = 8;
    public static final int FLD_TAX_PERCENTAGE = 9;
    public static final int FLD_TAX_VALUE = 10;
    public static final int FLD_SERVICE_PCT = 11;
    public static final int FLD_SERVICE_VALUE = 12;
    public static final int FLD_BILL_STATUS = 13;
    public static final int FLD_SALES_CODE = 14;
    public static final int FLD_INVOICE_NUMBER = 15;
    public static final int FLD_INVOICE_COUNTER = 16;
    public static final int FLD_TRANS_TYPE = 17;
    public static final int FLD_DOC_TYPE = 18;
    public static final int FLD_CASH_PENDING_ORDER_ID = 19;
    public static final int FLD_CUSTOMER_ID = 20;
    public static final int FLD_TRANSCATION_TYPE = 21;
    public static final int FLD_TRANSACTION_STATUS = 22;
    public static final int FLD_COVER_NUMBER = 23;
    public static final int FLD_SPECIAL_ID = 24;
    public static final int FLD_SPECIAL_FLAG = 25;
    public static final int FLD_PARENT_ID = 26;
    public static final int FLD_GUEST_NAME = 27;
    public static final int FLD_NOTES = 28;
    public static final int FLD_CURRENCY_ID = 29;
    public static final int FLD_RATE = 30;
    /*private long cashPendingOrderId;
    private long customerId;
    private int transctionType;
    private int transactionStatus=0;
    private String coverNumber="";
    private long specialId;
    private int specialFlag;
     */
    //Delivery Address
    //AriWiweka 20130711
    public static final int FLD_SHIPPING_ADDRESS = 31;
    public static final int FLD_SHIPPING_CITY = 32;
    public static final int FLD_SHIPPING_PROVINCE = 33;
    public static final int FLD_SHIPPING_COUNTRY = 34;
    public static final int FLD_SHIPPING_ZIP = 35;
    public static final int FLD_SHIPPING_PH_NUMBER = 36;
    public static final int FLD_SHIPPING_MOBILE_NUMBER = 37;
    public static final int FLD_SHIPPING_FAX = 38;
    /**
     *Untuk Total Penjualan
     * AriWiweka 20130711
     */
    public static final int FLD_AMOUNT = 39;
    public static final int FLD_PAID_AMOUNT = 40;

    /**
     * Ari Wiweka 20130723
     */
    public static final int FLD_DISC_PCT = 41;
    public static final int FLD_INVOICING_ID = 42;
    public static final int FLD_STATUS_INVOICING = 43;
    public static final int FLD_DO_PERSON_ID = 44;

    /**
     * update opie-eyek 20131115 untuk type open bill
     */
    public static final int FLD_TYPE_SALES_ORDER = 45;
    public static final int FLD_PARENT_SALES_ORDER_ID=46;
    public static final int FLD_DATE_TERM_OF_PAYMENT=47;
    
    /**
     * update opie-eyek 20140428 untuk location stock
     */
    public static final int FLD_STOCK_LOCATION_ID=48;
    
    public static final int FLD_ROOM_ID=49;
    public static final int FLD_TABLE_ID=50;
    
    public static final int FLD_PAX_NUMBER=51;
    public static final int FLD_EVENT_NAME = 52;
    
    //added by dewok 20180423
    public static final int FLD_ORDER_DATE = 53;
    public static final int FLD_IS_SERVICE = 54;
    public static final int FLD_ID_NEGARA = 55;
    public static final int FLD_GENDER = 56;

    //add by arisena
    public static final int FLD_STATUS = 57;

    //added by dewok 2019-10-07 for duty free
    public static final int FLD_SHIPPING_DATE = 58;
    public static final int FLD_FLIGHT_NUMBER = 59;
    public static final int FLD_APP_USER_SALES_ID = 60;

    public static final String[] fieldNames = {
        "CASH_BILL_MAIN_ID",
        "CASH_CASHIER_ID",
        "LOCATION_ID",
        "BILL_DATE",
        "BILL_NUMBER",
        "APP_USER_ID",
        "SHIFT_ID",
        "DISC_TYPE",
        "DISC",
        "TAX_PCT",
        "TAX_VALUE",
        "SERVICE_PCT",
        "SERVICE_VALUE",
        "BILL_STATUS",
        "SALES_CODE",
        "INVOICE_NUMBER",
        "INVOICE_COUNTER",
        "TRANS_TYPE",
        "DOC_TYPE",
        "CASH_PENDING_ORDER_ID",
        "CUSTOMER_ID",
        "TRANSACTION_TYPE",
        "TRANSACTION_STATUS",
        "COVER_NUMBER",
        "SPECIAL_ID",
        "SPECIAL_FLAG",
        "PARENT_ID",
        "GUEST_NAME",
        "NOTES",
        "CURRENCY_ID",
        "RATE",
        //delivery address
        "SHIPPING_ADDRESS",
        "SHIPPING_CITY",
        "SHIPPING_PROVINCE",
        "SHIPPING_COUNTRY",
        "SHIPPING_ZIP_CODE",
        "SHIPPING_PH_NUMBER",
        "SHIPPING_MOBILE_PHONE",
        "SHIPPING_FAX",
        "AMOUNT",
        "PAID_AMOUNT",

        "DISC_PCT",
        "INVOICING_ID",
        "STATUS_INVOICING",
        "DO_PERSON_ID",
        "TYPE_SALES_ORDER",
        "PARENT_SALES_ORDER_ID",
        "DATE_TERM_OF_PAYMENT",
        
        "STOCK_LOCATION_ID",
        
        "ROOM_ID",
        "TABLE_ID",
        "PAX_NUMBER",
        "EVENT_NAME",
        "ORDER_DATE",
        "IS_SERVICE",
        "ID_NEGARA",
        "GENDER",
        "STATUS",
        "SHIPPING_DATE",
        "FLIGHT_NUMBER",
        "APP_USER_SALES_ID"
    };
    public static final int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_DATE,
        TYPE_STRING,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_INT,
        TYPE_STRING, 
//        TYPE_LONG, //New
        TYPE_STRING,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_INT,
        TYPE_INT,
        TYPE_STRING,
        TYPE_LONG,
        TYPE_INT,
        TYPE_LONG,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_LONG,
        TYPE_FLOAT,
        //Delivery Address
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,

        TYPE_LONG,
        TYPE_INT,
        TYPE_LONG,
        TYPE_INT,
        TYPE_LONG,
        TYPE_DATE,
        
        TYPE_LONG,
        
        TYPE_LONG,
        TYPE_LONG,
        
        TYPE_INT,
        TYPE_STRING,
        TYPE_DATE,
        TYPE_INT,
        TYPE_LONG,
        TYPE_INT,
        TYPE_INT,
        TYPE_DATE,
        TYPE_STRING,
        TYPE_LONG
    };
    //Type penyimpanan transaksi
    public static final int TYPE_INTERNAL = 0;
    public static final int TYPE_EXTERNAL = 1;
    //Type document transaksi
    public static final int TYPE_INVOICE = 0;
    public static final int TYPE_RETUR = 1;
    public static final int TYPE_GIFT = 2;
    public static final int TYPE_COST = 3;
    public static final int TYPE_COMPLIMENT = 4;
    public static final int TYPE_IMVOICE_CLAIM = 5;
    public static String[][] transType = {
        {"PENJUALAN", "RETUR", "HADIAH", "INTERNAL", "COMPLIMENT", "INVOICE CLAIM"},
        {"INVOICE", "RETURN", "GIFT", "COST", "COMPLIMENT", "INVOICE CLAIM"}
    };
    //public static final int TYPE_OPEN_BILL=5;
    //public static final int TYPE_CREDIT_

    public static final int DISC_TYPE_PCT = 1;
    public static final int DISC_TYPE_VALUE = 0;

    //sale type
    public static final int SALE_NON_RECEIP = 0;
    public static final int SALE_RECEIP = 1;
    //transaction type
    public static final int TRANS_TYPE_CASH = 0;
    public static final int TRANS_TYPE_CREDIT = 1;

    //Ari wiweka 20130719
    public static String[] payType = {
        "Cash", "Credit"
    };

    //Nota type
    public static final int NONE = 0;
    public static final int OPEN_BILL = 1;
    public static final int RETUR = 2;
    /**
     * Ari Wiweka 20130716
     * untuk nota type salesorder dan kasir
     */
    public static final int GIFT = 3;
    public static final int SALES_ORDER = 4;
    public static final int OPEN_CREDIT_INVOICE = 5;
    public static final int RETUR_ALL = 6;
    public static final int VOID = 7;


    /**Ari wiweka
     *
     */
     public static final int OPEN_ALL_INVOICE = 7;
     public static final int INVOICING = 8;


    //transaction status
    public static final int TRANS_STATUS_CLOSE = 0; // untuk penjualan cash
    public static final int TRANS_STATUS_OPEN = 1; // untuk penjualan open bill ataupun credit
    public static final int TRANS_STATUS_DELETED = 2;
	public static final int TRANS_STATUS_CANCELED = 3;
    public static String[] saleTypes = {
        "NON RESEP", "RESEP"
    };
    //price type
    public static final String DEFAULT_PRICE = "00";
    public static final String PRICE_TYPE_01 = "01";
    public static final String PRICE_TYPE_02 = "02";
    public static final String PRICE_TYPE_03 = "03";
    //service include, tax include
    public static final int INC_NOT_CHANGEABLE = 0; // include not changeable
    public static final int NOT_INC_NOT_CHANGEABLE = 1; // not include not changeable
    public static final int INC_CHANGEABLE = 2; //include changeable
    public static final int NOT_INC_CHANGEABLE = 3;//not include changeable


    //add opie-eyek status invoicing
    public static final int INVOICING_DRAFT = 0; //draft
    public static final int INVOICING_ON_PROSES = 1; //on proses
    public static final int INVOICING_FINISH = 2; //finish
    
    //added by Arisena
    public static final int DELIVERY_STATUS_DRAFT = 0;
    public static final int DELIVERY_STATUS_IN_TRANSIT = 1;
    public static final int DELIVERY_STATUS_RECEIVED = 2;
    public static final int DELIVERY_STATUS_TAKEN = 3;
    public static final int DELIVERY_STATUS_NOT_TAKEN = 4;

    public static String[] deliveryStatus = {
        "DRAFT",
        "IN TRANSIT",
        "RECEIVED",
        "TAKEN",
        "NOT TAKEN"
    };
  
	public static final int PETUGAS_DELIVERY_STATUS_DRAFT = 0;
	public static final int PETUGAS_DELIVERY_STATUS_ON_PRODUCTION = 1;
	public static final int PETUGAS_DELIVERY_STATUS_AKAN_DIKIRIM = 2;
	public static final int PETUGAS_DELIVERY_STATUS_DIKIRIM = 3;
	public static final int PETUGAS_DELIVERY_STATUS_DITERIMA = 4;
	public static final int PETUGAS_DELIVERY_STATUS_DIAMBIL_LANGSUNG = 5;
	public static final int PETUGAS_DELIVERY_STATUS_RESCHEDULE = 6;
	
	public static String[] produksiDeliveryStatus = {
		"DRAFT",
		"ORDER",
		"AKAN DIKIRIM",
		"DIKIRIM",
		"DITERIMA",
		"DIAMBIL LANGSUNG",
		"RESCHEDULE"
	};
	
    //constructor
    public PstBillMain() {
    }

    public PstBillMain(int i) throws DBException {
        super(new PstBillMain());
    }

    public PstBillMain(String sOid) throws DBException {
        super(new PstBillMain(0));
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public PstBillMain(long lOid) throws DBException {
        super(new PstBillMain(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_CASH_BILL_MAIN;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstBillDetail().getClass().getName();
    }

    public long fetchExc(Entity ent) throws Exception {
        BillMain billMain = fetchExc(ent.getOID());
        ent = (Entity) billMain;
        return billMain.getOID();
    }

    public long insertExc(Entity ent) throws Exception {
        return insertExc((BillMain) ent);
    }

    public long updateExc(Entity ent) throws Exception {
        return updateExc((BillMain) ent);
    }

    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());

    }

    public static BillMain fetchExc(long oid) throws DBException {
        try {
            BillMain billMain = new BillMain();
            PstBillMain pstBillMain = new PstBillMain(oid);
            billMain.setOID(oid);
            billMain.setCashCashierId(pstBillMain.getlong(FLD_CASH_CASHIER_ID));
            billMain.setLocationId(pstBillMain.getlong(FLD_LOCATION_ID));
            billMain.setBillDate(pstBillMain.getDate(FLD_BILL_DATE));
            billMain.setInvoiceNo(pstBillMain.getString(FLD_INVOICE_NO));
            billMain.setAppUserId(pstBillMain.getlong(FLD_APPUSER_ID));
            billMain.setShiftId(pstBillMain.getlong(FLD_SHIFT_ID));
            billMain.setDiscType(pstBillMain.getInt(FLD_DISC_TYPE));
            billMain.setDiscount(pstBillMain.getdouble(FLD_DISCOUNT));
            billMain.setTaxPercentage(pstBillMain.getdouble(FLD_TAX_PERCENTAGE));
            billMain.setTaxValue(pstBillMain.getdouble(FLD_TAX_VALUE));
            billMain.setServicePct(pstBillMain.getdouble(FLD_SERVICE_PCT));
            billMain.setServiceValue(pstBillMain.getdouble(FLD_SERVICE_VALUE));
            billMain.setBillStatus(pstBillMain.getInt(FLD_BILL_STATUS));
            billMain.setSalesCode(pstBillMain.getString(FLD_SALES_CODE));

            billMain.setInvoiceNumber(pstBillMain.getString(FLD_INVOICE_NUMBER));
            billMain.setInvoiceCounter(pstBillMain.getInt(FLD_INVOICE_COUNTER));
            billMain.setTransType(pstBillMain.getInt(FLD_TRANS_TYPE));
            billMain.setDocType(pstBillMain.getInt(FLD_DOC_TYPE));

            billMain.setCashPendingOrderId(pstBillMain.getlong(FLD_CASH_PENDING_ORDER_ID));
            billMain.setCustomerId(pstBillMain.getlong(FLD_CUSTOMER_ID));
            billMain.setTransctionType(pstBillMain.getInt(FLD_TRANSCATION_TYPE));
            billMain.setTransactionStatus(pstBillMain.getInt(FLD_TRANSACTION_STATUS));
            billMain.setCoverNumber(pstBillMain.getString(FLD_COVER_NUMBER));
            billMain.setSpecialId(pstBillMain.getlong(FLD_SPECIAL_ID));
            billMain.setSpecialFlag(pstBillMain.getInt(FLD_SPECIAL_FLAG));

            billMain.setParentId(pstBillMain.getlong(FLD_PARENT_ID));

            billMain.setGuestName(pstBillMain.getString(FLD_GUEST_NAME));
            billMain.setNotes(pstBillMain.getString(FLD_NOTES));

            billMain.setCurrencyId(pstBillMain.getlong(FLD_CURRENCY_ID));
            billMain.setRate(pstBillMain.getdouble(FLD_RATE));

            //Delivery Address
            billMain.setShippingAddress(pstBillMain.getString(FLD_SHIPPING_ADDRESS));
            billMain.setShippingCity(pstBillMain.getString(FLD_SHIPPING_CITY));
            billMain.setShippingProvince(pstBillMain.getString(FLD_SHIPPING_PROVINCE));
            billMain.setShippingCountry(pstBillMain.getString(FLD_SHIPPING_COUNTRY));
            billMain.setShippingZipCode(pstBillMain.getString(FLD_SHIPPING_ZIP));
            billMain.setShippingPhoneNumber(pstBillMain.getString(FLD_SHIPPING_PH_NUMBER));
            billMain.setShippingMobilePhone(pstBillMain.getString(FLD_SHIPPING_MOBILE_NUMBER));
            billMain.setShippingFax(pstBillMain.getString(FLD_SHIPPING_FAX));

            //untuk total penjualan
            billMain.setAmount(pstBillMain.getdouble(FLD_AMOUNT));
            billMain.setPaidAmount(pstBillMain.getdouble(FLD_PAID_AMOUNT));

            billMain.setDiscPct(pstBillMain.getdouble(FLD_DISC_PCT));

            billMain.setInvoicingId(pstBillMain.getlong(FLD_INVOICING_ID));
            billMain.setStatusInv(pstBillMain.getInt(FLD_STATUS_INVOICING));
            billMain.setDoPersonId(pstBillMain.getlong(FLD_DO_PERSON_ID));

            //update untuk type sales order
            billMain.setTypeSalesOrder(pstBillMain.getInt(FLD_TYPE_SALES_ORDER));
            billMain.setParentSalesOrderId(pstBillMain.getlong(FLD_PARENT_SALES_ORDER_ID));
            billMain.setDateTermOfPayment(pstBillMain.getDate(FLD_DATE_TERM_OF_PAYMENT));
            
            //update untuk stock location id
            billMain.setStockLocationId(pstBillMain.getlong(FLD_STOCK_LOCATION_ID));
            
            billMain.setRoomID(pstBillMain.getlong(FLD_ROOM_ID));
            billMain.setTableId(pstBillMain.getlong(FLD_TABLE_ID));
            
            billMain.setPaxNumber(pstBillMain.getInt(FLD_PAX_NUMBER));
            billMain.setEventName(pstBillMain.getString(FLD_EVENT_NAME));
            
            //added by dewok 20180423
            billMain.setOrderDate(pstBillMain.getDate(FLD_ORDER_DATE));
            billMain.setIsService(pstBillMain.getInt(FLD_IS_SERVICE));
			billMain.setNegaraId(pstBillMain.getlong(FLD_ID_NEGARA));
            billMain.setGender(pstBillMain.getInt(FLD_GENDER));

            //added by arisena
            billMain.setStatus(pstBillMain.getInt(FLD_STATUS));
            
            billMain.setShippingDate(pstBillMain.getDate(FLD_SHIPPING_DATE));
            billMain.setFlightNumber(pstBillMain.getString(FLD_FLIGHT_NUMBER));
            billMain.setAppUserSalesId(pstBillMain.getlong(FLD_APP_USER_SALES_ID));

            return billMain;
        } catch (DBException dbe) {
            System.out.println("error =" + dbe);
            throw dbe;
        } catch (Exception e) {
            System.out.println("error =" + e);
            throw new DBException(new PstBillMain(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(BillMain billMain) throws DBException {
        try {
            PstBillMain pstBillMain = new PstBillMain(0);
            pstBillMain.setLong(FLD_CASH_CASHIER_ID, billMain.getCashCashierId());
            pstBillMain.setLong(FLD_LOCATION_ID, billMain.getLocationId());
            pstBillMain.setDate(FLD_BILL_DATE, billMain.getBillDate());
            pstBillMain.setString(FLD_INVOICE_NO, billMain.getInvoiceNo());
            pstBillMain.setLong(FLD_APPUSER_ID, billMain.getAppUserId());
            pstBillMain.setLong(FLD_SHIFT_ID, billMain.getShiftId());
            pstBillMain.setInt(FLD_DISC_TYPE, billMain.getDiscType());
            pstBillMain.setDouble(FLD_DISCOUNT, billMain.getDiscount());
            pstBillMain.setDouble(FLD_TAX_PERCENTAGE, billMain.getTaxPercentage());
            pstBillMain.setDouble(FLD_TAX_VALUE, billMain.getTaxValue());
            pstBillMain.setDouble(FLD_SERVICE_PCT, billMain.getServicePct());
            pstBillMain.setDouble(FLD_SERVICE_VALUE, billMain.getServiceValue());
            pstBillMain.setInt(FLD_BILL_STATUS, billMain.getBillStatus());
            pstBillMain.setString(FLD_SALES_CODE, billMain.getSalesCode());


            pstBillMain.setString(FLD_INVOICE_NUMBER, billMain.getInvoiceNumber());
            pstBillMain.setInt(FLD_INVOICE_COUNTER, billMain.getInvoiceCounter());
            pstBillMain.setInt(FLD_TRANS_TYPE, billMain.getTransType());
            pstBillMain.setInt(FLD_DOC_TYPE, billMain.getDocType());

            pstBillMain.setLong(FLD_CASH_PENDING_ORDER_ID, billMain.getCashPendingOrderId());
            pstBillMain.setLong(FLD_CUSTOMER_ID, billMain.getCustomerId());
            pstBillMain.setInt(FLD_TRANSCATION_TYPE, billMain.getTransctionType());
            pstBillMain.setInt(FLD_TRANSACTION_STATUS, billMain.getTransactionStatus());
            pstBillMain.setString(FLD_COVER_NUMBER, billMain.getCoverNumber());
            pstBillMain.setLong(FLD_SPECIAL_ID, billMain.getSpecialId());
            pstBillMain.setInt(FLD_SPECIAL_FLAG, billMain.getSpecialFlag());

            pstBillMain.setLong(FLD_PARENT_ID, billMain.getParentId());

            pstBillMain.setString(FLD_GUEST_NAME, billMain.getGuestName());
            pstBillMain.setString(FLD_NOTES, billMain.getNotes());

            pstBillMain.setLong(FLD_CURRENCY_ID, billMain.getCurrencyId());
            pstBillMain.setDouble(FLD_RATE, billMain.getRate());

            //Delivery Address
            pstBillMain.setString(FLD_SHIPPING_ADDRESS, billMain.getShippingAddress());
            pstBillMain.setString(FLD_SHIPPING_CITY, billMain.getShippingCity());
            pstBillMain.setString(FLD_SHIPPING_PROVINCE, billMain.getShippingProvince());
            pstBillMain.setString(FLD_SHIPPING_COUNTRY, billMain.getShippingCountry());
            pstBillMain.setString(FLD_SHIPPING_ZIP, billMain.getShippingZipCode());
            pstBillMain.setString(FLD_SHIPPING_PH_NUMBER, billMain.getShippingPhoneNumber());
            pstBillMain.setString(FLD_SHIPPING_MOBILE_NUMBER, billMain.getShippingMobilePhone());
            pstBillMain.setString(FLD_SHIPPING_FAX, billMain.getShippingFax());

            //untuk total penjualan
            pstBillMain.setDouble(FLD_AMOUNT, billMain.getAmount());
            pstBillMain.setDouble(FLD_PAID_AMOUNT, billMain.getPaidAmount());

            pstBillMain.setDouble(FLD_DISC_PCT, billMain.getDiscPct());

            pstBillMain.setLong(FLD_INVOICING_ID, billMain.getInvoicingId());
            pstBillMain.setInt(FLD_STATUS_INVOICING, billMain.getStatusInv());
            pstBillMain.setLong(FLD_DO_PERSON_ID, billMain.getDoPersonId());

            pstBillMain.setInt(FLD_TYPE_SALES_ORDER, billMain.getTypeSalesOrder());
            pstBillMain.setLong(FLD_PARENT_SALES_ORDER_ID, billMain.getParentSalesOrderId());
            pstBillMain.setDate(FLD_DATE_TERM_OF_PAYMENT, billMain.getDateTermOfPayment());
            
            pstBillMain.setLong(FLD_STOCK_LOCATION_ID, billMain.getLocationId());
            
            pstBillMain.setLong(FLD_TABLE_ID, billMain.getTableId());
            pstBillMain.setLong(FLD_ROOM_ID, billMain.getRoomID());
            
            pstBillMain.setInt(FLD_PAX_NUMBER, billMain.getPaxNumber());
            pstBillMain.setString(FLD_EVENT_NAME, billMain.getEventName());
            
            //added by dewok 20180423
            pstBillMain.setDate(FLD_ORDER_DATE, billMain.getOrderDate());
            pstBillMain.setInt(FLD_IS_SERVICE, billMain.getIsService());
			pstBillMain.setLong(FLD_ID_NEGARA, billMain.getNegaraId());
            pstBillMain.setInt(FLD_GENDER, billMain.getGender());

            //added arisena
            pstBillMain.setInt(FLD_STATUS, billMain.getStatus());
            
            pstBillMain.setDate(FLD_SHIPPING_DATE, billMain.getShippingDate());
            pstBillMain.setString(FLD_FLIGHT_NUMBER, billMain.getFlightNumber());
            pstBillMain.setLong(FLD_APP_USER_SALES_ID, billMain.getAppUserSalesId());

            pstBillMain.insert();
            billMain.setOID(pstBillMain.getlong(FLD_BILL_MAIN_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillMain(0), DBException.UNKNOWN);
        }
        return billMain.getOID();
    }

    public static long insertExcByOid(BillMain billMain) throws DBException {
        try {
            PstBillMain pstBillMain = new PstBillMain(0);
            pstBillMain.setLong(FLD_CASH_CASHIER_ID, billMain.getCashCashierId());
            pstBillMain.setLong(FLD_LOCATION_ID, billMain.getLocationId());
            pstBillMain.setDate(FLD_BILL_DATE, billMain.getBillDate());
            pstBillMain.setString(FLD_INVOICE_NO, billMain.getInvoiceNo());
            pstBillMain.setLong(FLD_APPUSER_ID, billMain.getAppUserId());
            pstBillMain.setLong(FLD_SHIFT_ID, billMain.getShiftId());
            pstBillMain.setInt(FLD_DISC_TYPE, billMain.getDiscType());
            pstBillMain.setDouble(FLD_DISCOUNT, billMain.getDiscount());
            pstBillMain.setDouble(FLD_TAX_PERCENTAGE, billMain.getTaxPercentage());
            pstBillMain.setDouble(FLD_TAX_VALUE, billMain.getTaxValue());
            pstBillMain.setDouble(FLD_SERVICE_PCT, billMain.getServicePct());
            pstBillMain.setDouble(FLD_SERVICE_VALUE, billMain.getServiceValue());
            pstBillMain.setInt(FLD_BILL_STATUS, billMain.getBillStatus());
            pstBillMain.setString(FLD_SALES_CODE, billMain.getSalesCode());


            pstBillMain.setString(FLD_INVOICE_NUMBER, billMain.getInvoiceNumber());
            pstBillMain.setInt(FLD_INVOICE_COUNTER, billMain.getInvoiceCounter());
            pstBillMain.setInt(FLD_TRANS_TYPE, billMain.getTransType());
            pstBillMain.setInt(FLD_DOC_TYPE, billMain.getDocType());

            pstBillMain.setLong(FLD_CASH_PENDING_ORDER_ID, billMain.getCashPendingOrderId());
            pstBillMain.setLong(FLD_CUSTOMER_ID, billMain.getCustomerId());
            pstBillMain.setInt(FLD_TRANSCATION_TYPE, billMain.getTransctionType());
            pstBillMain.setInt(FLD_TRANSACTION_STATUS, billMain.getTransactionStatus());
            pstBillMain.setString(FLD_COVER_NUMBER, billMain.getCoverNumber());
            pstBillMain.setLong(FLD_SPECIAL_ID, billMain.getSpecialId());
            pstBillMain.setInt(FLD_SPECIAL_FLAG, billMain.getSpecialFlag());

            pstBillMain.setLong(FLD_PARENT_ID, billMain.getParentId());

            pstBillMain.setString(FLD_GUEST_NAME, billMain.getGuestName());
            pstBillMain.setString(FLD_NOTES, billMain.getNotes());

            pstBillMain.setLong(FLD_CURRENCY_ID, billMain.getCurrencyId());
            pstBillMain.setDouble(FLD_RATE, billMain.getRate());

            //Delivery Address
            pstBillMain.setString(FLD_SHIPPING_ADDRESS, billMain.getShippingAddress());
            pstBillMain.setString(FLD_SHIPPING_CITY, billMain.getShippingCity());
            pstBillMain.setString(FLD_SHIPPING_PROVINCE, billMain.getShippingProvince());
            pstBillMain.setString(FLD_SHIPPING_COUNTRY, billMain.getShippingCountry());
            pstBillMain.setString(FLD_SHIPPING_ZIP, billMain.getShippingZipCode());
            pstBillMain.setString(FLD_SHIPPING_PH_NUMBER, billMain.getShippingPhoneNumber());
            pstBillMain.setString(FLD_SHIPPING_MOBILE_NUMBER, billMain.getShippingMobilePhone());
            pstBillMain.setString(FLD_SHIPPING_FAX, billMain.getShippingFax());

            //untuk total penjualan
            pstBillMain.setDouble(FLD_AMOUNT, billMain.getAmount());
            pstBillMain.setDouble(FLD_PAID_AMOUNT, billMain.getPaidAmount());

            pstBillMain.setDouble(FLD_DISC_PCT, billMain.getDiscPct());

            pstBillMain.setLong(FLD_INVOICING_ID, billMain.getInvoicingId());
            pstBillMain.setInt(FLD_STATUS_INVOICING, billMain.getStatusInv());
            pstBillMain.setLong(FLD_DO_PERSON_ID, billMain.getDoPersonId());

            pstBillMain.setInt(FLD_TYPE_SALES_ORDER, billMain.getTypeSalesOrder());
            pstBillMain.setLong(FLD_PARENT_SALES_ORDER_ID, billMain.getParentSalesOrderId());
            pstBillMain.setDate(FLD_DATE_TERM_OF_PAYMENT, billMain.getDateTermOfPayment());
            
            pstBillMain.setLong(FLD_STOCK_LOCATION_ID, billMain.getLocationId());
            
            pstBillMain.setLong(FLD_TABLE_ID, billMain.getTableId());
            pstBillMain.setLong(FLD_ROOM_ID, billMain.getRoomID());
            
            pstBillMain.setInt(FLD_PAX_NUMBER, billMain.getPaxNumber());
            pstBillMain.setString(FLD_EVENT_NAME, billMain.getEventName());
            
            //added by dewok 20180423
            pstBillMain.setDate(FLD_ORDER_DATE, billMain.getOrderDate());
            pstBillMain.setInt(FLD_IS_SERVICE, billMain.getIsService());
			pstBillMain.setLong(FLD_ID_NEGARA, billMain.getNegaraId());
            pstBillMain.setInt(FLD_GENDER, billMain.getGender());
            //added arisena
            pstBillMain.setInt(FLD_STATUS, billMain.getStatus());
            
            pstBillMain.setDate(FLD_SHIPPING_DATE, billMain.getShippingDate());
            pstBillMain.setString(FLD_FLIGHT_NUMBER, billMain.getFlightNumber());
            pstBillMain.setLong(FLD_APP_USER_SALES_ID, billMain.getAppUserSalesId());
                        
            pstBillMain.insertByOid(billMain.getOID());

        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillMain(0), DBException.UNKNOWN);
        }
        return billMain.getOID();
    }

    public static long updateExc(BillMain billMain) throws DBException {
        try {
            if (billMain.getOID() != 0) {
                PstBillMain pstBillMain = new PstBillMain(billMain.getOID());
                pstBillMain.setLong(FLD_CASH_CASHIER_ID, billMain.getCashCashierId());
                pstBillMain.setLong(FLD_LOCATION_ID, billMain.getLocationId());
                pstBillMain.setDate(FLD_BILL_DATE, billMain.getBillDate());
                pstBillMain.setString(FLD_INVOICE_NO, billMain.getInvoiceNo());
                pstBillMain.setLong(FLD_APPUSER_ID, billMain.getAppUserId());
                pstBillMain.setLong(FLD_SHIFT_ID, billMain.getShiftId());
                pstBillMain.setInt(FLD_DISC_TYPE, billMain.getDiscType());
                pstBillMain.setDouble(FLD_DISCOUNT, billMain.getDiscount());
                pstBillMain.setDouble(FLD_TAX_PERCENTAGE, billMain.getTaxPercentage());
                pstBillMain.setDouble(FLD_TAX_VALUE, billMain.getTaxValue());
                pstBillMain.setDouble(FLD_SERVICE_PCT, billMain.getServicePct());
                pstBillMain.setDouble(FLD_SERVICE_VALUE, billMain.getServiceValue());
                pstBillMain.setInt(FLD_BILL_STATUS, billMain.getBillStatus());
                pstBillMain.setString(FLD_SALES_CODE, billMain.getSalesCode());

                pstBillMain.setString(FLD_INVOICE_NUMBER, billMain.getInvoiceNumber());
                pstBillMain.setInt(FLD_INVOICE_COUNTER, billMain.getInvoiceCounter());
                pstBillMain.setInt(FLD_TRANS_TYPE, billMain.getTransType());
                pstBillMain.setInt(FLD_DOC_TYPE, billMain.getDocType());

                pstBillMain.setLong(FLD_CASH_PENDING_ORDER_ID, billMain.getCashPendingOrderId());
                pstBillMain.setLong(FLD_CUSTOMER_ID, billMain.getCustomerId());
                pstBillMain.setInt(FLD_TRANSCATION_TYPE, billMain.getTransctionType());
                pstBillMain.setInt(FLD_TRANSACTION_STATUS, billMain.getTransactionStatus());
                pstBillMain.setString(FLD_COVER_NUMBER, billMain.getCoverNumber());
                pstBillMain.setLong(FLD_SPECIAL_ID, billMain.getSpecialId());
                pstBillMain.setInt(FLD_SPECIAL_FLAG, billMain.getSpecialFlag());

                pstBillMain.setLong(FLD_PARENT_ID, billMain.getParentId());

                pstBillMain.setString(FLD_GUEST_NAME, billMain.getGuestName());
                pstBillMain.setString(FLD_NOTES, billMain.getNotes());

                pstBillMain.setLong(FLD_CURRENCY_ID, billMain.getCurrencyId());
                pstBillMain.setDouble(FLD_RATE, billMain.getRate());

                //Delivery Address
                pstBillMain.setString(FLD_SHIPPING_ADDRESS, billMain.getShippingAddress());
                pstBillMain.setString(FLD_SHIPPING_CITY, billMain.getShippingCity());
                pstBillMain.setString(FLD_SHIPPING_PROVINCE, billMain.getShippingProvince());
                pstBillMain.setString(FLD_SHIPPING_COUNTRY, billMain.getShippingCountry());
                pstBillMain.setString(FLD_SHIPPING_ZIP, billMain.getShippingZipCode());
                pstBillMain.setString(FLD_SHIPPING_PH_NUMBER, billMain.getShippingPhoneNumber());
                pstBillMain.setString(FLD_SHIPPING_MOBILE_NUMBER, billMain.getShippingMobilePhone());
                pstBillMain.setString(FLD_SHIPPING_FAX, billMain.getShippingFax());

                //untuk total penjualan
                pstBillMain.setDouble(FLD_AMOUNT,billMain.getAmount());
                pstBillMain.setDouble(FLD_PAID_AMOUNT, billMain.getPaidAmount());

                pstBillMain.setDouble(FLD_DISC_PCT, billMain.getDiscPct());

                pstBillMain.setLong(FLD_INVOICING_ID, billMain.getInvoicingId());
                pstBillMain.setInt(FLD_STATUS_INVOICING, billMain.getStatusInv());
                pstBillMain.setLong(FLD_DO_PERSON_ID, billMain.getDoPersonId()); 

                pstBillMain.setInt(FLD_TYPE_SALES_ORDER, billMain.getTypeSalesOrder()); 
                pstBillMain.setLong(FLD_PARENT_SALES_ORDER_ID, billMain.getParentSalesOrderId());
                pstBillMain.setDate(FLD_DATE_TERM_OF_PAYMENT, billMain.getDateTermOfPayment());
                
                pstBillMain.setLong(FLD_STOCK_LOCATION_ID, billMain.getLocationId());
                
                pstBillMain.setLong(FLD_TABLE_ID, billMain.getTableId());
                pstBillMain.setLong(FLD_ROOM_ID, billMain.getRoomID());
                
                pstBillMain.setInt(FLD_PAX_NUMBER, billMain.getPaxNumber());
                pstBillMain.setString(FLD_EVENT_NAME, billMain.getEventName());
                
                //added by dewok 20180423
                pstBillMain.setDate(FLD_ORDER_DATE, billMain.getOrderDate());
                pstBillMain.setInt(FLD_IS_SERVICE, billMain.getIsService());
				pstBillMain.setLong(FLD_ID_NEGARA, billMain.getNegaraId());
                pstBillMain.setInt(FLD_GENDER, billMain.getGender());
                //added arisena
                pstBillMain.setInt(FLD_STATUS, billMain.getStatus());
                
                pstBillMain.setDate(FLD_SHIPPING_DATE, billMain.getShippingDate());
                pstBillMain.setString(FLD_FLIGHT_NUMBER, billMain.getFlightNumber());
                pstBillMain.setLong(FLD_APP_USER_SALES_ID, billMain.getAppUserSalesId());
                
                pstBillMain.update();
                return billMain.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillMain(0), DBException.UNKNOWN);
        }
        return 0;
    }

    /**
     * Untuk Update Total Penjualan
     * Ari_wiweka 20130701
     * @param oid
     * @return
     * @throws DBException
     */
    public static double updateTotalAmount(long oidBillMain, double amount) {

            String sql = "UPDATE " + TBL_CASH_BILL_MAIN
                    + " SET " + fieldNames[PstBillMain.FLD_AMOUNT] + " = '" + amount + "'"
                    + " WHERE " + fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "'";

             try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {

        }
        return amount;
    }

     /**
     * Untuk Update Grand Total, Diskon, Tax
     * Ari_wiweka 20130723
     * @param oid
     * @return
     * @throws DBException
     */
    public static double updateGrandTotal(long oidBillMain, double amount, double taxPct, double taxValue, double discGlobal, double discPct , int discType) {

            String sql = "UPDATE " + TBL_CASH_BILL_MAIN
                    + " SET " + fieldNames[PstBillMain.FLD_AMOUNT] + " = '" + amount + "' , "
                    + fieldNames[PstBillMain.FLD_TAX_PERCENTAGE] + " = '" + taxPct + "' , "
                    + fieldNames[PstBillMain.FLD_TAX_VALUE] + " = '" + taxValue + "' , "
                    + fieldNames[PstBillMain.FLD_DISCOUNT] + " = '" + discGlobal + "' , "
                    + fieldNames[PstBillMain.FLD_DISC_PCT] + " = '" + discPct + "', "
                    + fieldNames[PstBillMain.FLD_DISC_TYPE] + " = '" + discType + "' "
                    + " WHERE " + fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "'";

             try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {

        }
        return amount;
    }


    /**
     * Untuk Update Transaction Status
     * Ari_wiweka 20130701
     * @param oid
     * @return
     * @throws DBException
     */
    public static int updateTransStatus(long oidBillMain, int transStatus) {

            String sql = "UPDATE " + TBL_CASH_BILL_MAIN
                    + " SET " + fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + " = '" + transStatus + "'"
                    + " WHERE " + fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "'";

             try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {

        }
        return transStatus;
    }

    /**
     * Ari_wiweka 20130710
     * untuk sum kredit
     */
    public static double getTotalKredit(long idCustomer){
        DBResultSet dbrs = null;
        try {
             String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + " * CBM."+PstBillMain.fieldNames[PstBillMain.FLD_RATE]+")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]
                    + ", (CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE] + " * CBM."+PstBillMain.fieldNames[PstBillMain.FLD_RATE]+") AS TAX_VALUE"
                    + ", (CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT] + " * CBM."+PstBillMain.fieldNames[PstBillMain.FLD_RATE]+") AS DISCOUNT_VALUE"
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE CBM." + fieldNames[PstBillMain.FLD_CUSTOMER_ID]
                    + " = " + idCustomer
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=1"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            double sum = 0.00;
            while (rs.next()) {
                sum += rs.getDouble(1) + rs.getDouble("TAX_VALUE") - rs.getDouble("DISCOUNT_VALUE");
               // sum += (rs.getInt(1)*rs.getDouble("RATE")) + (rs.getDouble("TAX_VALUE")*rs.getDouble("RATE")) - (rs.getDouble("DISCOUNT_VALUE")*rs.getDouble("RATE"));
            }
            rs.close();
            return sum;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * Ari_wiweka 20130710
     * untuk sum Return Kredit
     */
    public static double getReturnKredit(long idCustomer){
        DBResultSet dbrs = null;
        try {
            /*String sql ="SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE] + " AS TAX_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT] + " AS DISCOUNT_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_RATE] + " AS RATE"*/
              String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + " * CBM."+PstBillMain.fieldNames[PstBillMain.FLD_RATE]+")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]
                    + ", (CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE] + " * CBM."+PstBillMain.fieldNames[PstBillMain.FLD_RATE]+") AS TAX_VALUE"
                    + ", (CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT] + " * CBM."+PstBillMain.fieldNames[PstBillMain.FLD_RATE]+") AS DISCOUNT_VALUE"
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE CBM." + fieldNames[PstBillMain.FLD_CUSTOMER_ID]
                    + " = " + idCustomer
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =1"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=1"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            double sum = 0.00;
            while (rs.next()) {
               sum += rs.getDouble(1) + rs.getDouble("TAX_VALUE") - rs.getDouble("DISCOUNT_VALUE");
                //sum += (rs.getInt(1)*rs.getDouble("RATE")) + (rs.getDouble("TAX_VALUE")*rs.getDouble("RATE")) - (rs.getDouble("DISCOUNT_VALUE")*rs.getDouble("RATE"));
            }
            rs.close();
            return sum;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }


    /**
     * Untuk Update Invoice Number dan Invoice Counter
     * Ari_wiweka 20130701
     * @param oid
     * @return
     * @throws DBException
     */
    public static String updateInvoiceNo(long oidBillMain, int invoiceCounter, String invoiceNo) {

            String sql = "UPDATE " + TBL_CASH_BILL_MAIN
                    + " SET " + fieldNames[PstBillMain.FLD_INVOICE_COUNTER] + " = '" + invoiceCounter + "' ,"
                    + fieldNames[PstBillMain.FLD_INVOICE_NUMBER] + " = '" + invoiceNo + "' ,"
                    + fieldNames[PstBillMain.FLD_INVOICE_NO] + " = '" + invoiceNo + "'"
                    + " WHERE " + fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "'";

             try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {

        }
        return invoiceNo;
    }

     /**
     * Untuk Update CashashierId
     * Ari_wiweka 20130701
     * @param oid
     * @return
     * @throws DBException
     */
    public static long updateCashCashierId(long oidBillMain, long casCashierId) {

            String sql = "UPDATE " + TBL_CASH_BILL_MAIN
                    + " SET " + fieldNames[PstBillMain.FLD_CASH_CASHIER_ID] + " = '" + casCashierId + "' "
                    + " WHERE " + fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "'";

             try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {

        }
        return casCashierId;
    }

    public static long deleteExc(long oid) throws DBException {
        try {
            PstBillMain pstBillMain = new PstBillMain(oid);
            pstBillMain.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillMain(0), DBException.UNKNOWN);
        }
        return oid;
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;

        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_MAIN;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillMain billMain = new BillMain();
                resultToObject(rs, billMain);
                lists.add(billMain);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * List Search Open Bill
     * Ari wiweka 20130713
     * @param limitStart
     * @param recordToGet
     * @param whereClause
     * @param order
     * @return
     */
    public static Vector listSrc(int limitStart, BillMain bMain, int recordToGet, String whereClause, String order) {
         Vector result = new Vector(1, 1);
        DBResultSet dbrs = null;
        //SrcInvoice srcInvoice = new SrcInvoice();

        try {
            //String sql = "SELECT * FROM " + TBL_CASH_BILL_MAIN;
           /* String sql ="SELECT CM.*, CL.COMP_NAME,CL.PERSON_NAME FROM " + TBL_CASH_BILL_MAIN+
                    "AS CM LEFT JOIN " +PstMemberReg.TBL_CONTACT_LIST+
                    "AS CL ON CM." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]+
                    " = " +PstMemberReg.fieldNames[PstMemberReg.FLD_CONTACT_ID];*/

                String sql = "SELECT cm." +PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " ,cm." +PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]
                    + " , cm." +PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_PERSON_NAME]
                    + " , cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_ADDR]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_TELP]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_EMAIL]
                    + " , cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_COMP_NAME]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_BUSS_ADDRESS]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_TELP_MOBILE]
                    + " , cm." +PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]
                    + ", ct." +PstCurrencyType.fieldNames[PstCurrencyType.FLD_NAME]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT]
                    + " , cm." +PstBillMain.fieldNames[PstBillMain.FLD_PAID_AMOUNT]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]
                    + ", au." +PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_RATE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_BILL_STATUS]
                     + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_NOTES]    
                    + " FROM " +PstBillMain.TBL_CASH_BILL_MAIN+ "  cm LEFT JOIN " +PstMemberReg.TBL_CONTACT_LIST+ "  cl ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]+ " = cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_CONTACT_ID]
                    + " LEFT JOIN " +PstCurrencyType.TBL_POS_CURRENCY_TYPE+ "  ct ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]+ " = ct." +PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]
                    + " LEFT JOIN " +PstAppUser.TBL_APP_USER+ "  au ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]+ " = au."+PstAppUser.fieldNames[PstAppUser.FLD_USER_ID];

            String custId = "";
            if (bMain.getCustomerId() > 0) {
                custId = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID] +
                        " = '" + bMain.getCustomerId()+"'";
            }

            String invNumber = "";
            if (!bMain.getInvoiceNumber().equals("") && bMain.getInvoiceNumber().length() > 0) {
                invNumber = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER] +
                        " like '%" + bMain.getInvoiceNumber()+"%' ";
            }
            
            String note = "";
            if (!bMain.getNotes().equals("") && bMain.getNotes().length() > 0) {
                note = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_NOTES] +
                        " like '%" + bMain.getNotes()+"%'";
            }
            
            String location = "";
            if (bMain.getLocationId() != 0) {
                location = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID] +
                        " = '" + bMain.getLocationId()+"'";
            }
            
            String strDate = "";
            if (bMain.getStatusDate() != 0) {
                String startDate = Formater.formatDate(bMain.getDatefrom(), "yyyy-MM-dd " );
                String endDate = Formater.formatDate(bMain.getDateto(), "yyyy-MM-dd");
                strDate = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE] + " BETWEEN '" + startDate + " 00:00:00 ' AND '" + endDate + " 23:59:59'";
            }

             String custName = "";
            if (!bMain.getCustName().equals("") &&bMain.getCustName().length() > 0) {
                custName = " cl."+PstMemberReg.fieldNames[PstMemberReg.FLD_COMP_NAME] +
                        " LIKE '%"+bMain.getCustName()+"%'";
            }

             String personName = "";
            if (!bMain.getPersonName().equals("") && bMain.getPersonName().length() > 0) {
                personName = " cl."+PstMemberReg.fieldNames[PstMemberReg.FLD_PERSON_NAME] +
                        " LIKE '%"+bMain.getPersonName()+"%'";
            }
            
             if (strDate.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause = whereClause + " AND " + strDate;
                } else {
                    whereClause = whereClause + strDate;
                }
            }

            if (custId.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + custId;
                } else {
                    whereClause = custId;
                }
            }
            if (invNumber.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + invNumber;
                } else {
                    whereClause = invNumber;
                }
            }

             if (custName.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + custName;
                } else {
                    whereClause = custName;
                }
            }

             if (personName.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + personName;
                } else {
                    whereClause = personName;
                }
            }
            
            if (note.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + note;
                } else {
                    whereClause = note;
                }
            }
            
            if (location.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + location;
                } else {
                    whereClause = location;
                }
            }

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillMain billMain = new BillMain();
                MemberReg memberReg = new MemberReg();
                CurrencyType currencyType = new CurrencyType();
                AppUser appUser = new AppUser();
                Vector vt = new Vector(1, 1);

                billMain.setOID(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]));
                billMain.setInvoiceNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]));
                billMain.setBillDate(rs.getDate(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]));
                billMain.setCustomerId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]));
                billMain.setCurrencyId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]));
                billMain.setAmount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT]));
                billMain.setPaidAmount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_PAID_AMOUNT]));
                billMain.setAppUserId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]));
                billMain.setDiscType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]));
                billMain.setTransctionType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]));
                billMain.setTransactionStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]));
                billMain.setSalesCode(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]));
                billMain.setStatusInv(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]));
                billMain.setRate(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_RATE]));
                billMain.setTaxValue(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE]));
                billMain.setBillStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_BILL_STATUS]));
                billMain.setNotes(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_NOTES]));
                vt.add(billMain);

                memberReg.setPersonName(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_PERSON_NAME]));
                memberReg.setHomeAddr(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_ADDR]));
                memberReg.setHomeTelp(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_TELP]));
                memberReg.setEmail(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_EMAIL]));
                memberReg.setCompName(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_COMP_NAME]));
                memberReg.setBussAddress(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_BUSS_ADDRESS]));
                memberReg.setTelpMobile(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_TELP_MOBILE]));
                vt.add(memberReg);

                currencyType.setName(rs.getString(PstCurrencyType.fieldNames[PstCurrencyType.FLD_NAME]));
                vt.add(currencyType);

                appUser.setFullName(rs.getString(PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]));
                vt.add(appUser);
                result.add(vt);
            }
            rs.close();
            return result;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }



    public static Vector listSrcCashCreditTransaction(int limitStart, BillMain bMain, int recordToGet, String whereClause, String order) {
         Vector result = new Vector(1, 1);
        DBResultSet dbrs = null;
        //SrcInvoice srcInvoice = new SrcInvoice();

        try {
                String sql = "SELECT cm." +PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " ,cm." +PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]
                    + " , cm." +PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_PERSON_NAME]
                    + " , cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_ADDR]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_TELP]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_EMAIL]
                    + " , cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_COMP_NAME]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_BUSS_ADDRESS]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_TELP_MOBILE]
                    + " , cm." +PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]
                    + ", ct." +PstCurrencyType.fieldNames[PstCurrencyType.FLD_NAME]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT]
                    + " , cm." +PstBillMain.fieldNames[PstBillMain.FLD_PAID_AMOUNT]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]
                    + ", au." +PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_RATE]
                    + " FROM " +PstBillMain.TBL_CASH_BILL_MAIN+ "  cm LEFT JOIN " +PstMemberReg.TBL_CONTACT_LIST+ "  cl ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]+ " = cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_CONTACT_ID]
                    + " LEFT JOIN " +PstCurrencyType.TBL_POS_CURRENCY_TYPE+ "  ct ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]+ " = ct." +PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]
                    + " LEFT JOIN " +PstAppUser.TBL_APP_USER+ "  au ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]+ " = au."+PstAppUser.fieldNames[PstAppUser.FLD_USER_ID];

            String custId = "";
            if (bMain.getCustomerId() > 0) {
                custId = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID] +
                        " = '" + bMain.getCustomerId()+"'";
            }

            String invNumber = "";
            if (!bMain.getInvoiceNumber().equals("") && bMain.getInvoiceNumber().length() > 0) {
                invNumber = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER] +
                        " = '" + bMain.getInvoiceNumber()+"'";
            }

            String strDate = "";
            if (bMain.getStatusDate() != 0) {
                String startDate = Formater.formatDate(bMain.getDatefrom(), "yyyy-MM-dd " );
                String endDate = Formater.formatDate(bMain.getDateto(), "yyyy-MM-dd");
                strDate = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE] + " BETWEEN '" + startDate + " 00:00:00 ' AND '" + endDate + " 23:59:59'";
            }

             String custName = "";
            if (!bMain.getCustName().equals("") &&bMain.getCustName().length() > 0) {
                custName = " cl."+PstMemberReg.fieldNames[PstMemberReg.FLD_COMP_NAME] +
                        " LIKE '%"+bMain.getCustName()+"%'";
            }

             String personName = "";
            if (!bMain.getPersonName().equals("") && bMain.getPersonName().length() > 0) {
                personName = " cl."+PstMemberReg.fieldNames[PstMemberReg.FLD_PERSON_NAME] +
                        " LIKE '%"+bMain.getPersonName()+"%'";
            }

           /* String billDate = "";
            if (bMain.getBillDate() != null) {
                billDate = " (MAT." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE] +
                        " LIKE '%" + bMain.getBillDate() + "%')";
            }*/

             if (strDate.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause = whereClause + " AND " + strDate;
                } else {
                    whereClause = whereClause + strDate;
                }
            }

            if (custId.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + custId;
                } else {
                    whereClause = custId;
                }
            }
            if (invNumber.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + invNumber;
                } else {
                    whereClause = invNumber;
                }
            }

             if (custName.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + custName;
                } else {
                    whereClause = custName;
                }
            }

             if (personName.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + personName;
                } else {
                    whereClause = personName;
                }
            }


            /*if (billDate.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + billDate;
                } else {
                    whereClause = billDate;
                }
            }*/


            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillMain billMain = new BillMain();
                MemberReg memberReg = new MemberReg();
                CurrencyType currencyType = new CurrencyType();
                AppUser appUser = new AppUser();
                Vector vt = new Vector(1, 1);

                billMain.setOID(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]));
                billMain.setInvoiceNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]));
                billMain.setBillDate(rs.getDate(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]));
                billMain.setCustomerId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]));
                billMain.setCurrencyId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]));
                billMain.setAmount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT]));
                billMain.setPaidAmount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_PAID_AMOUNT]));
                billMain.setAppUserId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]));
                billMain.setDiscType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]));
                billMain.setTransctionType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]));
                billMain.setTransactionStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]));
                billMain.setSalesCode(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]));
                billMain.setStatusInv(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]));
                billMain.setRate(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_RATE]));
                billMain.setDocType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]));
                vt.add(billMain);

                memberReg.setPersonName(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_PERSON_NAME]));
                memberReg.setHomeAddr(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_ADDR]));
                memberReg.setHomeTelp(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_TELP]));
                memberReg.setEmail(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_EMAIL]));
                memberReg.setCompName(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_COMP_NAME]));
                memberReg.setBussAddress(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_BUSS_ADDRESS]));
                memberReg.setTelpMobile(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_TELP_MOBILE]));
                vt.add(memberReg);

                currencyType.setName(rs.getString(PstCurrencyType.fieldNames[PstCurrencyType.FLD_NAME]));
                vt.add(currencyType);

                appUser.setFullName(rs.getString(PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]));
                vt.add(appUser);
                result.add(vt);
            }
            rs.close();
            return result;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static Vector listInvoiceToPayment(int limitStart, int recordToGet, String whereClause, String order) {
         Vector result = new Vector(1, 1);
        DBResultSet dbrs = null;
        //SrcInvoice srcInvoice = new SrcInvoice();

        try {
            //String sql = "SELECT * FROM " + TBL_CASH_BILL_MAIN;
           /* String sql ="SELECT CM.*, CL.COMP_NAME,CL.PERSON_NAME FROM " + TBL_CASH_BILL_MAIN+
                    "AS CM LEFT JOIN " +PstMemberReg.TBL_CONTACT_LIST+
                    "AS CL ON CM." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]+
                    " = " +PstMemberReg.fieldNames[PstMemberReg.FLD_CONTACT_ID];*/

                String sql = "SELECT cm." +PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " ,cm." +PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]
                    + " , cm." +PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_PERSON_NAME]
                    + " , cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_ADDR]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_TELP]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_EMAIL]
                    + " , cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_COMP_NAME]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_BUSS_ADDRESS]
                    + ", cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_TELP_MOBILE]
                    + " , cm." +PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]
                    + ", ct." +PstCurrencyType.fieldNames[PstCurrencyType.FLD_NAME]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT]
                    + " , cm." +PstBillMain.fieldNames[PstBillMain.FLD_PAID_AMOUNT]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]
                    + ", au." +PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]
                    + ", cm." +PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]
                    + " FROM " +PstBillMain.TBL_CASH_BILL_MAIN+ "  cm LEFT JOIN " +PstMemberReg.TBL_CONTACT_LIST+ "  cl ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]+ " = cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_CONTACT_ID]
                    + " LEFT JOIN " +PstCurrencyType.TBL_POS_CURRENCY_TYPE+ "  ct ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]+ " = ct." +PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]
                    + " LEFT JOIN " +PstAppUser.TBL_APP_USER+ "  au ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]+ " = au."+PstAppUser.fieldNames[PstAppUser.FLD_USER_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillMain billMain = new BillMain();
                MemberReg memberReg = new MemberReg();
                CurrencyType currencyType = new CurrencyType();
                AppUser appUser = new AppUser();
                Vector vt = new Vector(1, 1);

                billMain.setOID(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]));
                billMain.setInvoiceNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]));
                billMain.setBillDate(rs.getDate(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]));
                billMain.setCustomerId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]));
                billMain.setCurrencyId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]));
                billMain.setAmount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT]));
                billMain.setPaidAmount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_PAID_AMOUNT]));
                billMain.setAppUserId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]));
                billMain.setDiscType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]));
                billMain.setTransctionType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]));
                billMain.setTransactionStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]));
                billMain.setSalesCode(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]));
                billMain.setStatusInv(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]));
                vt.add(billMain);

                memberReg.setPersonName(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_PERSON_NAME]));
                memberReg.setHomeAddr(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_ADDR]));
                memberReg.setHomeTelp(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_HOME_TELP]));
                memberReg.setEmail(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_EMAIL]));
                memberReg.setCompName(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_COMP_NAME]));
                memberReg.setBussAddress(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_BUSS_ADDRESS]));
                memberReg.setTelpMobile(rs.getString(PstMemberReg.fieldNames[PstMemberReg.FLD_TELP_MOBILE]));
                vt.add(memberReg);

                currencyType.setName(rs.getString(PstCurrencyType.fieldNames[PstCurrencyType.FLD_NAME]));
                vt.add(currencyType);

                appUser.setFullName(rs.getString(PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]));
                vt.add(appUser);
                result.add(vt);
            }
            rs.close();
            return result;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    //+PerCashier
    public static Vector listPerCashier(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstCashCashier.TBL_CASH_CASHIER + " CSH"
                    + " ON CBM." + fieldNames[FLD_CASH_CASHIER_ID]
                    + " = CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]
                    + " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " MSTR"
                    + " ON CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]
                    + " = MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID];
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break; 

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillMain billMain = new BillMain();
                resultToObject(rs, billMain);
                lists.add(billMain);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static Vector listPerCashierUsingCashierHanoman(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_MAIN + " CBM";
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillMain billMain = new BillMain();
                resultToObject(rs, billMain);
                lists.add(billMain);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     *
     * @param whereClause
     * @return
     */
    public static int getCount(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT FROM " + TBL_CASH_BILL_MAIN;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
	public static Vector getPaidInvoice(int start, int recordToGet, String whereClause, long oidDispatchMat){
		Vector vect = new Vector(1,1);
		DBResultSet dbrs = null;
		try {
			String sql = "SELECT DISTINCT CBM."+ PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]
						+ ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
						+ " FROM "+ PstBillMain.TBL_CASH_BILL_MAIN +" CBM" 
						+ " INNER JOIN "+ PstBillDetail.TBL_CASH_BILL_DETAIL +" CBD";
			String where = " WHERE CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
						+ " NOT IN (SELECT DMB." + PstMatDispatchBill.fieldNames[PstMatDispatchBill.FLD_CASH_BILL_MAIN_ID]
						+ " FROM "+ PstMatDispatchBill.TBL_MATDISPATCHBILL +" DMB) "
						+ " AND CBD."+ PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] 
						+ " = CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
						+ " AND CBM."+ PstBillMain.fieldNames[PstBillMain.FLD_BILL_STATUS] +" = 2"
						+ " AND CBM."+ PstBillMain.fieldNames[PstBillMain.FLD_STATUS] + " = 0"
						+ " AND CBM."+ PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] 
						+ " = " + PstBillMain.TRANS_TYPE_CASH
						+ " AND CBM."+ PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] 
						+ " = " + PstBillMain.INVOICING_DRAFT;
			String limit = " LIMIT "+ start +"," + recordToGet;
			
			if(whereClause.length() > 0 && whereClause != null && !whereClause.equals("")){
				where += " AND " + whereClause;
			}
			
			sql += where + limit;
			System.out.println("Sql for get paid invoice number: " + sql);
			
			dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();
			while(rs.next()){
				BillMain bm = new BillMain();
				bm.setOID(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]));
				bm.setInvoiceNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]));
				vect.add(bm);
			}
			rs.close();
		} catch (Exception e) {
			System.out.println("Get Invoice Number Err: " + e.getMessage());
		} finally {
			DBResultSet.close(dbrs);
		}
		return vect;
	}
	
	public static int getCountPaidInvoice(String whereClause, long oidDispatchMat){
		int total = 0;
		DBResultSet dbrs = null;
		try {
			String sql = "SELECT COUNT(CBM."+ PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]+") AS CNT"
						+ " FROM "+ PstBillMain.TBL_CASH_BILL_MAIN +" CBM";
			String where = " WHERE CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
						+ " NOT IN (SELECT DMB." + PstMatDispatchBill.fieldNames[PstMatDispatchBill.FLD_CASH_BILL_MAIN_ID]
						+ " FROM "+ PstMatDispatchBill.TBL_MATDISPATCHBILL +" DMB) "
						+ " AND CBM."+ PstBillMain.fieldNames[PstBillMain.FLD_BILL_STATUS] +" = 2"
						+ " AND CBM."+ PstBillMain.fieldNames[PstBillMain.FLD_STATUS] + " = 0"
						+ " AND CBM."+ PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] 
						+ " = " + PstBillMain.TRANS_TYPE_CASH
						+ " AND CBM."+ PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] 
						+ " = " + PstBillMain.INVOICING_DRAFT;
			
			if(whereClause.length() > 0 && whereClause != null && !whereClause.equals("")){
				where += " AND " + whereClause;
			}
			
			sql += where;
			System.out.println("Sql for get paid invoice number: " + sql);
			
			dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();
			while(rs.next()){
				total = rs.getInt("CNT");
			}
			rs.close();
		} catch (Exception e) {
			System.out.println("Get Invoice Number Err: " + e.getMessage());
		} finally {
			DBResultSet.close(dbrs);
		}
		return total;
	}
	
    public static int getSumPaxByMaterial(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {

            String sql = "SELECT"
                + " SUM(cbm."+PstBillMain.fieldNames[PstBillMain.FLD_PAX_NUMBER]+") as "+PstBillMain.fieldNames[PstBillMain.FLD_PAX_NUMBER]+""
                + " FROM"
                + " "+PstBillDetail.TBL_CASH_BILL_DETAIL+" cbd"
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" cbm"
                + " ON cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+" = cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+""
                + " ";
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(""+PstBillMain.fieldNames[PstBillMain.FLD_PAX_NUMBER]+"");
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     *mencari total open bill berdasarkan parameter yang diberikan
     * @param limitStart
     * @param bMain
     * @param recordToGet
     * @param whereClause
     * @param order
     * @return
     * created : opie-eyek 20131201
     */
    public static int getCount(int limitStart, BillMain bMain, int recordToGet, String whereClause, String order) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
                 String sql = "SELECT COUNT(cm." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    + " FROM " +PstBillMain.TBL_CASH_BILL_MAIN+ "  cm LEFT JOIN " +PstMemberReg.TBL_CONTACT_LIST+ "  cl ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]+ " = cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_CONTACT_ID]
                    + " LEFT JOIN " +PstCurrencyType.TBL_POS_CURRENCY_TYPE+ "  ct ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]+ " = ct." +PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]
                    + " LEFT JOIN " +PstAppUser.TBL_APP_USER+ "  au ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]+ " = au."+PstAppUser.fieldNames[PstAppUser.FLD_USER_ID];

            String custId = "";
            
            if (bMain.getCustomerId() > 0) {
                custId = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID] +
                        " = '" + bMain.getCustomerId()+"'";
            }

            String invNumber = "";
            if (!bMain.getInvoiceNumber().equals("") && bMain.getInvoiceNumber().length() > 0) {
                invNumber = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER] +
                        " like '%" + bMain.getInvoiceNumber()+"%'";
            }

            String strDate = "";
            if (bMain.getStatusDate() != 0) {
                String startDate = Formater.formatDate(bMain.getDatefrom(), "yyyy-MM-dd " );
                String endDate = Formater.formatDate(bMain.getDateto(), "yyyy-MM-dd");
                strDate = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE] + " BETWEEN '" + startDate + " 00:00:00 ' AND '" + endDate + " 23:59:59'";
            }
            
            String location = "";
            if (bMain.getLocationId() != 0) {
                location = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID] +
                        " = '" + bMain.getLocationId()+"'";
            }

            String custName = "";
            if (!bMain.getCustName().equals("") && bMain.getCustName().length() > 0) {
                custName = " cl."+PstMemberReg.fieldNames[PstMemberReg.FLD_COMP_NAME] +
                        " LIKE '%"+bMain.getCustName()+"%'";
            }

             String personName = "";
            if (!bMain.getPersonName().equals("") && bMain.getPersonName().length() > 0) {
                personName = " cl."+PstMemberReg.fieldNames[PstMemberReg.FLD_PERSON_NAME] +
                        " LIKE '%"+bMain.getPersonName()+"%'";
            }
            
             String note = "";
            if (!bMain.getNotes().equals("") && bMain.getNotes().length() > 0) {
                note = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_NOTES] +
                        " LIKE '%"+bMain.getNotes()+"%'";
            }

            if (strDate.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause = whereClause + " AND " + strDate;
                } else {
                    whereClause = whereClause + strDate;
                }
            }

            if (custId.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + custId;
                } else {
                    whereClause = custId;
                }
            }
            if (invNumber.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + invNumber;
                } else {
                    whereClause = invNumber;
                }
            }

             if (custName.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + custName;
                } else {
                    whereClause = custName;
                }
            }

             if (personName.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + personName;
                } else {
                    whereClause = personName;
                }
            }
             
             if (note.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + note;
                } else {
                    whereClause = note;
                }
            }
             
             if (location.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + location;
                } else {
                    whereClause = location;
                }
            }  
             
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                 count = rs.getInt(1);
            }
            rs.close();

           return count;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    /**
     * Ari wiweka 20130717
     * count retur untuk sales order
     * @param whereClause
     * @return
     */
    public static int getCountRetur(String whereClause, BillMain bMain) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            //String sql = "SELECT COUNT(" + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT FROM " + TBL_CASH_BILL_MAIN;

            String sql = "SELECT COUNT(cm." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + ") AS CNT "
                    + " FROM " +PstBillMain.TBL_CASH_BILL_MAIN+ "  cm LEFT JOIN " +PstMemberReg.TBL_CONTACT_LIST+ "  cl ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]+ " = cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_CONTACT_ID]
                    + " LEFT JOIN " +PstCurrencyType.TBL_POS_CURRENCY_TYPE+ "  ct ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]+ " = ct." +PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]
                    + " LEFT JOIN " +PstAppUser.TBL_APP_USER+ "  au ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]+ " = au."+PstAppUser.fieldNames[PstAppUser.FLD_USER_ID];



            String custId = "";
            if (bMain.getCustomerId() > 0) {
                custId = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID] +
                        " = '" + bMain.getCustomerId()+"'";
            }

            String invNumber = "";
            if (bMain.getInvoiceNumber() != "" && bMain.getInvoiceNumber().length() > 0) {
                invNumber = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER] +
                        " = '" + bMain.getInvoiceNumber()+"'";
            }

             String strDate = "";
            if (bMain.getStatusDate() != 0) {
                String startDate = Formater.formatDate(bMain.getDatefrom(), "yyyy-MM-dd " );
                String endDate = Formater.formatDate(bMain.getDateto(), "yyyy-MM-dd");
                strDate = " cm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE] + " BETWEEN '" + startDate + " 00:00:00 ' AND '" + endDate + " 23:59:59'";
            }

             String custName = "";
            if (bMain.getCustName() != "" &&bMain.getCustName().length() > 0) {
                custName = " cl."+PstMemberReg.fieldNames[PstMemberReg.FLD_COMP_NAME] +
                        " LIKE '%"+bMain.getCustName()+"%'";
            }

             String personName = "";
            if (bMain.getPersonName() != "" && bMain.getPersonName().length() > 0) {
                personName = " cl."+PstMemberReg.fieldNames[PstMemberReg.FLD_PERSON_NAME] +
                        " LIKE '%"+bMain.getPersonName()+"%'";
            }

           /* String billDate = "";
            if (bMain.getBillDate() != null) {
                billDate = " (MAT." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE] +
                        " LIKE '%" + bMain.getBillDate() + "%')";
            }*/

             if (strDate.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause = whereClause + " AND " + strDate;
                } else {
                    whereClause = whereClause + strDate;
                }
            }

            if (custId.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + custId;
                } else {
                    whereClause = custId;
                }
            }
            if (invNumber.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + invNumber;
                } else {
                    whereClause = invNumber;
                }
            }

             if (custName.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + custName;
                } else {
                    whereClause = custName;
                }
            }

             if (personName.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause += " AND " + personName;
                } else {
                    whereClause = personName;
                }
            }
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }


    //count
    //+countPerCashier
    public static int getCountPerCashier(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstCashCashier.TBL_CASH_CASHIER + " CSH"
                    + " ON CBM." + fieldNames[FLD_CASH_CASHIER_ID]
                    + " = CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]
                    + " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " MSTR"
                    + " ON CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]
                    + " = MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    //Summary Transaction
    public static double getSummaryTransaction(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")"
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE " + whereClause;
            //" WHERE CBM." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+
            //" = " + oidCashCashier;

            //if (whereClause != null && whereClause.length() > 0)
            // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    //summary Transaction
    public static Vector listSummaryTranscation(int limitStart, int recordToGet, String whereClause) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT CBM." + fieldNames[FLD_TRANSACTION_STATUS]
                    + " , CBM." + fieldNames[FLD_DOC_TYPE]
                    + " , CBM." + fieldNames[FLD_TRANSCATION_TYPE]
                    + //" , COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ")" + " AS QTY_" + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] +
                    " , SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE " + whereClause
                    + " GROUP BY " + fieldNames[FLD_DOC_TYPE]
                    + ", CBM." + fieldNames[FLD_TRANSACTION_STATUS]
                    + ", CBM." + fieldNames[FLD_TRANSCATION_TYPE]
                    + " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS] + " DESC";

            //if(whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQl Summary Transaction : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                Vector temp = new Vector();
                BillMain billMain = new BillMain();
                Billdetail billDetail = new Billdetail();


                billMain.setTransactionStatus(rs.getInt(1));
                billMain.setDocType(rs.getInt(2));
                billMain.setTransctionType(rs.getInt(3));
                //count = rs.getInt(4);
                temp.add(billMain);

                billDetail.setTotalPrice(rs.getDouble("AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]));
                temp.add(billDetail);
                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    //summary Transaction
    public static Vector listSummaryTranscation2(int limitStart, int recordToGet, String whereClause) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql =  ""+  
                " SELECT " +
                " cbm.*, " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_STATUS]+", " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_ID]+", " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_CURRENCY_ID]+", " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+", " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_DATETIME]+", " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]+", " +
                " pt."+PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_NUMBER]+", " +
                " ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]+" " +
                " FROM " +
                " "+PstBillMain.TBL_CASH_BILL_MAIN+" cbm " +
                " INNER JOIN "+PstCashPayment.TBL_PAYMENT+" cp "+
                " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_BILL_MAIN_ID]+" " +
                " LEFT JOIN "+PstTableRoom.TBL_P2_TABLE+" pt " +
                " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_TABLE_ID]+" = pt."+PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_ID]+" " +
                " INNER JOIN "+PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM+" ps " +
                " ON cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+" = ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+" ";

            if(whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQl Summary Transaction : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                Vector temp = new Vector();
                BillMain billMain = new BillMain();
                CashPayments cashPayments = new CashPayments();
                TableRoom tableRoom = new TableRoom();
                PaymentSystem paymentSystem = new PaymentSystem();
                resultToObject(rs, billMain);
                temp.add(billMain);
                
                cashPayments.setOID(rs.getLong(PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_ID]));
                cashPayments.setPaymentStatus(rs.getInt(PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_STATUS]));
                cashPayments.setCurrencyId(rs.getLong(PstCashPayment.fieldNames[PstCashPayment.FLD_CURRENCY_ID]));
                cashPayments.setPaymentType(rs.getInt(PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]));
                cashPayments.setPaymentType(rs.getInt(PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]));
                cashPayments.setPayDateTime(rs.getDate(PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_DATETIME]));
                cashPayments.setAmount(rs.getDouble(PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]));
                temp.add(cashPayments);
                
                tableRoom.setTableNumber(rs.getString(PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_NUMBER]));
                temp.add(tableRoom);
                
                paymentSystem.setPaymentSystem(rs.getString(PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]));
                temp.add(paymentSystem);
                        
                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static Vector listSummaryTranscationReportHarian(int limitStart, int recordToGet, String whereClause) {
        return listSummaryTranscationReportHarian( limitStart,  recordToGet,  whereClause, "");
    }
    
    public static Vector listSummaryTranscationReportHarian(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql =  ""+  
                " SELECT " +
                " cbm.*, " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_STATUS]+", " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_ID]+", " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_CURRENCY_ID]+", " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+", " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_DATETIME]+", " +
                " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]+", " +
                " pt."+PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_NUMBER]+", " +
                " ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]+" " +
                " FROM " +
                " "+PstBillMain.TBL_CASH_BILL_MAIN+" cbm " +
                
//                " INNER JOIN "+PstCashPayment.TBL_PAYMENT+" cp "+
//                " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_BILL_MAIN_ID]+" " +
                " LEFT JOIN (SELECT * "+
                " FROM cash_payment "+
                " GROUP BY CASH_BILL_MAIN_ID) cp ON cbm.CASH_BILL_MAIN_ID = cp.CASH_BILL_MAIN_ID "+
                " LEFT JOIN "+PstTableRoom.TBL_P2_TABLE+" pt " +
                " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_TABLE_ID]+" = pt."+PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_ID]+" " +
                " LEFT JOIN "+PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM+" ps " +
                " ON cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+" = ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+" ";

            if(whereClause != null && whereClause.length() > 0){
                sql = sql + " WHERE " + whereClause;
            } 
            if(order != null && order.length() > 0){
                sql = sql + " ORDER BY " + order;
            } 
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQl Summary Transaction : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                Vector temp = new Vector();
                BillMain billMain = new BillMain();
                CashPayments cashPayments = new CashPayments();
                TableRoom tableRoom = new TableRoom();
                PaymentSystem paymentSystem = new PaymentSystem();
                resultToObject(rs, billMain);
                temp.add(billMain);
                
                cashPayments.setOID(rs.getLong(PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_ID]));
                cashPayments.setPaymentStatus(rs.getInt(PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_STATUS]));
                cashPayments.setCurrencyId(rs.getLong(PstCashPayment.fieldNames[PstCashPayment.FLD_CURRENCY_ID]));
                cashPayments.setPaymentType(rs.getInt(PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]));
                cashPayments.setPaymentType(rs.getInt(PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]));
                cashPayments.setPayDateTime(rs.getDate(PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_DATETIME]));
                cashPayments.setAmount(rs.getDouble(PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]));
                temp.add(cashPayments);
                
                tableRoom.setTableNumber(rs.getString(PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_NUMBER]));
                temp.add(tableRoom);
                
                paymentSystem.setPaymentSystem(rs.getString(PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]));
                temp.add(paymentSystem);
                        
                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    
    public static int countListSummaryTranscationReportHarian(int limitStart, int recordToGet, String whereClause, String order) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql =  ""+  
                " SELECT " +
                " COUNT(cbm.CASH_BILL_MAIN_ID) AS TOTAL " +
                " FROM " +
                " "+PstBillMain.TBL_CASH_BILL_MAIN+" cbm " +
                " LEFT JOIN (SELECT * "+
                " FROM cash_payment "+
                " GROUP BY CASH_BILL_MAIN_ID) cp ON cbm.CASH_BILL_MAIN_ID = cp.CASH_BILL_MAIN_ID "+
                " LEFT JOIN "+PstTableRoom.TBL_P2_TABLE+" pt " +
                " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_TABLE_ID]+" = pt."+PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_ID]+" " +
                " LEFT JOIN "+PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM+" ps " +
                " ON cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+" = ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+" ";

            if(whereClause != null && whereClause.length() > 0){
                sql = sql + " WHERE " + whereClause;
            } 
            if(order != null && order.length() > 0){
                sql = sql + " ORDER " + order;
            } 
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQl Summary Transaction : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                count = rs.getInt("TOTAL");
            }
            rs.close();
            return count;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    
    //summary Transaction
    public static Vector listSummaryTranscationGroupByDate(int limitStart, int recordToGet, String whereClause) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql =  ""  
                + " SELECT DATE("+fieldNames[FLD_BILL_DATE]+") AS "+fieldNames[FLD_BILL_DATE]+", "
                + " "+fieldNames[FLD_CASH_CASHIER_ID]+", "    
                + " SUM("+fieldNames[FLD_DISCOUNT]+") AS "+fieldNames[FLD_DISCOUNT]+", "
                + " SUM("+fieldNames[FLD_TAX_VALUE]+") AS "+fieldNames[FLD_TAX_VALUE]+", "
                + " SUM("+fieldNames[FLD_PAX_NUMBER]+") AS "+fieldNames[FLD_PAX_NUMBER]+", "
                + " SUM("+fieldNames[FLD_SERVICE_VALUE]+") AS "+fieldNames[FLD_SERVICE_VALUE]+" "
                + " FROM "+TBL_CASH_BILL_MAIN+"";

            if(whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQl Summary Transaction : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                Vector temp = new Vector();
                BillMain billMain = new BillMain(); 
                billMain.setCashCashierId(rs.getLong(fieldNames[FLD_CASH_CASHIER_ID]));
                billMain.setPaxNumber(rs.getInt(fieldNames[FLD_PAX_NUMBER]));
                billMain.setBillDate(rs.getDate(fieldNames[FLD_BILL_DATE]));
                billMain.setTaxValue(rs.getDouble(fieldNames[FLD_TAX_VALUE]));
                billMain.setDiscount(rs.getDouble(fieldNames[FLD_DISCOUNT]));
                billMain.setServiceValue(rs.getDouble(fieldNames[FLD_SERVICE_VALUE])); 
                lists.add(billMain);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    
    public static Vector listSummaryTranscationGroupByDateCashCashier(int limitStart, int recordToGet, String whereClause) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql =  ""  
                + " SELECT "
                + " SUM("+fieldNames[FLD_DISCOUNT]+") AS "+fieldNames[FLD_DISCOUNT]+", "
                + " SUM("+fieldNames[FLD_TAX_VALUE]+") AS "+fieldNames[FLD_TAX_VALUE]+", "
                + " SUM("+fieldNames[FLD_PAX_NUMBER]+") AS "+fieldNames[FLD_PAX_NUMBER]+", "
                + " SUM("+fieldNames[FLD_SERVICE_VALUE]+") AS "+fieldNames[FLD_SERVICE_VALUE]+" "
                + " FROM "+TBL_CASH_BILL_MAIN+"";

            if(whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQl Summary Transaction : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                Vector temp = new Vector();
                BillMain billMain = new BillMain(); 
                billMain.setPaxNumber(rs.getInt(fieldNames[FLD_PAX_NUMBER]));
                billMain.setTaxValue(rs.getDouble(fieldNames[FLD_TAX_VALUE]));
                billMain.setDiscount(rs.getDouble(fieldNames[FLD_DISCOUNT]));
                billMain.setServiceValue(rs.getDouble(fieldNames[FLD_SERVICE_VALUE])); 
                lists.add(billMain);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static Vector listSummaryTranscationGroupByShift(int limitStart, int recordToGet, String whereClause) {
        return listSummaryTranscationGroupByShift( limitStart,  recordToGet,  whereClause,false);
    }
    
    
    //summary Transaction
    public static Vector listSummaryTranscationGroupByShift(int limitStart, int recordToGet, String whereClause, boolean prosesWithReturn) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql =  ""  
                + " SELECT"
                + " cbm."+fieldNames[FLD_BILL_DATE]+","    
                + " cbm."+fieldNames[FLD_SHIFT_ID]+","
                + " cbm."+fieldNames[FLD_CASH_CASHIER_ID]+","    
                + " ps."+PstShift.fieldNames[PstShift.FLD_NAME]+","
                + " SUM(cbm."+fieldNames[FLD_PAX_NUMBER]+") AS "+fieldNames[FLD_PAX_NUMBER]+","
                + " SUM(cbm."+fieldNames[FLD_DISCOUNT]+") AS "+fieldNames[FLD_DISCOUNT]+","
                + " SUM(cbm."+fieldNames[FLD_TAX_VALUE]+") AS "+fieldNames[FLD_TAX_VALUE]+","
                + " SUM(cbm."+fieldNames[FLD_SERVICE_VALUE]+") AS "+fieldNames[FLD_SERVICE_VALUE]+""
                + " FROM "+TBL_CASH_BILL_MAIN+" cbm INNER JOIN "+PstShift.TBL_SHIFT+" ps"
                + " ON cbm."+fieldNames[FLD_SHIFT_ID]+" = ps."+PstShift.fieldNames[PstShift.FLD_SHIFT_ID]+"";

            if(whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQl Summary Transaction : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                Vector temp = new Vector();
                
                BillMain billMain = new BillMain();  
                Shift shift = new Shift();
                //cek apakah ada return transaksi pada saaat itu, klo ada kurangi
                double taxValue=0;
                double serviceValue=0;
                double discountValue=0;
                billMain.setBillDate(rs.getDate(fieldNames[FLD_BILL_DATE]));
                billMain.setCashCashierId(rs.getLong(fieldNames[FLD_CASH_CASHIER_ID]));
                if(prosesWithReturn){
                    String whereMainByShift=""
                        + " DATE(cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]+") = '"+billMain.getBillDate()+"'"
                        + " AND cbm."+PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID]+"='"+billMain.getCashCashierId()+"' "
                        + " AND ("
                        + "( cbm."
                        + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]+"='1' "
                        + "AND cbm."+PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]+"='0' "
                        + "AND cbm."+PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]+"='0' "
                        + "))"
                        + " GROUP BY cbm."+PstBillMain.fieldNames[PstBillMain.FLD_SHIFT_ID]+"";
                    Vector listBillMainShiftx = listSummaryTranscationGroupByShiftReturnTransaction(0, 0, whereMainByShift,"");

                    if(listBillMainShiftx.size()>0){
                        for (int j = 0; j<listBillMainShiftx.size();j++){
                            Vector dataTemp = (Vector)listBillMainShiftx.get(j);
                            BillMain billMainShift = (BillMain)dataTemp.get(0);
                            taxValue = billMainShift.getTaxValue();
                            serviceValue =  billMainShift.getServiceValue();
                            discountValue =  billMainShift.getDiscount();
                        }
                    }
                }
                
                billMain.setShiftId(rs.getLong(fieldNames[FLD_SHIFT_ID]));
                billMain.setTaxValue(rs.getDouble(fieldNames[FLD_TAX_VALUE]) - taxValue);
                billMain.setDiscount(rs.getDouble(fieldNames[FLD_DISCOUNT]) - discountValue);
                billMain.setServiceValue(rs.getDouble(fieldNames[FLD_SERVICE_VALUE]) - serviceValue); 
                
                billMain.setPaxNumber(rs.getInt(fieldNames[FLD_PAX_NUMBER])); 
                shift.setName(rs.getString(PstShift.fieldNames[PstShift.FLD_NAME]));
                
                temp.add(billMain);
                temp.add(shift);
                
                lists.add(temp);
                
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    
    public static Vector listSummaryTranscationGroupByShiftReturnTransaction(int limitStart, int recordToGet, String whereClause, String whereReturnTransaction) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql =  ""  
                + " SELECT"
                + " cbm."+fieldNames[FLD_SHIFT_ID]+","
                + " ps."+PstShift.fieldNames[PstShift.FLD_NAME]+","
                + " SUM(cbm."+fieldNames[FLD_PAX_NUMBER]+") AS "+fieldNames[FLD_PAX_NUMBER]+","
                + " SUM(cbm."+fieldNames[FLD_DISCOUNT]+") AS "+fieldNames[FLD_DISCOUNT]+","
                + " SUM(cbm."+fieldNames[FLD_TAX_VALUE]+") AS "+fieldNames[FLD_TAX_VALUE]+","
                + " SUM(cbm."+fieldNames[FLD_SERVICE_VALUE]+") AS "+fieldNames[FLD_SERVICE_VALUE]+""
                + " FROM "+TBL_CASH_BILL_MAIN+" cbm INNER JOIN "+PstShift.TBL_SHIFT+" ps"
                + " ON cbm."+fieldNames[FLD_SHIFT_ID]+" = ps."+PstShift.fieldNames[PstShift.FLD_SHIFT_ID]+"";

            if(whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQl Summary Transaction : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                Vector temp = new Vector();
                
                BillMain billMain = new BillMain();  
                Shift shift = new Shift();
                billMain.setShiftId(rs.getLong(fieldNames[FLD_SHIFT_ID]));
                
                billMain.setTaxValue(rs.getDouble(fieldNames[FLD_TAX_VALUE]));
                billMain.setDiscount(rs.getDouble(fieldNames[FLD_DISCOUNT]));
                billMain.setServiceValue(rs.getDouble(fieldNames[FLD_SERVICE_VALUE])); 
                
                billMain.setPaxNumber(rs.getInt(fieldNames[FLD_PAX_NUMBER])); 
                shift.setName(rs.getString(PstShift.fieldNames[PstShift.FLD_NAME]));
                
                temp.add(billMain);
                temp.add(shift);
                
                lists.add(temp);
                
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    //list to get summary amount, tax_value, service_value and discount
    public static Vector listForSummary(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT SUM("+fieldNames[FLD_AMOUNT]+") AS "+fieldNames[FLD_AMOUNT]+", "
                + " SUM("+fieldNames[FLD_TAX_VALUE]+")AS "+fieldNames[FLD_TAX_VALUE]+", "
                + " SUM("+fieldNames[FLD_SERVICE_VALUE]+") AS "+fieldNames[FLD_SERVICE_VALUE]+", "
                + " SUM("+fieldNames[FLD_DISCOUNT]+") AS "+fieldNames[FLD_DISCOUNT]+","
                + " SUM("+fieldNames[FLD_PAX_NUMBER]+") AS "+fieldNames[FLD_PAX_NUMBER]+""
                + " FROM "+TBL_CASH_BILL_MAIN+" AS cbm "
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+"";
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            //System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillMain billMain = new BillMain();
                //resultToObject(rs, billMain);
                billMain.setAmount(rs.getDouble(fieldNames[FLD_AMOUNT]));
                billMain.setTaxValue(rs.getDouble(fieldNames[FLD_TAX_VALUE]));
                billMain.setServiceValue(rs.getDouble(fieldNames[FLD_SERVICE_VALUE]));
                billMain.setDiscount(rs.getDouble(fieldNames[FLD_DISCOUNT]));
                billMain.setPaxNumber(rs.getInt(fieldNames[FLD_PAX_NUMBER]));
                lists.add(billMain);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static Vector listPaymentForSummary(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT DISTINCT(cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+") AS "+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+", "
                + " ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]+","
                + " ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_TYPE]+""
                + " FROM "+PstCashPayment.TBL_PAYMENT+" AS cp "
                + " INNER JOIN "+PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM+" AS ps "
                + " ON cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+" = ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+" "
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_BILL_MAIN_ID]+" "
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+""
                + "";
                
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            //System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                PaymentSystem paymentSystem = new PaymentSystem();
                paymentSystem.setOID(rs.getLong(""+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+""));
                paymentSystem.setPaymentSystem(rs.getString(""+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]+""));
                paymentSystem.setPaymentType(rs.getInt(""+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_TYPE]+""));

                lists.add(paymentSystem);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static Vector listMaterialForSummary(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT DISTINCT(pc.CATEGORY_ID), pc.Name "
                + " FROM pos_category AS pc "
                + " INNER JOIN pos_material AS pm ON pm.CATEGORY_ID = pc.CATEGORY_ID "
                + " INNER JOIN cash_bill_detail AS cbd ON cbd.MATERIAL_ID = pm.MATERIAL_ID"
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm  "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+" "                
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+"";
                            
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            //System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Category category = new Category();
                category.setOID(rs.getLong(PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]));
                category.setName(rs.getString(PstCategory.fieldNames[PstCategory.FLD_NAME]));
                lists.add(category);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static Vector listMaterialCategoryForSummary(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT SUM(cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+") as "+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+", "
                + " SUM(cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+") as "+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+" "
                + " from "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS cbd "
                + " INNER JOIN "+PstMaterial.TBL_MATERIAL+" As pm "
                + " ON cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+" = pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+""               
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm  "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+" "                
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+"";
                            
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            //System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Billdetail billDetail = new Billdetail();
                billDetail.setQty(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+""));
                billDetail.setTotalPrice(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+""));
                lists.add(billDetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    //list to get summary amount, tax_value, service_value and discount
    public static Vector listVoidMaterialForSummary(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT cbv."+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_MATERIAL_ID]+",  "
                + " SUM(cbv."+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_QUANTITY]+") AS "+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_QUANTITY]+","
                + " SUM(cbv."+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_TOTAL_PRICE]+") AS "+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_TOTAL_PRICE]+""
                + " FROM "+PstBillDetailVoid.TBL_CASH_BILL_DETAIL+" AS cbv "
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cbv."+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_BILL_MAIN_ID]+" "              
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+"";
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }
            
            sql = sql + "GROUP BY cbv."+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_MATERIAL_ID]+"";

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            //System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Billdetail billdetail = new Billdetail();
                billdetail.setMaterialId(rs.getLong(""+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_MATERIAL_ID]+""));
                billdetail.setQty(rs.getDouble(""+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_QUANTITY]+""));
                billdetail.setTotalPrice(rs.getDouble(""+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_TOTAL_PRICE]+""));
                lists.add(billdetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static Vector listDiscForSummary(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT cbm."+PstBillMain.fieldNames[PstBillMain.FLD_DISC_PCT]+", "
                + " COUNT(cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+") AS "+PstBillMain.fieldNames[PstBillMain.FLD_PAX_NUMBER]+", "
                + " SUM(cbm."+PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT]+") AS "+PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT]+" "
                + " FROM "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm "
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+"";
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }
            
            sql = sql + "GROUP BY cbm."+PstBillMain.fieldNames[PstBillMain.FLD_DISC_PCT]+"";

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            //System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillMain billMain = new BillMain();
                billMain.setDiscPct(rs.getDouble(""+PstBillMain.fieldNames[PstBillMain.FLD_DISC_PCT]+""));
                billMain.setPaxNumber(rs.getInt(""+PstBillMain.fieldNames[PstBillMain.FLD_PAX_NUMBER]+""));
                billMain.setDiscount(rs.getDouble(""+PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT]+""));
                lists.add(billMain);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static Vector listSummaryOpenBill(int limitStart, int recordToGet, String whereClause) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql =  " "
                + " SELECT COUNT(cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+") AS "+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+","
                + " SUM(cbm."+PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE]+") AS "+PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE]+",  "
                + " SUM(cbm."+PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT]+") AS "+PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT]+","
                + " SUM(cbm."+PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE]+") AS "+PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE]+", "
                + " SUM(cbm."+PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT]+") AS "+PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT]+"  "
                + " FROM "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm  "
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc  "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+"  "
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm "
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+" " ; 

            if(whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQl Summary Transaction : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                Vector temp = new Vector();
                BillMain billMain = new BillMain(); 
                billMain.setPaxNumber(rs.getInt(fieldNames[FLD_BILL_MAIN_ID]));
                billMain.setTaxValue(rs.getDouble(fieldNames[FLD_TAX_VALUE]));
                billMain.setDiscount(rs.getDouble(fieldNames[FLD_DISCOUNT]));
                billMain.setServiceValue(rs.getDouble(fieldNames[FLD_SERVICE_VALUE])); 
                billMain.setAmount(rs.getDouble(fieldNames[FLD_AMOUNT])); 
                lists.add(billMain);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    
    //get count bill
    public static int getCountForSummary(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT COUNT(cbm."+fieldNames[FLD_BILL_MAIN_ID]+") AS "+fieldNames[FLD_BILL_MAIN_ID]+""           
                + " FROM "+TBL_CASH_BILL_MAIN+" AS cbm "
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+""
                + " INNER JOIN "+PstCashPayment.TBL_PAYMENT+" AS cp "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_BILL_MAIN_ID]+"";
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static double getSumCashPaymentForSummary(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT SUM(cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]+") AS "+PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]+" "
                + " FROM "+PstCashPayment.TBL_PAYMENT+" AS cp "
                + " INNER JOIN "+PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM+" AS ps "
                + " ON cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+" = ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+" "
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_BILL_MAIN_ID]+" "
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+"";
               
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static double getSumCashReturnPaymentForSummary(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT SUM(crp."+PstCashReturn.fieldNames[PstCashReturn.FLD_AMOUNT]+") AS "+PstCashReturn.fieldNames[PstCashReturn.FLD_AMOUNT]+" "
                + " FROM "+PstCashReturn.TBL_RETURN+" crp " 
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm  "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = crp."+PstCashReturn.fieldNames[PstCashReturn.FLD_BILLMAIN_ID]+" "                
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+"";
               
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static double getSumCostForSummary(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT SUM(cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_COST]+"*cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+") AS "+PstBillDetail.fieldNames[PstBillDetail.FLD_COST]+" "
                + " FROM "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS cbd"
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm  "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+" "                
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+"";
               
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    

    public static int getCountQtySummary(String whereClause, String whereClause2) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE " + whereClause
                    + " AND " + whereClause2
                    + " GROUP BY " + fieldNames[FLD_DOC_TYPE]
                    + ", CBM." + fieldNames[FLD_TRANSACTION_STATUS]
                    + ", CBM." + fieldNames[FLD_TRANSCATION_TYPE]
                    + " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getSummaryTotalPrice(String whereClause, String whereClause2) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE " + whereClause
                    + " AND " + whereClause2
                    + " GROUP BY " + fieldNames[FLD_DOC_TYPE]
                    + ", CBM." + fieldNames[FLD_TRANSACTION_STATUS]
                    + ", CBM." + fieldNames[FLD_TRANSCATION_TYPE]
                    + " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }
    
    
    public static double getSummaryOpenBill(long oidCashCashier) {
       return getSummaryOpenBill(oidCashCashier,"");
    }
    //Summary Transaction
    //Open Bill
    public static double getSummaryOpenBill(long oidCashCashier, String where) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE "
                    + "" + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1";
                    
            if(oidCashCashier==0){
                sql = sql+" AND ( "+where+" ) ";
            }else{
                sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
            }
            
             
            sql=sql+ " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }
    
    public static int getCountQtySummaryOpenBill(long oidCashCashier) {
        return getCountQtySummaryOpenBill(oidCashCashier,"");
    }
    
    //count Open Bill
    public static int getCountQtySummaryOpenBill(long oidCashCashier,String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1";
                    
                    if(oidCashCashier==0){
                        sql = sql+" AND ( "+where+" ) ";
                    }else{
                        sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                    }
                    
                    sql=sql+ " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    public static int getCountTransSummaryOpenBill(long oidCashCashier) {
        return getCountTransSummaryOpenBill(oidCashCashier,"");
    }
    
    //count Open Bill
    public static int getCountTransSummaryOpenBill(long oidCashCashier,String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " WHERE CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1";
                    
                    if(oidCashCashier==0){
                        sql = sql+" AND ( "+where+" ) ";
                    }else{
                        sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                    }
                    
                    sql=sql+ " ORDER BY CBM." + fieldNames[FLD_TRANSACTION_STATUS];

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    
    /**
     * cek total pax open bill
     * @param tableId
     * @return 
     */
    public static int getSumPaxOpenBillFromTable(String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(CBM." + fieldNames[FLD_PAX_NUMBER] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " WHERE "
                    + " CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + "=0"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1";
              if (where != null && where.length() > 0){
                  sql = sql +" AND "+ where ;
              }      
               sql=sql+ " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    public static int getCountOpenBillFromTable(String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " WHERE "
                    + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1";
            
                if (where != null && where.length() > 0){
                      sql = sql +" AND "+ where ;
                } 
                
                sql = sql + " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static double getSummaryReturn(long oidCashCashier) {
       return getSummaryReturn(oidCashCashier,"");
    }
    //Return
    public static double getSummaryReturn(long oidCashCashier, String where) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]
                    + //adding tax, service
                    //by mirahu 26122011
                    //adding discount
                    //by opie-eyek 11102012
                    ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE] + " AS TAX_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE] + " AS SERVICE_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT] + " AS DISCOUNT_VALUE"
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE "
                    + "" + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =1"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0";
                
                    if(oidCashCashier==0){
                        sql = sql+" AND ( "+where+" ) ";
                    }else{
                        sql = sql+ " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                    }
                    
                    
                            
             sql=sql+" GROUP BY CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            // sql = sql + " WHERE " + whereClause;
            double countPrice = 0.0;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                //count = rs.getDouble(1);
                count += rs.getDouble(1) + rs.getDouble("TAX_VALUE") + rs.getDouble("SERVICE_VALUE") - rs.getDouble("DISCOUNT_VALUE");

            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static int getCountQtySummaryReturn(long oidCashCashier) {
        return getCountQtySummaryReturn(oidCashCashier,"");
    }
    
    //count Return
    public static int getCountQtySummaryReturn(long oidCashCashier, String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = //"SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    "SELECT SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE  " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =1"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0";
            
            if(oidCashCashier==0){
                sql = sql+" AND ( "+where+" ) ";
            }else{
                sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
            }
            
            sql=sql+ " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static int getCountTransSummaryReturn(long oidCashCashier) {
        return getCountTransSummaryReturn(oidCashCashier,"");
    }
    
    //count Return
    public static int getCountTransSummaryReturn(long oidCashCashier, String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " WHERE  CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =1"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0";
            
            if(oidCashCashier==0){
                sql = sql+" AND ( "+where+" ) ";
            }else{
                sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
            }
            
            sql=sql+ " ORDER BY CBM." + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    public static double getSummaryCancel(long oidCashCashier) {
        return getSummaryCancel(oidCashCashier,"");
    }
    //Cancel
    public static double getSummaryCancel(long oidCashCashier, String where) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE "
                    
                    + "" + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=2";
            
            
                if(oidCashCashier==0){
                    sql = sql+" AND ( "+where+" ) ";
                }else{
                    sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                }  
                 //"CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                 sql= sql + " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static int getCountQtySummaryCancel(long oidCashCashier) {
        return getCountQtySummaryCancel(oidCashCashier,"");
    }
    
    //count Cancel
    public static int getCountQtySummaryCancel(long oidCashCashier,String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = //"SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    "SELECT SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=2";
                    
                    if(oidCashCashier==0){
                        sql = sql+" AND ( "+where+" ) ";
                    }else{
                        sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                    }
            
                    sql=sql+ " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    public static int getCountTransSummaryCancel(long oidCashCashier) {
        return getCountTransSummaryCancel(oidCashCashier,"");
    }
    
    //count Cancel
    public static int getCountTransSummaryCancel(long oidCashCashier,String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " WHERE CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=2";
                    
                    if(oidCashCashier==0){
                        sql = sql+" AND ( "+where+" ) ";
                    }else{
                        sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                    }
            
                    sql=sql+ " ORDER BY CBM." + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    
     public static double getSummaryCash(long oidCashCashier) {
         return getSummaryCash(oidCashCashier, "");
     }
    //Cash
    public static double getSummaryCash(long oidCashCashier, String where) {
        double count = 0;
        double countPrice = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]
                    + //adding tax, service
                    //by mirahu 26122011
                    //adding disc
                    //add opie  19-06-2012
                    ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE] + " AS TAX_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE] + " AS SERVICE_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT] + " AS DISC_VALUE"
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0";
            
            if(oidCashCashier==0){
                sql = sql+" AND ( "+where+" ) ";
            }else{
                sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
            }
            
            
            sql=sql+" GROUP BY CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                //count = rs.getDouble(1);
                count += rs.getDouble(1) + rs.getDouble("TAX_VALUE") + rs.getDouble("SERVICE_VALUE") - rs.getDouble("DISC_VALUE");
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }
    
    public static int getCountQtySummaryCash(long oidCashCashier) {
        return getCountQtySummaryCash(oidCashCashier,"");
    }
    
    //count Cash
    public static int getCountQtySummaryCash(long oidCashCashier, String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = //"SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    "SELECT SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0";
            
                if(oidCashCashier==0){
                    sql = sql+" AND ( "+where+" ) ";
                }else{
                    sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                }
            
            
                    sql=sql+ " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    
    public static int getCountTransSummaryCash(long oidCashCashier) {
        return getCountTransSummaryCash(oidCashCashier,"");
    }
    
    //count Cash
    public static int getCountTransSummaryCash(long oidCashCashier, String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " WHERE CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=0"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0";
            
                if(oidCashCashier==0){
                    sql = sql+" AND ( "+where+" ) ";
                }else{
                    sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                }
            
            
                    sql=sql+ " ORDER BY CBM." + fieldNames[FLD_TRANSACTION_STATUS];
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static double getSummarySalesCredit(long oidCashCashier) {
        return getSummarySalesCredit(oidCashCashier,"");
    }
    
    //Sales Credit
    public static double getSummarySalesCredit(long oidCashCashier, String where) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT  SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" + " AS AMOUNT_" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]
                    + //adding tax, service
                    //by mirahu 26122011
                    ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE] + " AS TAX_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE] + " AS SERVICE_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT] + " AS DISCOUNT_VALUE"
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=1"
                    + //" AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1" +
                    " AND (" + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1"
                    + " OR " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0)";
                
                if(oidCashCashier==0){
                    sql = sql+" AND ( "+where+" ) ";
                }else{
                    sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                }  
                    
                sql = sql + " GROUP BY CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                        + " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];

            //if (whereClause != null && whereClause.length() > 0)
            // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                //count = rs.getDouble(1);
                count += (rs.getDouble(1) + rs.getDouble("TAX_VALUE") + rs.getDouble("SERVICE_VALUE")) - rs.getDouble("DISCOUNT_VALUE");
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }
    
    public static double getSummaryByPaymentSystem(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "" +
                " SELECT " +
                " SUM(cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]+") as "+PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]+" " +
                " FROM" +
                " "+PstBillMain.TBL_CASH_BILL_MAIN+" cbm INNER JOIN "+PstCashPayment.TBL_PAYMENT+" cp " +
                " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" =cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_BILL_MAIN_ID]+" " +
                " INNER JOIN "+PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM+" ps " +
                " ON cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+" = ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+"";
 
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count += (rs.getDouble(PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]));
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }
    
    public static int getCountQtySummarySalesCredit(long oidCashCashier) {
        return  getCountQtySummarySalesCredit(oidCashCashier,"");
    }
    
    //count Sales Credit
    public static int getCountQtySummarySalesCredit(long oidCashCashier, String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = //"SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    " SELECT SUM(CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " INNER JOIN " + PstBillDetail.TBL_CASH_BILL_DETAIL + " CBD"
                    + " ON CBM." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE " + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=1"
                    + " AND (" + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1"
                    + " OR " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0)";
                    
                if(oidCashCashier==0){
                    sql = sql+" AND ( "+where+" ) ";
                }else{
                    sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                }    
            
                    sql=sql+ " ORDER BY " + fieldNames[FLD_TRANSACTION_STATUS];


            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static int getCountTransSummarySalesCredit(long oidCashCashier) {
        return  getCountTransSummarySalesCredit(oidCashCashier,"");
    }
    
    //count Sales Credit
    public static int getCountTransSummarySalesCredit(long oidCashCashier, String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CBM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " CBM"
                    + " WHERE CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " =0"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "=1"
                    + " AND (CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=1"
                    + " OR CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "=0)";
                    
                if(oidCashCashier==0){
                    sql = sql+" AND ( "+where+" ) ";
                }else{
                    sql = sql + " AND CBM." + fieldNames[FLD_CASH_CASHIER_ID]+ " = " + oidCashCashier;
                }    
            
                    sql=sql+ " ORDER BY CBM." + fieldNames[FLD_TRANSACTION_STATUS];


            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    

    public static void resultToObject(ResultSet rs, BillMain billMain) {
        try {
            billMain.setOID(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]));
            billMain.setCashCashierId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID]));
            billMain.setLocationId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID]));
            Date date = DBHandler.convertDate(rs.getDate(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]), rs.getTime(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]));
            billMain.setBillDate(date);
            billMain.setInvoiceNo(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO]));
            billMain.setAppUserId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]));
            billMain.setShiftId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_SHIFT_ID]));
            billMain.setDiscType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_DISC_TYPE]));
            billMain.setDiscount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT]));
            billMain.setTaxPercentage(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_PERCENTAGE]));
            billMain.setTaxValue(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE]));
            billMain.setServicePct(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_PCT]));
            billMain.setServiceValue(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE]));
            billMain.setBillStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_BILL_STATUS]));
            billMain.setSalesCode(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]));

            billMain.setInvoiceNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]));
            billMain.setInvoiceCounter(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_COUNTER]));
            billMain.setTransType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANS_TYPE]));
            billMain.setDocType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]));


            billMain.setCashPendingOrderId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CASH_PENDING_ORDER_ID]));
            billMain.setCustomerId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]));
            billMain.setTransctionType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]));
            billMain.setTransactionStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]));
            billMain.setCoverNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_COVER_NUMBER]));
            billMain.setSpecialId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_SPECIAL_ID]));
            billMain.setSpecialFlag(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_SPECIAL_FLAG]));

            billMain.setParentId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID]));

            billMain.setGuestName(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_GUEST_NAME]));
            billMain.setNotes(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_NOTES]));

            billMain.setCurrencyId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]));
            billMain.setRate(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_RATE]));

            //Delivery Address
            billMain.setShippingAddress(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_ADDRESS]));
            billMain.setShippingCity(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_CITY]));
            billMain.setShippingProvince(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_PROVINCE]));
            billMain.setShippingCountry(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_COUNTRY]));
            billMain.setShippingZipCode(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_ZIP]));
            billMain.setShippingPhoneNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_PH_NUMBER]));
            billMain.setShippingMobilePhone(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_MOBILE_NUMBER]));
            billMain.setShippingFax(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_FAX]));

            //untuk total penjualan
            billMain.setAmount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT]));
            billMain.setPaidAmount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_PAID_AMOUNT]));
            billMain.setDiscPct(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_DISC_PCT]));

            //untuk type sales order
            billMain.setTypeSalesOrder(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TYPE_SALES_ORDER]));
            billMain.setDateTermOfPayment(rs.getDate(PstBillMain.fieldNames[PstBillMain.FLD_DATE_TERM_OF_PAYMENT]));
            
            billMain.setLocationId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_STOCK_LOCATION_ID]));
            
            billMain.setRoomID(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_ROOM_ID]));
            billMain.setTableId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_TABLE_ID]));
            
            billMain.setPaxNumber(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_PAX_NUMBER]));
            billMain.setEventName(rs.getString(fieldNames[FLD_EVENT_NAME]));
            //added by dewok 20180420
            billMain.setParentSalesOrderId(rs.getLong(fieldNames[FLD_PARENT_SALES_ORDER_ID]));
            //added by dewok 20180423
            billMain.setOrderDate(rs.getDate(fieldNames[FLD_ORDER_DATE]));
            billMain.setIsService(rs.getInt(fieldNames[FLD_IS_SERVICE]));
            billMain.setStatusInv(rs.getInt(fieldNames[FLD_STATUS_INVOICING]));
            billMain.setNegaraId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_ID_NEGARA]));
            billMain.setGender(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_GENDER]));
            
            billMain.setStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_STATUS]));
            billMain.setShippingDate(rs.getTimestamp(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_DATE]));
            billMain.setFlightNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_FLIGHT_NUMBER]));
            billMain.setAppUserSalesId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_APP_USER_SALES_ID]));
            billMain.setDoPersonId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_DO_PERSON_ID]));
            
        } catch (Exception e) {
            System.out.println("err on result to object :  " + e.toString());
            e.printStackTrace();
        }
    }

    public static boolean checkOID(long cashBillMainId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_MAIN
                    + " WHERE " + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " = " + cashBillMainId;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    /**
     * bobo
     * pembuatan number invoice yang di counter berdasarkan
     * lokasi dan cashier number
     * retrun = TTBBCCCCC
     * TT = tahun
     * BB = bulan
     * CCCCC = counter
     */
    public static String generateNumberInvoice(Date dtNow, long locationId, int cashierNumber, int docType) {
        //Date dtNow = billMain.getBillDate();
        String invoiceNumber = "";
        try {
            invoiceNumber = Formater.formatDate(dtNow, "yy");
            invoiceNumber = invoiceNumber + Formater.formatDate(dtNow, "MM");

            int counter = getCounterTransaction(locationId, cashierNumber, docType);
            //if(counter > 99999)
            // counter = 1;

            String maxCounter = "99999";
            int count = maxCounter.length() - String.valueOf(counter).length();
            if (count > 0) {
                for (int k = 0; k < count; k++) {
                    invoiceNumber = invoiceNumber + "0";
                }
            }
            invoiceNumber = invoiceNumber + String.valueOf(counter);

        } catch (Exception e) {
            System.out.println("ERR GENERATE INVOICE NUMBER : " + e.toString());
        }
        return invoiceNumber;
    }

    public static String generateNumberInvoice(Date dtNow, int docType) {
        //Date dtNow = billMain.getBillDate();
        String invoiceNumber = "";
        try {
            invoiceNumber = Formater.formatDate(dtNow, "yy");
            invoiceNumber = invoiceNumber + Formater.formatDate(dtNow, "MM");

            int counter = getCounterTransaction(docType);
            //if(counter > 99999)
            // counter = 1;

            String maxCounter = "99999";
            int count = maxCounter.length() - String.valueOf(counter).length();
            if (count > 0) {
                for (int k = 0; k < count; k++) {
                    invoiceNumber = invoiceNumber + "0";
                }
            }
            invoiceNumber = invoiceNumber + String.valueOf(counter);

        } catch (Exception e) {
            System.out.println("ERR GENERATE INVOICE NUMBER : " + e.toString());
        }
        return invoiceNumber;
    }

    /**
     * bobo
     * pencarian counter yang terbesar sesuai dengan lokasi dan cashier number
     * return adalah int counter yang sudah di tambah dengan 1
     */
    public static int getCounterTransaction(long locationId, int cashierNumber, int docType) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT MAX(" + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_COUNTER] + ") AS MNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " AS BILL INNER JOIN " + PstCashCashier.TBL_CASH_CASHIER + " AS CSH "
                    + " ON BILL." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID] + " = CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]
                    + " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " AS MSTR "
                    + " ON CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID] + " = MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]
                    + " WHERE BILL." + PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID] + " = " + locationId
                    + " AND MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER] + "=" + cashierNumber
                    + " AND BILL." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " = " + docType;

            //System.out.println("SQL > "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                count = rs.getInt("MNT");
            }
            rs.close();
            count = count + 1;
            return count;
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static int getCounterTransaction(int docType) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT MAX(" + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_COUNTER] + ") AS MNT "
                    + " FROM " + TBL_CASH_BILL_MAIN + " AS BILL "
                    + " WHERE BILL." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + " = " + docType;

            //System.out.println("SQL > "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                count = rs.getInt("MNT");
            }
            rs.close();
            count = count + 1;
            return count;
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /* set billmain with counter, bill number, invoice number */
    public static BillMain setBillMain() {
        return new BillMain();
    }

    public static BillMain findByInvoiceNumber(String invoiceNumber) {
        BillMain found = null;
        String whereClause = PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER] + "='" + invoiceNumber + "' ";
        Vector result = PstBillMain.list(0, 1, whereClause, "");
        if (result.size() > 0) {
            BillMain temp = (BillMain) result.get(0);
            found = temp;
        }
        return found;
    }

    public static Vector getTransactionReturnList(String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_MAIN;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillMain billMain = new BillMain();
                resultToObject(rs, billMain);
                lists.add(billMain);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static void main(String[] args) {
        try {
            BillMain billMain = new BillMain();
            billMain.setBillDate(new Date());
            billMain.setLocationId(504404223189962406L);
            System.out.println("COUNTER : " + getCounterTransaction(1, 1, 0));
            System.out.println("COUNTER : " + generateNumberInvoice(new Date(), 1, 1, 0));

        } catch (Exception e) {
        }
    }

     /**
     * update opie-eyek 20130917
     * update sales order apakah sudah semua ter delivery dari gudang atau tidak
     * @param oidCashCashier
     * @return
     */
    public static long updateSalesOrder(long oidBillMain, int docType, int transType, int transStatus,int statusInvoicing) {
        //jika qtyMatch = true, maka update cash bill main sales order menjadi On Prosess (doc_type=0, Transaction_type=0, Transaction_status=3)
        //jika qtyMatch = false, maka update cash bill main sales order menjadi  Done (doc_type=0, Transaction_type=0, Transaction_status=4)
        String sql = "UPDATE " + TBL_CASH_BILL_MAIN +
                " SET "+fieldNames[PstBillMain.FLD_DOC_TYPE]+ " = '" + docType + "'"+
                ", "+fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]+ " = '" + transStatus + "'"+
                ", "+fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]+ " = '" + transType + "'"+
                ", "+fieldNames[PstBillMain.FLD_STATUS_INVOICING]+ " = '" + statusInvoicing + "'"+
                " WHERE " + fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "'";
        try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {
        }
        return oidBillMain;
    }


    /**
     * cek qty booking
     * @param locId
     * @param matId
     * @param matPeriode
     * @return
     *    sql = SELECT SUM(CBD.QTY) FROM cash_bill_detail AS CBD
                INNER JOIN cash_bill_main AS CBM
                ON CBM.CASH_BILL_MAIN_ID=CBD.CASH_BILL_MAIN_ID
                WHERE CBM.DOC_TYPE=0 AND CBM.TRANS_TYPE=0 AND CBM.TRANSACTION_STATUS=1 AND CBD.MATERIAL_ID='504404535339339794'
                AND (CBM.STATUS_INVOICING=0 OR CBM.STATUS_INVOICING=1);
     */
    public static double getStockBooking(long locId, long matId) {
        double sum = 0;
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT SUM(CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+") FROM "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS CBD "+
                         " INNER JOIN "+TBL_CASH_BILL_MAIN+" AS CBM " +
                         " ON CBM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+"=CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+""+
                         " WHERE "+
                         " CBM."+PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]+"='"+TRANS_STATUS_CLOSE+"' AND "+
                         " CBM."+PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]+"='"+TRANS_STATUS_CLOSE+"' AND "+
                         " CBM."+PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]+"='"+TRANS_STATUS_OPEN+"' AND "+
                         " CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+"='"+matId+"'"+
                         " AND (CBM."+PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]+"='"+INVOICING_DRAFT+"' OR CBM."+PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]+"='"+INVOICING_ON_PROSES+"')";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                sum = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return sum;
    }


    public static double getStockBookingNonSalesOrder(long locId, long matId) {
        double sum = 0;
        DBResultSet dbrs = null;
        try {
            /**
             *  SELECT (CBD.QTY), CBM.cash_bill_main_id, CBM.PARENT_ID,CBM.CASH_CASHIER_ID FROM cash_bill_detail AS CBD  INNER JOIN cash_bill_main AS CBM  ON CBM.CASH_BILL_MAIN_ID=CBD.CASH_BILL_MAIN_ID
                WHERE
                CBD.MATERIAL_ID='504404384564247000' AND parent_sales_order_id=0 AND CASH_CASHIER_ID!=1;
             */
            String sql = " SELECT SUM(CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+") FROM "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS CBD "+
                         " INNER JOIN "+TBL_CASH_BILL_MAIN+" AS CBM " +
                         " ON CBM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+"=CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+""+
                         " WHERE "+
                         " CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+"='"+matId+"'"+
                         " AND CBM."+PstBillMain.fieldNames[PstBillMain.FLD_PARENT_SALES_ORDER_ID]+"='"+TRANS_STATUS_CLOSE+"'"+
                         " AND CBM."+PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID]+"!='"+TRANS_STATUS_OPEN+"'"+
                         " AND CBM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_STATUS]+"='"+TRANS_STATUS_OPEN+"'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                sum = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return sum;
    }

    /**
     * 
     * @param oidBillMainOrder
     * @param matId
     * @return
     *  SELECT SUM(CBD.QTY) FROM cash_bill_detail AS CBD
        INNER JOIN cash_bill_main AS CBM
        ON CBM.CASH_BILL_MAIN_ID=CBD.CASH_BILL_MAIN_ID
        WHERE CBD.MATERIAL_ID='504404535339311388' AND CBM.PARENT_ID='504404543014460678';
     */
     public static double getStockOrder(long oidBillMainOrder, long matId) {
        double sum = 0;
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT SUM(CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+") FROM "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS CBD "+
                         " INNER JOIN "+TBL_CASH_BILL_MAIN+" AS CBM " +
                         " ON CBM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+"=CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+""+
                         " WHERE "+
                         " CBM."+PstBillMain.fieldNames[PstBillMain.FLD_PARENT_SALES_ORDER_ID]+"='"+oidBillMainOrder+"' AND "+
                         " CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+"='"+matId+"'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                sum = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return sum;
    }

    public static double getStockOrderSales(long oidBillMainOrder, long matId) {
        double sum = 0;
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT SUM(CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+") FROM "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS CBD "+
                         " INNER JOIN "+TBL_CASH_BILL_MAIN+" AS CBM " +
                         " ON CBM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+"=CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+""+
                         " WHERE "+
                         " CBM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+"='"+oidBillMainOrder+"' AND "+
                         " CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+"='"+matId+"'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                sum = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return sum;
    }


    public static long updateStatusBillMain(long oidBillMain, int statusDoc) {
        String sql = "UPDATE " + TBL_CASH_BILL_MAIN +
                " SET "+fieldNames[PstBillMain.FLD_BILL_STATUS]+ " = '" + statusDoc + "'"+
                " WHERE " + fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "'";
        try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {
        }
        return oidBillMain;
    }
    
   public static BillMain listWithCashBillDetailId(long oidCashBillDetailId) {
        BillMain billMain = new BillMain();
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT CBM.* FROM " + TBL_CASH_BILL_MAIN + " AS CBM "+
                         " INNER JOIN cash_bill_detail AS CBD ON "+
                         " CBM.CASH_BILL_MAIN_ID = CBD.CASH_BILL_MAIN_ID "+
                         " WHERE CBD.CASH_BILL_DETAIL_ID='"+oidCashBillDetailId+"'";
        
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                billMain.setOID(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]));
                billMain.setCashCashierId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID]));
                billMain.setLocationId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID]));
                Date date = DBHandler.convertDate(rs.getDate(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]), rs.getTime(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]));
                billMain.setBillDate(date);
                billMain.setInvoiceNo(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO]));
                billMain.setAppUserId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]));
                billMain.setShiftId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_SHIFT_ID]));
                billMain.setDiscType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_DISC_TYPE]));
                billMain.setDiscount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT]));
                billMain.setTaxPercentage(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_PERCENTAGE]));
                billMain.setTaxValue(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE]));
                billMain.setServicePct(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_PCT]));
                billMain.setServiceValue(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE]));
                billMain.setBillStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_BILL_STATUS]));
                billMain.setSalesCode(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]));

                billMain.setInvoiceNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]));
                billMain.setInvoiceCounter(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_COUNTER]));
                billMain.setTransType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANS_TYPE]));
                billMain.setDocType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]));


                billMain.setCashPendingOrderId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CASH_PENDING_ORDER_ID]));
                billMain.setCustomerId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]));
                billMain.setTransctionType(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]));
                billMain.setTransactionStatus(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]));
                billMain.setCoverNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_COVER_NUMBER]));
                billMain.setSpecialId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_SPECIAL_ID]));
                billMain.setSpecialFlag(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_SPECIAL_FLAG]));

                billMain.setParentId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID]));

                billMain.setGuestName(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_GUEST_NAME]));
                billMain.setNotes(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_NOTES]));

                billMain.setCurrencyId(rs.getLong(PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]));
                billMain.setRate(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_RATE]));

                //Delivery Address
                billMain.setShippingAddress(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_ADDRESS]));
                billMain.setShippingCity(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_CITY]));
                billMain.setShippingProvince(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_PROVINCE]));
                billMain.setShippingCountry(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_COUNTRY]));
                billMain.setShippingZipCode(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_ZIP]));
                billMain.setShippingPhoneNumber(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_PH_NUMBER]));
                billMain.setShippingMobilePhone(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_MOBILE_NUMBER]));
                billMain.setShippingFax(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_FAX]));

                //untuk total penjualan
                billMain.setAmount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT]));
                billMain.setPaidAmount(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_PAID_AMOUNT]));
                billMain.setDiscPct(rs.getDouble(PstBillMain.fieldNames[PstBillMain.FLD_DISC_PCT]));

                //untuk type sales order
                billMain.setTypeSalesOrder(rs.getInt(PstBillMain.fieldNames[PstBillMain.FLD_TYPE_SALES_ORDER]));
                billMain.setDateTermOfPayment(rs.getDate(PstBillMain.fieldNames[PstBillMain.FLD_DATE_TERM_OF_PAYMENT]));

            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return billMain;
    }
   
    /**
    * list open bill
    */
    public static Vector listOpenBill(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        /**
         * SELECT * FROM cash_bill_main AS bm  
         * WHERE bm.DOC_TYPE=0 AND bm.TRANSACTION_TYPE=0 AND bm.TRANSACTION_STATUS=1 AND 
         * bm.LOCATION_ID=504404550369124437 ORDER BY bm.BILL_DATE LIMIT 0, 15
         */
        try {
            String sql = "SELECT cbm.*,pt."+PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_NUMBER]+" AS NUMBER_TABLE, tr."+PstRoom.fieldNames[PstRoom.FLD_NAME]+" as ROOM_NAME FROM " + TBL_CASH_BILL_MAIN +" AS cbm " +
                         " INNER JOIN "+PstTableRoom.TBL_P2_TABLE+" AS pt"+
                         " ON pt."+PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_ID]+"= cbm."+PstBillMain.fieldNames[PstBillMain.FLD_TABLE_ID]+
                         " INNER JOIN "+PstRoom.TBL_P2_ROOM+" AS tr "+
                         " ON tr."+PstRoom.fieldNames[PstRoom.FLD_ROOM_ID]+"=cbm."+PstBillMain.fieldNames[PstBillMain.FLD_ROOM_ID];
            
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector data = new Vector();
                BillMain billMain = new BillMain();
                Room room = new Room();
                TableRoom tableRoom = new TableRoom();
                resultToObject(rs, billMain);
                room.setName(rs.getString("ROOM_NAME"));
                tableRoom.setTableNumber(rs.getString("NUMBER_TABLE"));
                data.add(billMain);
                data.add(room);
                data.add(tableRoom);
                
                lists.add(data);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static Vector listCreditCardTransaction(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT"
                + " cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+","
                + " cbm."+PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID]+","
                + " cbm."+PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]+","
                + " cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]+","
                + " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_ID]+","
                + " cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]+","
                + " ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+","
                + " ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]+","
                + " cc."+PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_CC_ID]+"," 
                + " cc."+PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_CC_NAME]+","
                + " cc."+PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_CC_NUMBER]+""
                + " FROM"
                + " "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm"  
                + " INNER JOIN "+PstCashPayment.TBL_PAYMENT+" cp " 
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_BILL_MAIN_ID]+""
                + " INNER JOIN "+PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM+" ps"
                + " ON cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+" = ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+""
                + " INNER JOIN "+PstCashCreditCard.TBL_CREDIT_CARD+" cc"  
                + " ON cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_ID]+" = cc."+PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_PAYMENT_ID]+"" 
                + "";
            
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector data = new Vector();
                BillMain billMain = new BillMain();
                CashPayments cashPayments = new CashPayments();
                PaymentSystem paymentSystem = new PaymentSystem();
                CashCreditCard cashCreditCard = new CashCreditCard();
                
                billMain.setOID(rs.getLong(""+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+""));
                billMain.setLocationId(rs.getLong(""+PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID]+""));
                billMain.setInvoiceNumber(rs.getString(""+PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER]+""));
                billMain.setBillDate(rs.getDate(""+PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]+""));
                
                cashPayments.setOID(rs.getLong(""+PstCashPayment.fieldNames[PstCashPayment.FLD_PAYMENT_ID]+""));
                cashPayments.setAmount(rs.getDouble(""+PstCashPayment.fieldNames[PstCashPayment.FLD_AMOUNT]+""));
                
                paymentSystem.setOID(rs.getLong(""+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+""));
                paymentSystem.setPaymentSystem(rs.getString(""+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]+""));
                
                cashCreditCard.setOID(rs.getLong(""+PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_CC_ID]+""));
                cashCreditCard.setCcName(rs.getString(""+PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_CC_NAME]+""));
                cashCreditCard.setCcNumber(rs.getString(""+PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_CC_NUMBER]+""));
               
                data.add(billMain);
                data.add(cashPayments);
                data.add(paymentSystem);
                data.add(cashCreditCard);
                
                lists.add(data);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    /**
     * list item open bill 
     * @param limitStart
     * @param recordToGet
     * @param whereClause
     * @param order
     * @return 
     */
    public static Vector listItemOpenBill(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            
           /*String sql = "SELECT cbm.*,pt."+PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_NUMBER]+" AS NUMBER_TABLE, tr."+PstRoom.fieldNames[PstRoom.FLD_NAME]+" as ROOM_NAME FROM " + TBL_CASH_BILL_MAIN +" AS cbm " +
                         " INNER JOIN "+PstTableRoom.TBL_P2_TABLE+" AS pt"+
                         " ON pt."+PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_ID]+"= cbm."+PstBillMain.fieldNames[PstBillMain.FLD_TABLE_ID]+
                         " INNER JOIN "+PstRoom.TBL_P2_ROOM+" AS tr "+
                         " ON tr."+PstRoom.fieldNames[PstRoom.FLD_ROOM_ID]+"=cbm."+PstBillMain.fieldNames[PstBillMain.FLD_ROOM_ID];*/
            
           String sql =  " SELECT bd.CASH_BILL_MAIN_ID, bd.CASH_BILL_DETAIL_ID, bd.ITEM_NAME, bd.QTY AS QTY, bd.STATUS, pt.TABLE_NUMBER FROM cash_bill_detail AS bd INNER JOIN pos_material AS pm ON bd.material_id =  pm.MATERIAL_ID INNER JOIN pos_category AS pc ON " +
                         " pm.CATEGORY_ID = pc.CATEGORY_ID "+
                         " INNER JOIN cash_bill_main AS cbm ON cbm.CASH_BILL_MAIN_ID=bd.CASH_BILL_MAIN_ID "+
                         " LEFT JOIN pos_table as pt ON pt.TABLE_ID=cbm.TABLE_ID ";
           
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector data = new Vector();
                Billdetail billDetail = new Billdetail();
                TableRoom tableRoom = new TableRoom();
                billDetail.setOID(rs.getLong("CASH_BILL_DETAIL_ID"));
                billDetail.setItemName(rs.getString("ITEM_NAME"));
                billDetail.setQty(rs.getDouble("QTY"));
                billDetail.setStatus(rs.getInt("STATUS"));
                tableRoom.setTableNumber(rs.getString("TABLE_NUMBER"));
                
                data.add(billDetail);
                data.add(tableRoom);
                
                lists.add(data);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    public static Vector listTakeAway(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        /**
         * SELECT * FROM cash_bill_main AS bm  
         * WHERE bm.DOC_TYPE=0 AND bm.TRANSACTION_TYPE=0 AND bm.TRANSACTION_STATUS=1 AND 
         * bm.LOCATION_ID=504404550369124437 ORDER BY bm.BILL_DATE LIMIT 0, 15
         */
        try {
            String sql = "SELECT cbm.* "+" FROM " + TBL_CASH_BILL_MAIN +" AS cbm ";
            
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector data = new Vector();
                BillMain billMain = new BillMain();
                resultToObject(rs, billMain);
                data.add(billMain);
                lists.add(data);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
   
   
   public static Vector getCountShortcut(int limitStart, BillMain bMain, int recordToGet, String whereClause, String order) {
       
        DBResultSet dbrs = null;
        Vector vListReceive = new Vector(1, 1);
        try {
                 String sql = "SELECT COUNT(cm." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT, "
                    +  "(cm." + PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING] + ")   AS STATUS " 
                    + " FROM " +PstBillMain.TBL_CASH_BILL_MAIN+ "  cm LEFT JOIN " +PstMemberReg.TBL_CONTACT_LIST+ "  cl ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID]+ " = cl." +PstMemberReg.fieldNames[PstMemberReg.FLD_CONTACT_ID]
                    + " LEFT JOIN " +PstCurrencyType.TBL_POS_CURRENCY_TYPE+ "  ct ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]+ " = ct." +PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID]
                    + " LEFT JOIN " +PstAppUser.TBL_APP_USER+ "  au ON cm." +PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]+ " = au."+PstAppUser.fieldNames[PstAppUser.FLD_USER_ID]
                    + " LEFT JOIN " +PstLocation.TBL_P2_LOCATION+ " LC ON cm." + PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID] + " = LC."+PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID];
                    
            String docType = "";
            
            docType     =    PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]+"='0'"
                             + " AND "+PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]+"='0'"
                             + " AND "+PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "='1'"
                             + " AND "+PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER] + " != '0'";
            
            
             String strStatus = "";
              
              strStatus = "((cm."+PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]+ " = 0)"+
                           " OR " + "(cm."+PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]+ " = 1 )"+ 
                           " OR " + "(cm."+PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]+ " = 2 )"+ 
                           " OR " + "(cm."+PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING]+ " = 10 ))";
              
              
             if(whereClause.length()>0){
               strStatus=strStatus + whereClause;
              }
                
                 
            whereClause = docType;
            
            
            strStatus = strStatus + "GROUP BY cm."+PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING];
          
            sql = sql + " WHERE " + docType +  " AND " + strStatus;
               
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                 Vector vlist = new Vector(1, 1);
                 vlist.add(rs.getInt("CNT"));
		 vlist.add(rs.getInt("STATUS"));
                 vListReceive.add(vlist);
	    }
            rs.close();
            return vListReceive;
	} catch (Exception e) {
	    System.out.println("SessMatReceive.getCountListReceiveMaterial() err : " + e.toString());
	} finally {
	   DBResultSet.close(dbrs);
	}
       return new Vector(1, 1);
    }
   
    public static String  listCashCashierPerDay(String startDate, String endDate, int type) {
        return listCashCashierPerDay(startDate, endDate, type,"");
    }
    public static String  listCashCashierPerDay(String startDate, String endDate, int type, String whereOpt) {
        String where="";

        DBResultSet dbrs = null;

        try {
            /**
             *   whereClause = " where (TO_DAYS( c.BILL_DATE)" +
      " BETWEEN TO_DAYS('" + Formater.formatDate(srcContact.getStartDate(), "yyyy-MM-dd") + "')" +
      " AND TO_DAYS('" + Formater.formatDate(srcContact.getEndDate(), "yyyy-MM-dd") + "')" +
             */
            String sql = " SELECT cash_cashier.* FROM cash_cashier INNER JOIN cash_master " +
                         " ON cash_cashier.CASH_MASTER_ID=cash_master.CASH_MASTER_ID "+ 
                         " WHERE TO_DAYS(cash_cashier.OPEN_DATE) BETWEEN TO_DAYS('"+startDate+" 00:00:01') AND TO_DAYS('"+endDate+" 23:59:59')";
            
            if(!whereOpt.equals("")){
                sql=sql+ " AND " + whereOpt;
            }
            
            dbrs = DBHandler.execQueryResult(sql);

            ResultSet rs = dbrs.getResultSet();
            int counter=0;
            while (rs.next()) {
                    counter=counter+1;
                    long cashCashierId=rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]);
                    if(type==0){
                        if(counter==1){
                            where= " cbm.CASH_CASHIER_ID ='"+cashCashierId+"'";
                        }else{
                            where= where +" OR cbm.CASH_CASHIER_ID ='"+cashCashierId+"'";
                        }
                    }else if (type==1){
                        if(counter==1){
                            where= " CASH_CASHIER_ID ='"+cashCashierId+"'";
                        }else{
                            where= where +" OR CASH_CASHIER_ID ='"+cashCashierId+"'";
                        }
                    }
                    
            }
            
            rs.close();
            
            return where;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return where;
    }
    
//cek material name
public static Vector listMaterialItemConsigment(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_JENIS_TYPE]+", pmd.*, pm."+PstMaterial.fieldNames[PstMaterial.FLD_SUPPLIER_ID]+", cbd.*"
//                + " SUM(cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+") as "+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+" "
                + " from "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS cbd "
                + " INNER JOIN "+PstMaterial.TBL_MATERIAL+" As pm "
                + " ON cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+" = pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+""               
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm  "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+" "                
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+""
                + " LEFT JOIN "+PstMaterialDetail.TBL_MATERIALDETAIL+" AS pmd"
                + " ON pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+" = pmd."+PstMaterialDetail.fieldNames[PstMaterialDetail.FLD_MATERIAL_ID]+"";      
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            //System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Billdetail billDetail = new Billdetail();
                billDetail.setItemName(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_NAME]+""));
                billDetail.setQty(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+""));
                billDetail.setTotalPrice(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+""));
                billDetail.setDisc(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_DISC]+""));
                billDetail.setSku(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_SKU]+""));
                billDetail.setMaterialDetailId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_DETAIL_ID]+""));
                billDetail.setUnitId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID]+""));
                billDetail.setBillMainId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+""));
                billDetail.setBillDetailId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]+""));
                billDetail.setMaterialId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+""));
                billDetail.setDiscType(rs.getInt(""+PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_TYPE]+""));
                billDetail.setMaterialType(rs.getInt(""+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_TYPE]+""));
                billDetail.setDiscPct(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_PCT]+""));
                billDetail.setCost(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_COST]+""));
                billDetail.setNote(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_NOTE]+""));
                billDetail.setStatus(rs.getInt(""+PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS]+""));
                billDetail.setItemPrice(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE]+""));
                billDetail.setSupplierId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_SUPPLIER_ID]+""));
                billDetail.setMaterial_jenis(rs.getInt(""+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_JENIS_TYPE]+""));
                billDetail.setBerat(rs.getDouble(""+PstMaterialDetail.fieldNames[PstMaterialDetail.FLD_BERAT]+""));
              
                lists.add(billDetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

//cek for count
public static Vector listMaterialItem(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_JENIS_TYPE]+", pmd.*, pm."+PstMaterial.fieldNames[PstMaterial.FLD_SUPPLIER_ID]+", cbd.*"
//                + " SUM(cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+") as "+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+" "
                + " from "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS cbd "
                + " INNER JOIN "+PstMaterial.TBL_MATERIAL+" As pm "
                + " ON cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+" = pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+""               
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm  "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+" "                
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+""
                + " LEFT JOIN "+PstMaterialDetail.TBL_MATERIALDETAIL+" AS pmd"
                + " ON pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+" = pmd."+PstMaterialDetail.fieldNames[PstMaterialDetail.FLD_MATERIAL_ID]+"";      
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            //System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Billdetail billDetail = new Billdetail();
                billDetail.setItemName(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_NAME]+""));
                billDetail.setQty(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+""));
                billDetail.setTotalPrice(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+""));
                billDetail.setDisc(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_DISC]+""));
                billDetail.setSku(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_SKU]+""));
                billDetail.setMaterialDetailId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_DETAIL_ID]+""));
                billDetail.setUnitId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID]+""));
                billDetail.setBillMainId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+""));
                billDetail.setBillDetailId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]+""));
                billDetail.setMaterialId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+""));
                billDetail.setDiscType(rs.getInt(""+PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_TYPE]+""));
                billDetail.setMaterialType(rs.getInt(""+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_TYPE]+""));
                billDetail.setDiscPct(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_PCT]+""));
                billDetail.setCost(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_COST]+""));
                billDetail.setNote(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_NOTE]+""));
                billDetail.setStatus(rs.getInt(""+PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS]+""));
                billDetail.setItemPrice(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE]+""));
                billDetail.setSupplierId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_SUPPLIER_ID]+""));
                billDetail.setMaterial_jenis(rs.getInt(""+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_JENIS_TYPE]+""));
                billDetail.setBerat(rs.getDouble(""+PstMaterialDetail.fieldNames[PstMaterialDetail.FLD_BERAT]+""));
              
                lists.add(billDetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }


//GROUP BY
public static Vector listGroupBy(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = ""
                + " SELECT pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_JENIS_TYPE]+", pmd."+PstMaterialDetail.fieldNames[PstMaterialDetail.FLD_MATERIAL_DETAIL_ID]+", pm."+PstMaterial.fieldNames[PstMaterial.FLD_SUPPLIER_ID]+", cbd.*, pmd.*"
//                + " SUM(cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+") as "+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+" "
                + " from "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS cbd "
                + " INNER JOIN "+PstMaterial.TBL_MATERIAL+" As pm "
                + " ON cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+" = pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+""               
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm  "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+" "                
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+""
                + " LEFT JOIN "+PstMaterialDetail.TBL_MATERIALDETAIL+" AS pmd"
                + " ON pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+" = pmd."+PstMaterialDetail.fieldNames[PstMaterialDetail.FLD_MATERIAL_ID]+"";      
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            //System.out.println("SQL List PerCashier :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Billdetail billDetail = new Billdetail();
                billDetail.setItemName(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_NAME]+""));
                billDetail.setQty(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]+""));
                billDetail.setTotalPrice(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+""));
                billDetail.setDisc(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_DISC]+""));
                billDetail.setSku(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_SKU]+""));
                billDetail.setMaterialDetailId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_DETAIL_ID]+""));
                billDetail.setUnitId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID]+""));
                billDetail.setBillMainId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+""));
                billDetail.setMaterialId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+""));
                billDetail.setDiscType(rs.getInt(""+PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_TYPE]+""));
                billDetail.setMaterialType(rs.getInt(""+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_TYPE]+""));
                billDetail.setDiscPct(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_PCT]+""));
                billDetail.setCost(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_COST]+""));
                billDetail.setNote(rs.getString(""+PstBillDetail.fieldNames[PstBillDetail.FLD_NOTE]+""));
                billDetail.setStatus(rs.getInt(""+PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS]+""));
                billDetail.setItemPrice(rs.getDouble(""+PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE]+""));
                billDetail.setSupplierId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_SUPPLIER_ID]+""));
                billDetail.setMaterial_jenis(rs.getInt(""+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_JENIS_TYPE]+""));
                billDetail.setBerat(rs.getDouble(""+PstMaterialDetail.fieldNames[PstMaterialDetail.FLD_BERAT]+""));
                billDetail.setBillDetailId(rs.getLong(""+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]+""));
              
                lists.add(billDetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    
    
    
    
   
    
    public static SessSalesSummaryReport sumListSummaryTranscationReportHarian(int limitStart, int recordToGet, String whereClause, String order, String whereKredit) {
        SessSalesSummaryReport sessSalesSummaryReport = new SessSalesSummaryReport();
        DBResultSet dbrs = null;
        try {
            String sql =  ""+  
                " SELECT "+ 
                " SUM(cbm.PAX_NUMBER) AS pax, " +
                " SUM(cbm.SERVICE_VALUE) AS service, " +
                " SUM(cbm.TAX_VALUE) AS tax, " +
                " SUM(cbm.DISC) AS discount" +
                " FROM " +
                " "+PstBillMain.TBL_CASH_BILL_MAIN+" cbm " +
                " LEFT JOIN (SELECT * "+
                " FROM cash_payment "+
                " GROUP BY CASH_BILL_MAIN_ID) cp ON cbm.CASH_BILL_MAIN_ID = cp.CASH_BILL_MAIN_ID "+
                " LEFT JOIN "+PstTableRoom.TBL_P2_TABLE+" pt " +
                " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_TABLE_ID]+" = pt."+PstTableRoom.fieldNames[PstTableRoom.FLD_TABLE_ID]+" " +
                " LEFT JOIN "+PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM+" ps " +
                " ON cp."+PstCashPayment.fieldNames[PstCashPayment.FLD_PAY_TYPE]+" = ps."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID]+" ";

            if(whereClause != null && whereClause.length() > 0){
                sql = sql + " WHERE " + whereClause;
            } 
            if(order != null && order.length() > 0){
                sql = sql + " ORDER " + order;
            } 
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("SQl Summary Transaction : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                sessSalesSummaryReport.setPax(rs.getDouble("pax"));
                sessSalesSummaryReport.setService(rs.getDouble("service"));
                sessSalesSummaryReport.setTax(rs.getDouble("tax"));
                sessSalesSummaryReport.setDiscount(rs.getDouble("discount"));
            }
            rs.close();
            
            
            //cek data food
            double food = SessCustomeReport.getTotalByCategory(0, 0,whereClause);
            sessSalesSummaryReport.setFood(food);
            //cek data beverafe
            double beverage = SessCustomeReport.getTotalByCategory(0, 1,whereClause);
            sessSalesSummaryReport.setBeverage(beverage);
            //cek data beverafe
            double other = SessCustomeReport.getTotalByCategory(0, 3,whereClause);
            sessSalesSummaryReport.setOther(other);
            
            double totalNetSale=food+beverage+other;
            sessSalesSummaryReport.setNetSales(totalNetSale);
            
            double totSales = food+beverage+other+sessSalesSummaryReport.getService()+sessSalesSummaryReport.getTax()-sessSalesSummaryReport.getDiscount();
            sessSalesSummaryReport.setTotalSales(totSales);
            
            double kreditSales = PstBillDetail.getSumTotalPriceByCategoryAndBillMain(whereKredit);
            Vector vSumTaxService = listForSummary(0,0,whereKredit,"");
            if(!vSumTaxService.isEmpty()){
                try{
                    BillMain billMain =(BillMain) vSumTaxService.get(0);
                    sessSalesSummaryReport.setKreditSales(kreditSales + billMain.getServiceValue() + billMain.getTaxValue());
                }catch(Exception ex){}
            }
            return sessSalesSummaryReport;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return sessSalesSummaryReport;
    }
    

    public static Vector getListReportVoid(int start, int recordToGet, String where) {
        Vector record = new Vector();
        DBResultSet dbrs = null;
        String sql="";
        
        sql = "SELECT cbm.* "+
              ", pt.TABLE_NUMBER, "+
              " cbd.CASH_BILL_DETAIL_ID, "+ 
              " cbd.ITEM_NAME "+   
              " FROM "+PstBillDetailVoid.TBL_CASH_BILL_DETAIL+" AS cbd INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+ " AS cbm  ON "+
              " cbm."+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_BILL_MAIN_ID]+"= cbd."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+
              " LEFT JOIN pos_table pt on pt.TABLE_ID = cbm.TABLE_ID ";
        
        sql=sql+" WHERE "+where;
        
        if (start == 0 && recordToGet == 0) {
            sql = sql + "";
        } else {
            sql = sql + " LIMIT " + start + "," + recordToGet;
        }
        try {
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                //Billdetail billlDetail  = new Billdetail();
//                billlDetail.setItemName(rs.getString(PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_ITEM_NAME]));
//                billlDetail.setOID(rs.getLong(PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_BILL_DETAIL_ID]));
//                billlDetail.setQty(rs.getDouble(PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_QUANTITY]));
//                billlDetail.setTotalAmount(rs.getDouble(PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_TOTAL_PRICE]));
//                billlDetail.setItemPrice(rs.getDouble(PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_ITEM_PRICE]));
//                billlDetail.setNote(rs.getString(PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_NOTE]));
//                
//                billlDetail.setNoBill(rs.getString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO]));
//                Date date = DBHandler.convertDate(rs.getDate(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]), rs.getTime(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE]));
//                billlDetail.setBillMainDate(date);
//                billlDetail.setTableId(rs.getLong("TABLE_ID"));
//                billlDetail.setNoBill(rs.getString("INVOICE_NUMBER"));
                BillMain billMain = new BillMain();
                resultToObject(rs, billMain);
                billMain.setTableNumber(rs.getString("TABLE_NUMBER"));
                billMain.setCashBillDetailId(rs.getLong("CASH_BILL_DETAIL_ID"));
                billMain.setItemName(rs.getString("ITEM_NAME"));
                record.add(billMain);
            }
            rs.close();
        }catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            DBResultSet.close(dbrs);
        }
        
        return record;
    }
    
    public static Vector getListReportError(int start, int recordToGet, String where) {
        Vector record = new Vector();
        DBResultSet dbrs = null;
        String sql="";
        
       sql = " SELECT cbm.*, "+
             " pt.TABLE_NUMBER, "+
             " cbd.CASH_BILL_DETAIL_ID, "+ 
             " cbd.ITEM_NAME, "+ 
             " cbd.NOTE, "+   
             " cbd.CANCELATION_NOTE "+     
             " FROM "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS cbd INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+ " AS cbm ON "+
             " cbm."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+"= cbd."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+
             " LEFT JOIN pos_table pt on pt.TABLE_ID = cbm.TABLE_ID ";
       
        sql = sql + " WHERE cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE]+"='0'";
        
        sql=sql+" AND "+where;
        
        if (start == 0 && recordToGet == 0) {
            sql = sql + "";
        } else {
            sql = sql + " LIMIT " + start + "," + recordToGet;
        }
        try {
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                BillMain billMain = new BillMain();
                resultToObject(rs, billMain);
                billMain.setTableNumber(rs.getString("TABLE_NUMBER"));
                billMain.setCashBillDetailId(rs.getLong("CASH_BILL_DETAIL_ID"));
                billMain.setItemName(rs.getString("ITEM_NAME"));
                billMain.setNoteItem(rs.getString("NOTE"));
                billMain.setCancelationNote(rs.getString("CANCELATION_NOTE"));
                record.add(billMain);
            }
            rs.close();
        }catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            DBResultSet.close(dbrs);
        }
        
        return record;
    }
    
    public static int getCountReportVoid(int start, int recordToGet, String where) {
        int record = 0;
        DBResultSet dbrs = null;
        String sql="";
        
        sql = "SELECT COUNT(cbm.CASH_BILL_MAIN_ID) FROM "+PstBillDetailVoid.TBL_CASH_BILL_DETAIL+" AS cbd INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+ " AS cbm ON "+
              " cbm."+PstBillDetailVoid.fieldNames[PstBillDetailVoid.FLD_BILL_MAIN_ID]+"= cbd."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID];
        
        sql=sql+" WHERE "+where;
        
        try {
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                record = rs.getInt(1);
            }
            rs.close();
        }catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            DBResultSet.close(dbrs);
        }
        
        return record;
    }
    
    
    public static int getCountReportError(int start, int recordToGet, String where) {
        int record = 0;
        DBResultSet dbrs = null;
        String sql="";
        
        sql = "SELECT COUNT(cbm.CASH_BILL_MAIN_ID) "
            + "FROM "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS cbd INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+ " AS cbm ON "+
            " cbm."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+"= cbd."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID];
        sql = sql + " WHERE cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE]+"='0'";
        sql=sql+" AND "+where;
        
        try {
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                record = rs.getInt(1);
            }
            rs.close();
        }catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            DBResultSet.close(dbrs);
        }
        
        return record;
    }

    public static int getCountGroupBy(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = ""
                    + " SELECT pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_JENIS_TYPE]+", pmd.*, pm."+PstMaterial.fieldNames[PstMaterial.FLD_SUPPLIER_ID]+", cbd.*"
//                + " SUM(cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+") as "+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+" "
                + " from "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS cbd "
                + " INNER JOIN "+PstMaterial.TBL_MATERIAL+" As pm "
                + " ON cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]+" = pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+""               
                + " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS cbm  "
                + " ON cbm."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = cbd."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]+" "                
                + " INNER JOIN "+PstCashCashier.TBL_CASH_CASHIER+" AS cc "
                + " ON cbm."+fieldNames[FLD_CASH_CASHIER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+""
                + " INNER JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS cm"
                + " ON cm."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]+" = cc."+PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+""
                + " LEFT JOIN "+PstMaterialDetail.TBL_MATERIALDETAIL+" AS pmd"
                + " ON pm."+PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]+" = pmd."+PstMaterialDetail.fieldNames[PstMaterialDetail.FLD_MATERIAL_ID]+"";
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }
	
	public static long insertByOid(BillMain billMain) throws DBException {
      try {
         PstBillMain pstBillMain = new PstBillMain(0);
         pstBillMain.setLong(FLD_CASH_CASHIER_ID, billMain.getCashCashierId());
         pstBillMain.setLong(FLD_LOCATION_ID, billMain.getLocationId());
         pstBillMain.setDate(FLD_BILL_DATE, billMain.getBillDate());
         pstBillMain.setString(FLD_INVOICE_NO, billMain.getInvoiceNo());
         pstBillMain.setLong(FLD_APPUSER_ID, billMain.getAppUserId());
         pstBillMain.setLong(FLD_SHIFT_ID, billMain.getShiftId());
         pstBillMain.setInt(FLD_DISC_TYPE, billMain.getDiscType());
         pstBillMain.setDouble(FLD_DISCOUNT, billMain.getDiscount());
         pstBillMain.setDouble(FLD_TAX_PERCENTAGE, billMain.getTaxPercentage());
         pstBillMain.setDouble(FLD_TAX_VALUE, billMain.getTaxValue());
         pstBillMain.setDouble(FLD_SERVICE_PCT, billMain.getServicePct());
         pstBillMain.setDouble(FLD_SERVICE_VALUE, billMain.getServiceValue());
         pstBillMain.setInt(FLD_BILL_STATUS, billMain.getBillStatus());
         pstBillMain.setString(FLD_SALES_CODE, billMain.getSalesCode());
         pstBillMain.setString(FLD_INVOICE_NUMBER, billMain.getInvoiceNumber());
         pstBillMain.setInt(FLD_INVOICE_COUNTER, billMain.getInvoiceCounter());
         pstBillMain.setInt(FLD_TRANS_TYPE, billMain.getTransType());
         pstBillMain.setInt(FLD_DOC_TYPE, billMain.getDocType());
         pstBillMain.setLong(FLD_CASH_PENDING_ORDER_ID, billMain.getCashPendingOrderId());
         pstBillMain.setLong(FLD_CUSTOMER_ID, billMain.getCustomerId());
         pstBillMain.setInt(FLD_TRANSCATION_TYPE, billMain.getTransctionType());
         pstBillMain.setInt(FLD_TRANSACTION_STATUS, billMain.getTransactionStatus());
         pstBillMain.setString(FLD_COVER_NUMBER, billMain.getCoverNumber());
         pstBillMain.setLong(FLD_SPECIAL_ID, billMain.getSpecialId());
         pstBillMain.setInt(FLD_SPECIAL_FLAG, billMain.getSpecialFlag());
         pstBillMain.setLong(FLD_PARENT_ID, billMain.getParentId());
         pstBillMain.setString(FLD_GUEST_NAME, billMain.getGuestName());
         pstBillMain.setString(FLD_NOTES, billMain.getNotes());
         pstBillMain.setLong(FLD_CURRENCY_ID, billMain.getCurrencyId());
         pstBillMain.setDouble(FLD_RATE, billMain.getRate());
         pstBillMain.setString(FLD_SHIPPING_ADDRESS, billMain.getShippingAddress());
         pstBillMain.setString(FLD_SHIPPING_CITY, billMain.getShippingCity());
         pstBillMain.setString(FLD_SHIPPING_PROVINCE, billMain.getShippingProvince());
         pstBillMain.setString(FLD_SHIPPING_COUNTRY, billMain.getShippingCountry());
         pstBillMain.setString(FLD_SHIPPING_ZIP, billMain.getShippingZipCode());
         pstBillMain.setString(FLD_SHIPPING_PH_NUMBER, billMain.getShippingPhoneNumber());
         pstBillMain.setString(FLD_SHIPPING_MOBILE_NUMBER, billMain.getShippingMobilePhone());
         pstBillMain.setString(FLD_SHIPPING_FAX, billMain.getShippingFax());
         pstBillMain.setDouble(FLD_AMOUNT, billMain.getAmount());
         pstBillMain.setDouble(FLD_PAID_AMOUNT, billMain.getPaidAmount());
         pstBillMain.setDouble(FLD_DISC_PCT, billMain.getDiscPct());
         pstBillMain.setLong(FLD_INVOICING_ID, billMain.getInvoicingId());
         pstBillMain.setInt(FLD_STATUS_INVOICING, billMain.getStatusInv());
         pstBillMain.setLong(FLD_DO_PERSON_ID, billMain.getDoPersonId());
         pstBillMain.setInt(FLD_TYPE_SALES_ORDER, billMain.getTypeSalesOrder());
         pstBillMain.setLong(FLD_PARENT_SALES_ORDER_ID, billMain.getParentSalesOrderId());
         pstBillMain.setDate(FLD_DATE_TERM_OF_PAYMENT, billMain.getDateTermOfPayment());
         pstBillMain.setLong(FLD_STOCK_LOCATION_ID, billMain.getStockLocationId());
         pstBillMain.setLong(FLD_ROOM_ID, billMain.getRoomID());
         pstBillMain.setLong(FLD_TABLE_ID, billMain.getTableId());
         pstBillMain.setInt(FLD_PAX_NUMBER, billMain.getPaxNumber());
         pstBillMain.setString(FLD_EVENT_NAME, billMain.getEventName());
         pstBillMain.setDate(FLD_ORDER_DATE, billMain.getOrderDate());
         pstBillMain.setInt(FLD_IS_SERVICE, billMain.getIsService());
         pstBillMain.setLong(FLD_ID_NEGARA, billMain.getNegaraId());
         pstBillMain.setInt(FLD_GENDER, billMain.getGender());
         pstBillMain.setInt(FLD_STATUS, billMain.getStatus());
         pstBillMain.setDate(FLD_SHIPPING_DATE, billMain.getShippingDate());
         pstBillMain.setString(FLD_FLIGHT_NUMBER, billMain.getFlightNumber());
         pstBillMain.setLong(FLD_APP_USER_SALES_ID, billMain.getAppUserSalesId());
         pstBillMain.insertByOid(billMain.getOID());
      } catch (DBException dbe) {
         throw dbe;
      } catch (Exception e) {
         throw new DBException(new PstBillMain(0), DBException.UNKNOWN);
      }
      return billMain.getOID();
   }
    
	 public static long syncExc(JSONObject jSONObject){
      long oid = 0;
      if (jSONObject != null){
       oid = jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID],0);
         if (oid > 0){
          BillMain billMain = new BillMain();
          billMain.setOID(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID],0));
          billMain.setCashCashierId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID],0));
          billMain.setLocationId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_LOCATION_ID],0));
          billMain.setBillDate(Formater.formatDate(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_BILL_DATE],  "0000-00-00 00:00:00"), "yyyy-MM-dd HH:mm:ss"));
          billMain.setInvoiceNo(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NO], ""));
          billMain.setAppUserId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID],0));
          billMain.setShiftId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_SHIFT_ID],0));
          billMain.setDiscType(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_DISC_TYPE],0));
          billMain.setDiscount(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT],0));
          billMain.setTaxPercentage(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_PERCENTAGE],0));
          billMain.setTaxValue(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE],0));
          billMain.setServicePct(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_PCT],0));
          billMain.setServiceValue(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE],0));
          billMain.setBillStatus(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_BILL_STATUS],0));
          billMain.setSalesCode(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE], ""));
          billMain.setInvoiceNumber(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER], ""));
          billMain.setInvoiceCounter(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_COUNTER],0));
          billMain.setTransType(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANS_TYPE],0));
          billMain.setDocType(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE],0));
          billMain.setCashPendingOrderId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_CASH_PENDING_ORDER_ID],0));
          billMain.setCustomerId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID],0));
          billMain.setTransctionType(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE],0));
          billMain.setTransactionStatus(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS],0));
          billMain.setCoverNumber(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_COVER_NUMBER], ""));
          billMain.setSpecialId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_SPECIAL_ID],0));
          billMain.setSpecialFlag(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_SPECIAL_FLAG],0));
          billMain.setParentId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID],0));
          billMain.setGuestName(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_GUEST_NAME], ""));
          billMain.setNotes(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_NOTES], ""));
          billMain.setCurrencyId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID],0));
          billMain.setRate(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_RATE],0));
          billMain.setShippingAddress(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_ADDRESS], ""));
          billMain.setShippingCity(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_CITY], ""));
          billMain.setShippingProvince(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_PROVINCE], ""));
          billMain.setShippingCountry(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_COUNTRY], ""));
          billMain.setShippingZipCode(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_ZIP], ""));
          billMain.setShippingPhoneNumber(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_PH_NUMBER], ""));
          billMain.setShippingMobilePhone(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_MOBILE_NUMBER], ""));
          billMain.setShippingFax(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_FAX], ""));
          billMain.setAmount(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_AMOUNT],0));
          billMain.setPaidAmount(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_PAID_AMOUNT],0));
          billMain.setDiscPct(jSONObject.optDouble(PstBillMain.fieldNames[PstBillMain.FLD_DISC_PCT],0));
          billMain.setInvoicingId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_INVOICING_ID],0));
          billMain.setStatusInv(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING],0));
          billMain.setDoPersonId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_DO_PERSON_ID],0));
          billMain.setTypeSalesOrder(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_TYPE_SALES_ORDER],0));
          billMain.setParentSalesOrderId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_PARENT_SALES_ORDER_ID],0));
          billMain.setDateTermOfPayment(Formater.formatDate(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_DATE_TERM_OF_PAYMENT],  "0000-00-00"), "yyyy-MM-dd"));
          billMain.setStockLocationId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_STOCK_LOCATION_ID],0));
          billMain.setRoomID(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_ROOM_ID],0));
          billMain.setTableId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_TABLE_ID],0));
          billMain.setPaxNumber(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_PAX_NUMBER],0));
          billMain.setEventName(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_EVENT_NAME], ""));
          billMain.setOrderDate(Formater.formatDate(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_ORDER_DATE],  "0000-00-00"), "yyyy-MM-dd"));
          billMain.setIsService(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_IS_SERVICE],0));
          billMain.setNegaraId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_ID_NEGARA],0));
          billMain.setGender(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_GENDER],0));
          billMain.setStatus(jSONObject.optInt(PstBillMain.fieldNames[PstBillMain.FLD_STATUS],0));
          billMain.setShippingDate(Formater.formatDate(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_DATE],  "0000-00-00"), "yyyy-MM-dd"));
          billMain.setFlightNumber(jSONObject.optString(PstBillMain.fieldNames[PstBillMain.FLD_FLIGHT_NUMBER], ""));
          billMain.setAppUserSalesId(jSONObject.optLong(PstBillMain.fieldNames[PstBillMain.FLD_APP_USER_SALES_ID], 0));
         boolean checkOidBillMain = PstBillMain.checkOID(oid);
          try{
            if(checkOidBillMain){
               oid = PstBillMain.updateExc(billMain);
            }else{
               oid = PstBillMain.insertByOid(billMain);
            }
         }catch(Exception exc){
			 oid = 0;
		 }
         }
      }
   return oid;
   }
   
}
