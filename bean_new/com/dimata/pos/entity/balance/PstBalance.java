/* Generated by Together */

package com.dimata.pos.entity.balance;

import com.dimata.posbo.db.DBException;
import com.dimata.posbo.db.DBHandler;
import com.dimata.posbo.db.DBResultSet;
import com.dimata.posbo.db.I_DBInterface;
import com.dimata.posbo.db.I_DBType;

/* package java */ 
/* package qdep */
import java.sql.ResultSet;
import java.util.Vector;
import java.util.Date;

//import com.dimata.qdep.db.*;

/* package cashier */
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;
import com.dimata.common.entity.payment.*;
import com.dimata.util.Formater;
import org.json.JSONObject;

public class PstBalance extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language {
    
  //public static final String TBL_BALANCE = "CASH_BALANCE";
  public static final String TBL_BALANCE = "cash_balance";

  public static final int FLD_BALANCE_ID=0;
  public static final int FLD_CASH_CASHIER_ID=1;
  public static final int FLD_BALANCE_TYPE=2;
  public static final int FLD_BALANCE_DATE=3;
  public static final int FLD_BALANCE_VALUE=4;
  public static final int FLD_SHOULD_VALUE=5;
  public static final int FLD_CURRENCY_ID=6;
  //public static final int FLD_CURRENCY_NAME=7;

  public static final String[] fieldNames = {
    "CASH_BALANCE_ID",
    "CASH_CASHIER_ID",
    "TYPE",
    "BALANCE_DATE",
    "BALANCE_VALUE",
    "SHOULD_VALUE",
    "CURRENCY_ID"
     };

  public static final  int[] fieldTypes = {
    TYPE_LONG + TYPE_PK + TYPE_ID,
    TYPE_LONG + TYPE_FK,
    TYPE_INT,
    TYPE_DATE,
    TYPE_FLOAT,
    TYPE_FLOAT,
    TYPE_LONG + TYPE_FK,
    };

  //constructor
    public PstBalance(){
    }

    public PstBalance(int i)throws DBException {
        super(new PstBalance());
    }

    public PstBalance(String sOid) throws DBException {
        super(new PstBalance(0));
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        else
            return;
    }

     public PstBalance(long lOid) throws DBException {
        super(new PstBalance(0));
        String sOid="0";
        try {
            sOid = String.valueOf(lOid);
        }catch(Exception e) {
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        if(!locate(sOid))
            throw new DBException(this,DBException.RECORD_NOT_FOUND); 
		else 
			return; 
	 }

    public int getFieldSize(){
	   return fieldNames.length;
	 }

    public String getTableName(){
	   return TBL_BALANCE;
	}

	public String[] getFieldNames(){ 
		return fieldNames; 
	}

	public int[] getFieldTypes(){ 
		return fieldTypes; 
	}

	public String getPersistentName(){ 
		return new PstBalance().getClass().getName();
	}

    public long fetchExc(Entity ent) throws Exception{
        Balance balance = fetchExc(ent.getOID());
        ent = (Entity)balance;
        return balance.getOID();
    }

    public long insertExc(Entity ent) throws Exception{
        return insertExc((Balance) ent);
    }

    public long updateExc(Entity ent) throws Exception{
        return updateExc((Balance) ent);
    }

    public long deleteExc(Entity ent) throws Exception{
        if(ent==null){
            throw new DBException(this,DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static Balance fetchExc(long oid) throws DBException{
        try{
            Balance balance = new Balance();
            PstBalance pstBalance = new PstBalance(oid);
            balance.setOID(oid);
            balance.setCashCashierId(pstBalance.getlong(FLD_CASH_CASHIER_ID));
            balance.setBalanceType(pstBalance.getInt(FLD_BALANCE_TYPE));
            balance.setBalanceDate(pstBalance.getDate(FLD_BALANCE_DATE));
            balance.setBalanceValue(pstBalance.getdouble(FLD_BALANCE_VALUE));
            balance.setShouldValue(pstBalance.getdouble(FLD_SHOULD_VALUE));
            balance.setCurrencyOid(pstBalance.getlong(FLD_CURRENCY_ID));
      
            return balance;
       	}catch(DBException dbe){
            System.out.println(">>>>>>>>"+dbe);
			throw dbe; 
		}catch(Exception e){
            System.out.println(">>>>>>>>>>>"+e);
			throw new DBException(new PstBalance(0),DBException.UNKNOWN);
		} 
	}

    public static long insertExc(Balance balance) throws DBException{
        try{
            PstBalance pstBalance = new PstBalance(0);
            pstBalance.setLong(FLD_CASH_CASHIER_ID,balance.getCashCashierId());
            pstBalance.setInt(FLD_BALANCE_TYPE,balance.getBalanceType());
            pstBalance.setDate(FLD_BALANCE_DATE,balance.getBalanceDate());
            pstBalance.setDouble(FLD_BALANCE_VALUE,balance.getBalanceValue());
            pstBalance.setDouble(FLD_SHOULD_VALUE,balance.getShouldValue());
            pstBalance.setLong(FLD_CURRENCY_ID,balance.getCurrencyOid());
         
            pstBalance.insert();
            balance.setOID(pstBalance.getlong(FLD_BALANCE_ID));
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstBalance(0),DBException.UNKNOWN);
        }
        return balance.getOID();
    }

    public static long insertExcByOid(Balance balance) throws DBException{
        try{
            PstBalance pstBalance = new PstBalance(0);
            pstBalance.setLong(FLD_CASH_CASHIER_ID,balance.getCashCashierId());
            pstBalance.setInt(FLD_BALANCE_TYPE,balance.getBalanceType());
            pstBalance.setDate(FLD_BALANCE_DATE,balance.getBalanceDate());
            pstBalance.setDouble(FLD_BALANCE_VALUE,balance.getBalanceValue());
            pstBalance.setDouble(FLD_SHOULD_VALUE,balance.getShouldValue());
            pstBalance.setLong(FLD_CURRENCY_ID,balance.getCurrencyOid());

            pstBalance.insertByOid(balance.getOID());
            //     balance.setOID(pstBalance.getlong(FLD_BALANCE_ID));
        }catch(DBException dbe){
            throw dbe;
        }catch(Exception e){
            throw new DBException(new PstBalance(0),DBException.UNKNOWN);
        }
        return balance.getOID();
    }




    public static long updateExc(Balance balance) throws DBException{
     try{
        if(balance.getOID() != 0){
            PstBalance pstBalance = new PstBalance(balance.getOID());
            pstBalance.setLong(FLD_CASH_CASHIER_ID,balance.getCashCashierId());
            pstBalance.setInt(FLD_BALANCE_TYPE,balance.getBalanceType());
            pstBalance.setDate(FLD_BALANCE_DATE,balance.getBalanceDate());
            pstBalance.setDouble(FLD_BALANCE_VALUE,balance.getBalanceValue());
            pstBalance.setDouble(FLD_SHOULD_VALUE,balance.getShouldValue());
            pstBalance.setLong(FLD_CURRENCY_ID,balance.getCurrencyOid());
          
            pstBalance.update();
            return balance.getOID();
          }
        }catch(DBException dbe){
			throw dbe; 
		}catch(Exception e){ 
			throw new DBException(new PstBalance(0),DBException.UNKNOWN);
		}
		return 0;
    }

    public static long deleteExc(long oid) throws DBException{
        try{
              PstBalance pstBalance = new PstBalance(oid);
              pstBalance.delete();
        }catch(DBException dbe){
			throw dbe; 
		}catch(Exception e){ 
			throw new DBException(new PstBalance(0),DBException.UNKNOWN);
		}
		return oid;
	}

    public static Vector listAll(){
		return list(0, 500, "",""); 
	}

	public static Vector list(int limitStart,int recordToGet, String whereClause, String order){
		Vector lists = new Vector(); 
		DBResultSet dbrs = null;
		try {
			String sql = "SELECT * FROM " + TBL_BALANCE;
			if(whereClause != null && whereClause.length() > 0)
				sql = sql + " WHERE " + whereClause;
			if(order != null && order.length() > 0)
				sql = sql + " ORDER BY " + order;

			switch (DBHandler.DBSVR_TYPE) { 
			case DBHandler.DBSVR_MYSQL : 
					if(limitStart == 0 && recordToGet == 0)
						sql = sql + ""; 
					else 
						sql = sql + " LIMIT " + limitStart + ","+ recordToGet ; 
				 break;
			case DBHandler.DBSVR_POSTGRESQL : 
 					if(limitStart == 0 && recordToGet == 0) 
						sql = sql + ""; 
					else 
						sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
				 break;
			case DBHandler.DBSVR_SYBASE :
				 break;
			case DBHandler.DBSVR_ORACLE :
				 break;
			case DBHandler.DBSVR_MSSQL :
				 break;

			default:
                if(limitStart == 0 && recordToGet == 0)
					sql = sql + ""; 
				else 
					sql = sql + " LIMIT " + limitStart + ","+ recordToGet ; 
			}
            dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();
			while(rs.next()) {
				Balance balance = new Balance();
				resultToObject(rs, balance);
				lists.add(balance);
			}
			rs.close();
			return lists;

		}catch(Exception e) {
			System.out.println(e);
		}finally {
			DBResultSet.close(dbrs);
		}
			return new Vector();
	}

    //Detail Pembayaran
      public static Vector listDetailPayment(int limitStart,int recordToGet, String whereClause, String order){
		Vector lists = new Vector();
		DBResultSet dbrs = null;
		try {
			String sql = "SELECT CB." + fieldNames[FLD_BALANCE_ID] +
                                     ", CB." + fieldNames[FLD_SHOULD_VALUE] +
                                     ", CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID] +
                                     ", CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_CODE] +
                                     " FROM " + TBL_BALANCE + " CB" +
                                     " INNER JOIN " + PstCurrencyType.TBL_POS_CURRENCY_TYPE + " CURR" +
                                     " ON CB." + fieldNames[FLD_CURRENCY_ID] +
                                     " = CURR." + PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID];

			if(whereClause != null && whereClause.length() > 0)
				sql = sql + " WHERE " + whereClause;
			if(order != null && order.length() > 0)
				sql = sql + " ORDER BY " + order;

			switch (DBHandler.DBSVR_TYPE) {
			case DBHandler.DBSVR_MYSQL :
					if(limitStart == 0 && recordToGet == 0)
						sql = sql + "";
					else
						sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
				 break;
			case DBHandler.DBSVR_POSTGRESQL :
 					if(limitStart == 0 && recordToGet == 0)
						sql = sql + "";
					else
						sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;
				 break;
			case DBHandler.DBSVR_SYBASE :
				 break;
			case DBHandler.DBSVR_ORACLE :
				 break;
			case DBHandler.DBSVR_MSSQL :
				 break;

			default:
                if(limitStart == 0 && recordToGet == 0)
					sql = sql + "";
				else
					sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;
			}
            dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();
			while(rs.next()) {
                Vector temp = new Vector();
                Balance balance = new Balance();
                CurrencyType currencyType= new CurrencyType();

                balance.setOID(rs.getLong(1));
                balance.setShouldValue(rs.getDouble(2));
                temp.add(balance);

                currencyType.setOID(rs.getLong(3));
                currencyType.setCode(rs.getString(4));
                temp.add(currencyType);
                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }



    public static double getSaldoAwal(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_BALANCE_VALUE] +
            "* QDR." + PstQuickDailyRate.fieldNames[PstQuickDailyRate.FLD_SELLING_RATE] + ")" +
            " FROM " + TBL_BALANCE + " CB" +
            " INNER JOIN " + PstQuickDailyRate.TBL_POS_QUICK_DAILY_RATE + " QDR" +
            " ON CB." + fieldNames[FLD_CURRENCY_ID] +
            " = QDR." + PstQuickDailyRate.fieldNames[PstQuickDailyRate.FLD_CURRENCY_TYPE_ID];

            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
                sql = sql + " AND "+PstBalance.fieldNames[PstBalance.FLD_BALANCE_TYPE]+"= 0";

            System.out.println("SQL Saldo Awal :" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }
    
    public static double getSaldoAkhir(long oidCashCashier) {
        return getSaldoAkhir(oidCashCashier, "");
    }
    
    public static double getSaldoAkhir(long oidCashCashier, String where) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            //String sql = "SELECT SUM(" + fieldNames[FLD_SHOULD_VALUE] +
            //"* QDR." + PstQuickDailyRate.fieldNames[PstQuickDailyRate.FLD_SELLING_RATE] + ")" +
             String sql = "SELECT SUM(" + fieldNames[FLD_SHOULD_VALUE] + ")" +
            //"* QDR." + PstQuickDailyRate.fieldNames[PstQuickDailyRate.FLD_SELLING_RATE] + ")" +
            " FROM " + TBL_BALANCE + " CB" +
            " INNER JOIN " + PstQuickDailyRate.TBL_POS_QUICK_DAILY_RATE + " QDR" +
            " ON CB." + fieldNames[FLD_CURRENCY_ID] +
            " = QDR." + PstQuickDailyRate.fieldNames[PstQuickDailyRate.FLD_CURRENCY_TYPE_ID] +
            " WHERE " + " CB." + fieldNames[FLD_BALANCE_TYPE] + "= 1";
            
             if(oidCashCashier==0){
                 sql = sql + " AND "+where;
            }else{
                sql=sql +" AND CB." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+" = " + oidCashCashier;
            } 
           

           // if (whereClause != null && whereClause.length() > 0)
               // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }
    
    public static double getUangDiLaci(long oidCashCashier) {
        return getUangDiLaci(oidCashCashier,"");
    }
    
    public static double getUangDiLaci(long oidCashCashier, String where) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_BALANCE_VALUE] +
            "* QDR." + PstQuickDailyRate.fieldNames[PstQuickDailyRate.FLD_SELLING_RATE] + ")" +
            " FROM " + TBL_BALANCE + " CB" +
            " INNER JOIN " + PstQuickDailyRate.TBL_POS_QUICK_DAILY_RATE + " QDR" +
            " ON CB." + fieldNames[FLD_CURRENCY_ID] +
            " = QDR." + PstQuickDailyRate.fieldNames[PstQuickDailyRate.FLD_CURRENCY_TYPE_ID] +
            " WHERE " + " CB." + fieldNames[FLD_BALANCE_TYPE] + "= 1";
            
             if(oidCashCashier==0){
                sql = sql + " AND "+where;
            }else{
                sql=sql+" AND CB." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+" = " + oidCashCashier;
            }
            
    

           // if (whereClause != null && whereClause.length() > 0)
               // sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }



    	public static void resultToObject(ResultSet rs, Balance balance){
	try{
	    balance.setOID(rs.getLong(PstBalance.fieldNames[PstBalance.FLD_BALANCE_ID]));
            balance.setCashCashierId(rs.getLong(PstBalance.fieldNames[PstBalance.FLD_CASH_CASHIER_ID]));
            balance.setBalanceType(rs.getInt(PstBalance.fieldNames[PstBalance.FLD_BALANCE_TYPE]));
            Date date = DBHandler.convertDate(rs.getDate(PstBalance.fieldNames[PstBalance.FLD_BALANCE_DATE]),rs.getTime(PstBalance.fieldNames[PstBalance.FLD_BALANCE_DATE]));
            balance.setBalanceDate(date);
            //balance.setBalanceDate(rs.getDate(PstBalance.fieldNames[PstBalance.FLD_BALANCE_DATE]));
            balance.setBalanceValue(rs.getDouble(PstBalance.fieldNames[PstBalance.FLD_BALANCE_VALUE]));
            balance.setShouldValue(rs.getDouble(PstBalance.fieldNames[PstBalance.FLD_SHOULD_VALUE]));
            balance.setCurrencyOid(rs.getLong(PstBalance.fieldNames[PstBalance.FLD_CURRENCY_ID]));
         }catch(Exception e){ }
	}
        
 	public static boolean checkOID(long cashBalanceId)
        {
            DBResultSet dbrs = null;
            boolean result = false;
            try
            {
		String sql = "SELECT * FROM " + TBL_BALANCE + 
                    " WHERE " + PstBalance.fieldNames[PstBalance.FLD_BALANCE_ID] + 
                    " = " + cashBalanceId;

		dbrs = DBHandler.execQueryResult(sql);
		ResultSet rs = dbrs.getResultSet();

		while(rs.next()) 
                { 
                    result = true; 
                }
		rs.close();
            }
            catch(Exception e)
            {
		System.out.println("err : "+e.toString());
            }
            finally
            {
		DBResultSet.close(dbrs);
            }
            return result;
	}
	
	public static long insertByOid(Balance balance) throws DBException {
      try {
         PstBalance pstBalance = new PstBalance(0);
         pstBalance.setLong(FLD_CASH_CASHIER_ID, balance.getCashCashierId());
         pstBalance.setInt(FLD_BALANCE_TYPE, balance.getBalanceType());
         pstBalance.setDate(FLD_BALANCE_DATE, balance.getBalanceDate());
         pstBalance.setDouble(FLD_BALANCE_VALUE, balance.getBalanceValue());
         pstBalance.setDouble(FLD_SHOULD_VALUE, balance.getShouldValue());
         pstBalance.setLong(FLD_CURRENCY_ID, balance.getCurrencyOid());
         pstBalance.insertByOid(balance.getOID());
      } catch (DBException dbe) {
         throw dbe;
      } catch (Exception e) {
         throw new DBException(new PstBalance(0), DBException.UNKNOWN);
      }
      return balance.getOID();
   }
	
	public static long syncExc(JSONObject jSONObject){
      long oid = 0;
      if (jSONObject != null){
       oid = jSONObject.optLong(PstBalance.fieldNames[PstBalance.FLD_BALANCE_ID],0);
         if (oid > 0){
          Balance balance = new Balance();
          balance.setOID(jSONObject.optLong(PstBalance.fieldNames[PstBalance.FLD_BALANCE_ID],0));
          balance.setCashCashierId(jSONObject.optLong(PstBalance.fieldNames[PstBalance.FLD_CASH_CASHIER_ID],0));
          balance.setBalanceType(jSONObject.optInt(PstBalance.fieldNames[PstBalance.FLD_BALANCE_TYPE],0));
          balance.setBalanceDate(Formater.formatDate(jSONObject.optString(PstBalance.fieldNames[PstBalance.FLD_BALANCE_DATE],  "0000-00-00"), "yyyy-MM-dd"));
          balance.setBalanceValue(jSONObject.optDouble(PstBalance.fieldNames[PstBalance.FLD_BALANCE_VALUE],0));
          balance.setShouldValue(jSONObject.optDouble(PstBalance.fieldNames[PstBalance.FLD_SHOULD_VALUE],0));
          balance.setCurrencyOid(jSONObject.optLong(PstBalance.fieldNames[PstBalance.FLD_CURRENCY_ID],0));
         boolean checkOidBalance = PstBalance.checkOID(oid);
          try{
            if(checkOidBalance){
               oid = PstBalance.updateExc(balance);
            }else{
               oid = PstBalance.insertByOid(balance);
            }
         }catch(Exception exc){
			 oid = 0;
		 }
         }
      }
   return oid;
   }
        

 }

