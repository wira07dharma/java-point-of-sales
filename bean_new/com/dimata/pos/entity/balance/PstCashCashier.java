/* Generated by Together */
package com.dimata.pos.entity.balance;

import com.dimata.posbo.db.DBException;
import com.dimata.posbo.db.DBHandler;
import com.dimata.posbo.db.DBResultSet;
import com.dimata.posbo.db.I_DBInterface;
import com.dimata.posbo.db.I_DBType;

import com.dimata.pos.entity.masterCashier.*;
import com.dimata.common.entity.location.*;
import com.dimata.pos.entity.billing.*;
import com.dimata.pos.entity.payment.PstCreditPaymentMain;
import com.dimata.posbo.entity.masterdata.*;
/* package qdep */
import java.sql.ResultSet;
import java.util.Vector;
import java.util.Date;

//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;
import com.dimata.posbo.entity.admin.*;
import com.dimata.pos.entity.payment.*;
import com.dimata.common.entity.payment.*;
import com.dimata.util.Formater;
import org.json.JSONObject;

public class  PstCashCashier extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language{

    //public static final String TBL_CASH_CASHIER="CASH_CASHIER";
    public static final String TBL_CASH_CASHIER = "cash_cashier";
    public static final int FLD_CASH_CASHIER_ID = 0;
    public static final int FLD_CASHMASTER_ID = 1;
    public static final int FLD_APPUSER_ID = 2;
    public static final int FLD_OPEN_DATE = 3;
    public static final int FLD_SPV_OID = 4;
    public static final int FLD_SPV_NAME = 5;
    public static final int FLD_SPVCLOSE_OID = 6;
    public static final int FLD_SPVCLOSE_NAME = 7;
    //+shift
    public static final int FLD_SHIFT_ID = 8;
    //close date
    public static final int FLD_CLOSE_DATE = 9;
    public static final String[] fieldNames = {
        "CASH_CASHIER_ID",
        "CASH_MASTER_ID",
        "APP_USER_ID",
        "OPEN_DATE",
        "SPV_OPEN_ID",
        "SPV_OPEN_NAME",
        "SPV_CLOSE_ID",
        "SPV_CLOSE_NAME",
        //"BILLING_TYPE_ID",
        //"TYPE",
        //"OPENING_RP",
        //"OPENING_USD",
        //+shift
        "SHIFT_ID",
        "CLOSE_DATE"
    };
    public static final int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_DATE,
        TYPE_LONG + TYPE_FK,
        TYPE_STRING,
        TYPE_LONG + TYPE_FK,
        TYPE_STRING,
        //+shift
        TYPE_LONG,
        TYPE_DATE
    };

    //constructor
    public PstCashCashier() {
    }

    public PstCashCashier(int i) throws DBException {
        super(new PstCashCashier());
    }

    public PstCashCashier(String sOid) throws DBException {
        super(new PstCashCashier(0));
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public PstCashCashier(long lOid) throws DBException {
        super(new PstCashCashier(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_CASH_CASHIER;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstCashCashier().getClass().getName();
    }

    public long fetchExc(Entity ent) throws Exception {
        CashCashier cashCashier = fetchExc(ent.getOID());
        ent = (Entity) cashCashier;
        return cashCashier.getOID();
    }

    public long insertExc(Entity ent) throws Exception {
        return insertExc((CashCashier) ent);
    }

    public long updateExc(Entity ent) throws Exception {
        return updateExc((CashCashier) ent);
    }

    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static CashCashier fetchExc(long oid) throws DBException {
        try {
            CashCashier cashCashier = new CashCashier();
            PstCashCashier pstCashCashier = new PstCashCashier(oid);
            cashCashier.setOID(oid);
            cashCashier.setCashMasterId(pstCashCashier.getlong(FLD_CASHMASTER_ID));
            cashCashier.setAppUserId(pstCashCashier.getlong(FLD_APPUSER_ID));
            cashCashier.setCashDate(pstCashCashier.getDate(FLD_OPEN_DATE));
            cashCashier.setSpvOid(pstCashCashier.getlong(FLD_SPV_OID));
            cashCashier.setSpvName(pstCashCashier.getString(FLD_SPV_NAME));
            cashCashier.setSpvCloseOid(pstCashCashier.getlong(FLD_SPVCLOSE_OID));
            cashCashier.setSpvCloseName(pstCashCashier.getString(FLD_SPVCLOSE_NAME));
            //+shift
            cashCashier.setShiftId(pstCashCashier.getlong(FLD_SHIFT_ID));
            //close balace
            cashCashier.setCloseDate(pstCashCashier.getDate(FLD_CLOSE_DATE));


            return cashCashier;
        } catch (DBException dbe) {
            System.out.println(">>>>>>>>" + dbe);
            throw dbe;
        } catch (Exception e) {
            System.out.println(">>>>>>>>>>>" + e);
            throw new DBException(new PstCashCashier(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(CashCashier cashCashier) throws DBException {
        try {
            PstCashCashier pstCashCashier = new PstCashCashier(0);

            pstCashCashier.setLong(FLD_CASHMASTER_ID, cashCashier.getCashMasterId());
            pstCashCashier.setDate(FLD_OPEN_DATE, cashCashier.getCashDate());
            pstCashCashier.setLong(FLD_APPUSER_ID, cashCashier.getAppUserId());
            pstCashCashier.setLong(FLD_SPV_OID, cashCashier.getSpvOid());
            pstCashCashier.setString(FLD_SPV_NAME, cashCashier.getSpvName());
            pstCashCashier.setLong(FLD_SPVCLOSE_OID, cashCashier.getSpvCloseOid());
            pstCashCashier.setString(FLD_SPVCLOSE_NAME, cashCashier.getSpvCloseName());
            //+shift
            pstCashCashier.setLong(FLD_SHIFT_ID, cashCashier.getShiftId());
            //close balace
            pstCashCashier.setDate(FLD_CLOSE_DATE, cashCashier.getCloseDate());


            pstCashCashier.insert();
            cashCashier.setOID(pstCashCashier.getlong(FLD_CASH_CASHIER_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCashCashier(0), DBException.UNKNOWN);
        }
        return cashCashier.getOID();
    }

    public static long insertExcByOid(CashCashier cashCashier) throws DBException {
        try {
            PstCashCashier pstCashCashier = new PstCashCashier(0);

            pstCashCashier.setLong(FLD_CASHMASTER_ID, cashCashier.getCashMasterId());
            pstCashCashier.setDate(FLD_OPEN_DATE, cashCashier.getCashDate());
            pstCashCashier.setLong(FLD_APPUSER_ID, cashCashier.getAppUserId());
            pstCashCashier.setLong(FLD_SPV_OID, cashCashier.getSpvOid());
            pstCashCashier.setString(FLD_SPV_NAME, cashCashier.getSpvName());
            pstCashCashier.setLong(FLD_SPVCLOSE_OID, cashCashier.getSpvCloseOid());
            pstCashCashier.setString(FLD_SPVCLOSE_NAME, cashCashier.getSpvCloseName());
            pstCashCashier.setLong(FLD_SHIFT_ID, cashCashier.getShiftId());
            //close balace
            pstCashCashier.setDate(FLD_CLOSE_DATE, cashCashier.getCloseDate());

            pstCashCashier.insertByOid(cashCashier.getOID());
            //cashCashier.setOID(pstCashCashier.getlong(FLD_CASH_CASHIER_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCashCashier(0), DBException.UNKNOWN);
        }
        return cashCashier.getOID();
    }

    public static long updateExc(CashCashier cashCashier) throws DBException {
        try {
            if (cashCashier.getOID() != 0) {

                PstCashCashier pstCashCashier = new PstCashCashier(cashCashier.getOID());

                pstCashCashier.setLong(FLD_CASHMASTER_ID, cashCashier.getCashMasterId());
                pstCashCashier.setLong(FLD_APPUSER_ID, cashCashier.getAppUserId());
                pstCashCashier.setDate(FLD_OPEN_DATE, cashCashier.getCashDate());
                pstCashCashier.setLong(FLD_SPV_OID, cashCashier.getSpvOid());
                pstCashCashier.setString(FLD_SPV_NAME, cashCashier.getSpvName());
                pstCashCashier.setLong(FLD_SPVCLOSE_OID, cashCashier.getSpvCloseOid());
                pstCashCashier.setString(FLD_SPVCLOSE_NAME, cashCashier.getSpvCloseName());
                //+shift
                pstCashCashier.setLong(FLD_SHIFT_ID, cashCashier.getShiftId());
                //close balace
                pstCashCashier.setDate(FLD_CLOSE_DATE, cashCashier.getCloseDate());


                pstCashCashier.update();
                return cashCashier.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCashCashier(0), DBException.UNKNOWN);
        }
        return 0;
    }

    //Update Closing Balance
    public static long updateForClosing(CashCashier cashCashier) throws DBException {
        try {
            if (cashCashier.getOID() != 0) {

                PstCashCashier pstCashCashier = new PstCashCashier(cashCashier.getOID());
                pstCashCashier.setLong(FLD_SPVCLOSE_OID, cashCashier.getSpvCloseOid());
                pstCashCashier.setString(FLD_SPVCLOSE_NAME, cashCashier.getSpvCloseName());
                pstCashCashier.setDate(FLD_CLOSE_DATE, cashCashier.getCloseDate());


                pstCashCashier.update();
                return cashCashier.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCashCashier(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long oid) throws DBException {
        try {
            PstCashCashier pstCashCashier = new PstCashCashier(oid);
            pstCashCashier.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCashCashier(0), DBException.UNKNOWN);
        }
        return oid;
    }

    public static Vector listAll() {
        return list(0, 500, "", "");
    }

    public static int getCount (String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID] + ") FROM " + TBL_CASH_CASHIER;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_CASHIER;

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                CashCashier cashCashier = new CashCashier();
                resultToObject(rs, cashCashier);
                lists.add(cashCashier);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    //List opening cashier
    public static Vector listOpeningCashier(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        limitStart = 0;
        recordToGet = 5;
        whereClause = PstCashCashier.fieldNames[PstCashCashier.FLD_SPVCLOSE_OID] + "= 1";
        order = PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE] + " DESC ";
        try {
            String sql = "SELECT cc." + fieldNames[FLD_CASH_CASHIER_ID]
                    + ", au." + PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]
                    + ", cc." + fieldNames[FLD_SPV_NAME]
                    + ", cc." + fieldNames[FLD_OPEN_DATE]
                    + ", loc." + PstLocation.fieldNames[PstLocation.FLD_NAME]
                    + " FROM " + PstAppUser.TBL_APP_USER + " au"
                    + " INNER JOIN " + TBL_CASH_CASHIER + " cc ON au." + PstAppUser.fieldNames[PstAppUser.FLD_USER_ID] + " = cc." + fieldNames[FLD_APPUSER_ID]
                    + " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " cm ON cc." + fieldNames[FLD_CASHMASTER_ID] + " = cm." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]
                    + " INNER JOIN " + PstLocation.TBL_P2_LOCATION + "  loc ON cm." + PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID] + "= loc." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                OpeningCashCashier openingCashCashier = new OpeningCashCashier();
                resultToObjectOpening(rs, openingCashCashier);
                lists.add(openingCashCashier);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
    //List Cash Per Opening

    public static Vector listCashOpening(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT CSH." + fieldNames[FLD_CASH_CASHIER_ID]
                    + " , MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]
                    + " , SHF." + PstShift.fieldNames[PstShift.FLD_SHIFT_ID]
                    + " , LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID]
                    + " , LOC." + PstLocation.fieldNames[PstLocation.FLD_NAME]
                    + " , CSH." + fieldNames[FLD_OPEN_DATE]
                    + " , SHF." + PstShift.fieldNames[PstShift.FLD_NAME]
                    + " , MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER]
                    + //+cash_bill_main
                    // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]+
                    // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]+
                    //" , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]+
                    " FROM " + TBL_CASH_CASHIER + " CSH"
                    + " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " MSTR"
                    + " ON CSH." + fieldNames[FLD_CASHMASTER_ID]
                    + " = MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]
                    + " INNER JOIN " + PstLocation.TBL_P2_LOCATION + " LOC"
                    + " ON MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID]
                    + " = LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID]
                    + " INNER JOIN " + PstShift.TBL_SHIFT + " SHF"
                    + " ON CSH." + fieldNames[FLD_SHIFT_ID]
                    + " = SHF." + PstShift.fieldNames[PstShift.FLD_SHIFT_ID];
            //+inner join cash_bill_main
            // " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " CBM" +
            // " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID] +
            // " = CSH." + fieldNames[FLD_CASH_CASHIER_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                CashCashier cashCashier = new CashCashier();
                CashMaster cashMaster = new CashMaster();
                Location location = new Location();
                Shift shift = new Shift();
                // BillMain billMain = new BillMain();

                cashCashier.setOID(rs.getLong(1));
                //cashCashier.setCashDate(rs.getDate(6));
                cashCashier.setCashDate(rs.getTimestamp(6));
                // cashCashier.setCashDate(rs.getObject(6);

                temp.add(cashCashier);

                cashMaster.setOID(rs.getLong(2));
                cashMaster.setCashierNumber(rs.getInt(8));
                temp.add(cashMaster);

                location.setOID(rs.getLong(4));
                location.setName(rs.getString(5));
                temp.add(location);

                shift.setOID(rs.getLong(3));
                shift.setName(rs.getString(7));
                temp.add(shift);

                // billMain.setDocType(rs.getInt(9));
                // billMain.setTransctionType(rs.getInt(10));
                // billMain.setTransactionStatus(rs.getInt(11));

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    //+count Per Cash Opening
    public static int getCountPerCashOpening(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT CSH." + fieldNames[FLD_CASH_CASHIER_ID]
                    + " , MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]
                    + " , SHF." + PstShift.fieldNames[PstShift.FLD_SHIFT_ID]
                    + " , LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID]
                    + " , LOC." + PstLocation.fieldNames[PstLocation.FLD_NAME]
                    + " , CSH." + fieldNames[FLD_OPEN_DATE]
                    + " , SHF." + PstShift.fieldNames[PstShift.FLD_NAME]
                    + " , MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER]
                    + //+cash_bill_main
                    // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]+
                    // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]+
                    // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]+
                    " FROM " + TBL_CASH_CASHIER + " CSH"
                    + " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " MSTR"
                    + " ON CSH." + fieldNames[FLD_CASHMASTER_ID]
                    + " INNER JOIN " + PstLocation.TBL_P2_LOCATION + " LOC"
                    + " ON MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID]
                    + " = LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID]
                    + " INNER JOIN " + PstShift.TBL_SHIFT + " SHF"
                    + " ON CSH." + fieldNames[FLD_SHIFT_ID]
                    + " = SHF." + PstShift.fieldNames[PstShift.FLD_SHIFT_ID];
            //+inner join cash_bill_main
            // " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " CBM" +
            //" ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID] +
            // " = CSH." + fieldNames[FLD_CASH_CASHIER_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static void resultToObject(ResultSet rs, CashCashier cashCashier) {
        try {
            cashCashier.setOID(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]));
            cashCashier.setCashMasterId(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID]));
            Date date = DBHandler.convertDate(rs.getDate(PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE]), rs.getTime(PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE]));
            cashCashier.setCashDate(date);
            //cashCashier.setCashDate(rs.getDate(PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE]));
            cashCashier.setAppUserId(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_APPUSER_ID]));
            cashCashier.setSpvOid(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_SPV_OID]));
            cashCashier.setSpvName(rs.getString(PstCashCashier.fieldNames[PstCashCashier.FLD_SPV_NAME]));
            cashCashier.setSpvCloseOid(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_SPVCLOSE_OID]));
            cashCashier.setSpvCloseName(rs.getString(PstCashCashier.fieldNames[PstCashCashier.FLD_SPVCLOSE_NAME]));
            cashCashier.setShiftId(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_SHIFT_ID]));
            Date dateClose = DBHandler.convertDate(rs.getDate(PstCashCashier.fieldNames[PstCashCashier.FLD_CLOSE_DATE]), rs.getTime(PstCashCashier.fieldNames[PstCashCashier.FLD_CLOSE_DATE]));
            cashCashier.setCloseDate(dateClose);

        } catch (Exception e) {
        }
    }

    public static void resultToObjectOpening(ResultSet rs, OpeningCashCashier openingCashCashier) {
        try {
            openingCashCashier.setCashierId(rs.getLong(PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]));
            openingCashCashier.setNameUser(rs.getString(PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]));
            openingCashCashier.setNameSupervisor(rs.getString(PstCashCashier.fieldNames[PstCashCashier.FLD_SPV_NAME]));
            Date date = DBHandler.convertDate(rs.getDate(PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE]), rs.getTime(PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE]));
            openingCashCashier.setOpenDate(date);
            // openingCashCashier.setOpenDate(rs.getDate(PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE]));
            openingCashCashier.setLocation(rs.getString(PstLocation.fieldNames[PstLocation.FLD_NAME]));

        } catch (Exception e) {
        }
    }

    public static boolean checkOID(long cashCashierId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_CASHIER
                    + " WHERE " + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]
                    + " = " + cashCashierId;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    /**
     * Ari_wiweka 20130811
     * list Cash untuk closing cashier
     */
    public static Vector listCashClosing(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT CP."+PstCashPayment1.fieldNames[PstCashPayment1.FLD_PAY_TYPE]+", PS."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]+", CP."+PstCashPayment1.fieldNames[PstCashPayment1.FLD_CURRENCY_ID]+",  SUM(CCC." + PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_AMOUNT] + ") AS AMOUNT_"+PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_AMOUNT]
                    + " FROM " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CBM "
                    + " LEFT JOIN " + PstCashPayment1.TBL_PAYMENT + " AS CP ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = CP." + PstCashPayment1.fieldNames[PstCashPayment1.FLD_BILL_MAIN_ID]
                    + " LEFT JOIN " + PstCashCreditCard.TBL_CREDIT_CARD + " AS CCC ON CP." + PstCashPayment1.fieldNames[PstCashPayment1.FLD_PAYMENT_ID] + " = CCC." + PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_PAYMENT_ID]
                    + " LEFT JOIN " + PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM + " AS PS ON CP." + PstCashPayment1.fieldNames[PstCashPayment1.FLD_PAY_TYPE] + " = PS." + PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            sql = sql + " GROUP BY CP." + PstCashPayment1.fieldNames[PstCashPayment1.FLD_PAY_TYPE];

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                CashCreditCard cashCreditCard = new CashCreditCard();
                CashPayments1 cashPayments1 = new CashPayments1();
                PaymentSystem  paymentSystem = new PaymentSystem();

                paymentSystem.setPaymentSystem(rs.getString(PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]));
                temp.add(paymentSystem);

                cashPayments1.setPaymentType(rs.getLong(PstCashPayment1.fieldNames[PstCashPayment1.FLD_PAY_TYPE]));
                cashPayments1.setCurrencyId(rs.getLong(PstCashPayment1.fieldNames[PstCashPayment1.FLD_CURRENCY_ID]));
                temp.add(cashPayments1);

                cashCreditCard.setAmount(rs.getDouble("AMOUNT_"+PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_AMOUNT]));
                temp.add(cashCreditCard);

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * Ari_wiweka 20130811
     * list Credit untuk closing cashier
     */
    public static Vector listCreditClosing(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT CCP." + PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAY_TYPE]+", PS."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]+", CCP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CURRENCY_ID]+",  SUM(CPI." + PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_AMOUNT] + ") AS AMOUNT_"+PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_AMOUNT]
                    + " FROM " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CBM "
                    + " LEFT JOIN " + PstCreditPaymentMain.TBL_CASH_CREDIT_PAYMENT_MAIN + " AS CPM ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = CPM." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_BILL_MAIN_ID]
                    + " LEFT JOIN " + PstCashCreditPaymentDinamis.TBL_PAYMENT + " AS CCP ON CPM." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID] + " = CCP." + PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CREDIT_MAIN_ID]
                    + " LEFT JOIN " + PstCashCreditPaymentInfo.TBL_CREDIT_PAYMENT_INFO + " AS CPI ON CCP." + PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAYMENT_ID] + " = CPI." + PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_CASH_CREDIT_PAYMENT_ID]
                    + " LEFT JOIN " + PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM + " AS PS ON CCP." + PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAY_TYPE] + " = PS." + PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            sql = sql + " GROUP BY CCP." + PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAY_TYPE];

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                CashCreditPaymentInfo cashCreditPaymentInfo = new CashCreditPaymentInfo();
                CashCreditPaymentsDinamis cashCreditPaymentsDinamis = new CashCreditPaymentsDinamis();
                PaymentSystem  paymentSystem = new PaymentSystem();

                paymentSystem.setPaymentSystem(rs.getString(PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM]));
                temp.add(paymentSystem);

                cashCreditPaymentsDinamis.setPaymentType(rs.getLong(PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAY_TYPE]));
                cashCreditPaymentsDinamis.setCurrencyId(rs.getLong(PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CURRENCY_ID]));
                temp.add(cashCreditPaymentsDinamis);

                cashCreditPaymentInfo.setAmount(rs.getDouble("AMOUNT_"+PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_AMOUNT]));
                temp.add(cashCreditPaymentInfo);

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * Ari_wiweka 20130812
     * Total cash transaction pada closing cashier
     */
    public static double getTotalCashTrans(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(CCC." + PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_AMOUNT] + ") AS AMOUNT_"+PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_AMOUNT]
                    + " FROM " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CBM "
                    + " LEFT JOIN " + PstCashPayment1.TBL_PAYMENT + " AS CP ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = CP." + PstCashPayment1.fieldNames[PstCashPayment1.FLD_BILL_MAIN_ID]
                    + " LEFT JOIN " + PstCashCreditCard.TBL_CREDIT_CARD + " AS CCC ON CP." + PstCashPayment1.fieldNames[PstCashPayment1.FLD_PAYMENT_ID] + " = CCC." + PstCashCreditCard.fieldNames[PstCashCreditCard.FLD_PAYMENT_ID];

            if (whereClause != null && whereClause.length() > 0)
             sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    /**
     * Ari_wiweka 20130812
     * Total cash transaction pada closing cashier
     */
    public static double getTotalCreditTrans(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
             String sql = "SELECT SUM(CPI." + PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_AMOUNT] + ") AS AMOUNT_"+PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_AMOUNT]
                    + " FROM " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CBM "
                    + " LEFT JOIN " + PstCreditPaymentMain.TBL_CASH_CREDIT_PAYMENT_MAIN + " AS CPM ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = CPM." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_BILL_MAIN_ID]
                    + " LEFT JOIN " + PstCashCreditPaymentDinamis.TBL_PAYMENT + " AS CCP ON CPM." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID] + " = CCP." + PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CREDIT_MAIN_ID]
                    + " LEFT JOIN " + PstCashCreditPaymentInfo.TBL_CREDIT_PAYMENT_INFO + " AS CPI ON CCP." + PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAYMENT_ID] + " = CPI." + PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_CASH_CREDIT_PAYMENT_ID];

            if (whereClause != null && whereClause.length() > 0)
             sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }


    /**
     * Ari_wiweka 20130812
     * Refund Payment untuk closing cashier
     */
     public static double getReturSales(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]+") "
                    + " FROM "+PstBillMain.TBL_CASH_BILL_MAIN+" AS CBM INNER JOIN "+PstBillDetail.TBL_CASH_BILL_DETAIL+" AS CBD"
                    + " ON CBM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = CBD."+PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID];

            if (whereClause != null && whereClause.length() > 0)
             sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

      /**
     * Ari_wiweka 20130812
     * kembalian invoice
     */
     public static double getChange(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(CRP."+PstCashReturn.fieldNames[PstCashReturn.FLD_AMOUNT]+") "
                    + " FROM "+PstBillMain.TBL_CASH_BILL_MAIN+" AS CBM"
                    + " LEFT JOIN "+PstCashReturn.TBL_RETURN+" AS CRP"
                    + " ON CBM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" = CRP."+PstCashReturn.fieldNames[PstCashReturn.FLD_BILLMAIN_ID];

            if (whereClause != null && whereClause.length() > 0)
             sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

     /**
     * Ari_wiweka 20130811
     * list header print closing cashier
     */
    public static Vector listDataClosingCashier(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT CC."+fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]+", AU."+PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]+", CC."+fieldNames[PstCashCashier.FLD_OPEN_DATE]+","
                    + " CC."+fieldNames[PstCashCashier.FLD_CLOSE_DATE]+", LOC."+PstLocation.fieldNames[PstLocation.FLD_NAME]+", SF."+PstShift.fieldNames[PstShift.FLD_NAME]+" AS shiftName"
                    + " FROM "+TBL_CASH_CASHIER+" AS CC "
                    + " LEFT JOIN "+PstCashMaster.TBL_CASH_MASTER+" AS CM "
                    + " ON CC."+fieldNames[PstCashCashier.FLD_CASHMASTER_ID]+" = CM."+PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]
                    + " LEFT JOIN  "+PstAppUser.TBL_APP_USER+" AS AU "
                    + " ON CC."+fieldNames[PstCashCashier.FLD_APPUSER_ID]+" = AU."+PstAppUser.fieldNames[PstAppUser.FLD_USER_ID]
                    + " LEFT JOIN "+PstShift.TBL_SHIFT+" AS SF "
                    + " ON CC."+fieldNames[PstCashCashier.FLD_SHIFT_ID]+" = SF."+PstShift.fieldNames[PstShift.FLD_SHIFT_ID]
                    + " LEFT JOIN "+PstLocation.TBL_P2_LOCATION+" AS LOC "
                    + " ON CM."+PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID]+" = LOC."+PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID];
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                CashCashier cashCashier = new CashCashier();
                AppUser appUser = new AppUser();
                Location location = new Location();
                Shift shift = new Shift();

                cashCashier.setOID(rs.getLong(fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID]));
                cashCashier.setOpenDate(rs.getDate(fieldNames[PstCashCashier.FLD_OPEN_DATE]));
                cashCashier.setCloseDate(rs.getDate(fieldNames[PstCashCashier.FLD_CLOSE_DATE]));
                temp.add(cashCashier);

                appUser.setFullName(rs.getString(PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]));
                temp.add(appUser);

                location.setName(rs.getString(PstLocation.fieldNames[PstLocation.FLD_NAME]));
                temp.add(location);

                shift.setName(rs.getString("shiftName"));
                temp.add(shift);

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static Vector listCashOpeningOnlyGetSales(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT DISTINCT CSH." + fieldNames[FLD_CASH_CASHIER_ID]
                    + " , MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]
                    + " , SHF." + PstShift.fieldNames[PstShift.FLD_SHIFT_ID]
                    + " , LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID]
                    + " , LOC." + PstLocation.fieldNames[PstLocation.FLD_NAME]
                    + " , CSH." + fieldNames[FLD_OPEN_DATE]
                    + " , SHF." + PstShift.fieldNames[PstShift.FLD_NAME]
                    + " , MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER]
                    + //+cash_bill_main
                    // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE]+
                    // " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE]+
                    //" , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS]+
                    " FROM " + TBL_CASH_CASHIER + " CSH"
                    + " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " MSTR"
                    + " ON CSH." + fieldNames[FLD_CASHMASTER_ID]
                    + " = MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID]
                    + " INNER JOIN " + PstLocation.TBL_P2_LOCATION + " LOC"
                    + " ON MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_LOCATION_ID]
                    + " = LOC." + PstLocation.fieldNames[PstLocation.FLD_LOCATION_ID]
                    + " INNER JOIN " + PstShift.TBL_SHIFT + " SHF"
                    + " ON CSH." + fieldNames[FLD_SHIFT_ID]
                    + " = SHF." + PstShift.fieldNames[PstShift.FLD_SHIFT_ID]
                    + " INNER JOIN cash_bill_main cbm " +
                      " ON cbm.CASH_CASHIER_ID = CSH.CASH_CASHIER_ID ";
            //+inner join cash_bill_main
            // " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " CBM" +
            // " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID] +
            // " = CSH." + fieldNames[FLD_CASH_CASHIER_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                CashCashier cashCashier = new CashCashier();
                CashMaster cashMaster = new CashMaster();
                Location location = new Location();
                Shift shift = new Shift();
                // BillMain billMain = new BillMain();

                cashCashier.setOID(rs.getLong(1));
                //cashCashier.setCashDate(rs.getDate(6));
                cashCashier.setCashDate(rs.getTimestamp(6));
                // cashCashier.setCashDate(rs.getObject(6);

                temp.add(cashCashier);

                cashMaster.setOID(rs.getLong(2));
                cashMaster.setCashierNumber(rs.getInt(8));
                temp.add(cashMaster);

                location.setOID(rs.getLong(4));
                location.setName(rs.getString(5));
                temp.add(location);

                shift.setOID(rs.getLong(3));
                shift.setName(rs.getString(7));
                temp.add(shift);

                // billMain.setDocType(rs.getInt(9));
                // billMain.setTransctionType(rs.getInt(10));
                // billMain.setTransactionStatus(rs.getInt(11));

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
	
	public static long insertByOid(CashCashier cashCashier) throws DBException {
      try {
         PstCashCashier pstCashCashier = new PstCashCashier(0);
         pstCashCashier.setLong(FLD_CASHMASTER_ID, cashCashier.getCashMasterId());
         pstCashCashier.setLong(FLD_APPUSER_ID, cashCashier.getAppUserId());
         pstCashCashier.setDate(FLD_OPEN_DATE, cashCashier.getOpenDate());
         pstCashCashier.setLong(FLD_SPV_OID, cashCashier.getSpvOid());
         pstCashCashier.setString(FLD_SPV_NAME, cashCashier.getSpvName());
         pstCashCashier.setLong(FLD_SPVCLOSE_OID, cashCashier.getSpvCloseOid());
         pstCashCashier.setString(FLD_SPVCLOSE_NAME, cashCashier.getSpvCloseName());
         pstCashCashier.setLong(FLD_SHIFT_ID, cashCashier.getShiftId());
         pstCashCashier.setDate(FLD_CLOSE_DATE, cashCashier.getCloseDate());
         pstCashCashier.insertByOid(cashCashier.getOID());
      } catch (DBException dbe) {
         throw dbe;
      } catch (Exception e) {
         throw new DBException(new PstCashCashier(0), DBException.UNKNOWN);
      }
      return cashCashier.getOID();
   }
	
	public static long syncExc(JSONObject jSONObject){
      long oid = 0;
      if (jSONObject != null){
       oid = jSONObject.optLong(PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID],0);
         if (oid > 0){
          CashCashier cashCashier = new CashCashier();
          cashCashier.setOID(jSONObject.optLong(PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID],0));
          cashCashier.setCashMasterId(jSONObject.optLong(PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID],0));
          cashCashier.setAppUserId(jSONObject.optLong(PstCashCashier.fieldNames[PstCashCashier.FLD_APPUSER_ID],0));
          cashCashier.setOpenDate(Formater.formatDate(jSONObject.optString(PstCashCashier.fieldNames[PstCashCashier.FLD_OPEN_DATE],  "0000-00-00"), "yyyy-MM-dd"));
          cashCashier.setSpvOid(jSONObject.optLong(PstCashCashier.fieldNames[PstCashCashier.FLD_SPV_OID],0));
          cashCashier.setSpvName(jSONObject.optString(PstCashCashier.fieldNames[PstCashCashier.FLD_SPV_NAME], ""));
          cashCashier.setSpvCloseOid(jSONObject.optLong(PstCashCashier.fieldNames[PstCashCashier.FLD_SPVCLOSE_OID],0));
          cashCashier.setSpvCloseName(jSONObject.optString(PstCashCashier.fieldNames[PstCashCashier.FLD_SPVCLOSE_NAME], ""));
          cashCashier.setShiftId(jSONObject.optLong(PstCashCashier.fieldNames[PstCashCashier.FLD_SHIFT_ID],0));
          cashCashier.setCloseDate(Formater.formatDate(jSONObject.optString(PstCashCashier.fieldNames[PstCashCashier.FLD_CLOSE_DATE],  "0000-00-00"), "yyyy-MM-dd"));
         boolean checkOidCashCashier = PstCashCashier.checkOID(oid);
          try{
            if(checkOidCashCashier){
               oid = PstCashCashier.updateExc(cashCashier);
            }else{
               oid = PstCashCashier.insertByOid(cashCashier);
            }
         }catch(Exception exc){
			 oid = 0;
		 }
         }
      }
   return oid;
   }
}
