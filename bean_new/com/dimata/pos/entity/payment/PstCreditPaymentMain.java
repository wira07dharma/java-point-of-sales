/* Generated by Together */

package com.dimata.pos.entity.payment;

import com.dimata.posbo.db.DBException;
import com.dimata.posbo.db.DBHandler;
import com.dimata.posbo.db.DBResultSet;
import com.dimata.posbo.db.I_DBInterface;
import com.dimata.posbo.db.I_DBType;

/* package java */

import java.util.Vector;

/* package qdep */
import com.dimata.util.lang.I_Language;
import java.sql.ResultSet;
import java.util.Date;
//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.common.entity.payment.*;
import com.dimata.pos.entity.balance.PstCashCashier;
import com.dimata.pos.entity.billing.BillMain;
import com.dimata.pos.entity.billing.PstBillDetail;
import com.dimata.pos.entity.billing.PstBillMain;
import com.dimata.pos.entity.masterCashier.PstCashMaster;
import com.dimata.posbo.entity.search.SrcSaleReport;
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.qdep.form.FRMHandler;
import com.dimata.util.Formater;
import java.util.Enumeration;
import java.util.Hashtable;

public class PstCreditPaymentMain  extends   DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language  {
    //public static final String TBL_CASH_CREDIT_PAYMENT_MAIN = "CASH_CREDIT_PAYMENT_MAIN";
    public static final String TBL_CASH_CREDIT_PAYMENT_MAIN = "cash_credit_payment_main";

    public static final int FLD_CREDIT_PAYMENT_MAIN_ID = 0;
    public static final int FLD_BILL_MAIN_ID = 1;
    public static final int FLD_CASH_CASHIER_ID = 2;
    public static final int FLD_LOCATION_ID = 3;
    public static final int FLD_BILL_DATE = 4;
    public static final int FLD_APPUSER_ID = 5;
    public static final int FLD_SHIFT_ID = 6;
    public static final int FLD_BILL_STATUS = 7;
    public static final int FLD_SALES_CODE = 8;
    public static final int FLD_INVOICE_NUMBER = 9;
    public static final int FLD_INVOICE_COUNTER = 10;
    public static final int FLD_DOC_TYPE = 11;
    //added by dewok 2018-04-30
    public static final int FLD_PAYMENT_NUMBER = 12;
    public static final int FLD_AMOUNT_RETURN = 13;
    public static final int FLD_PAY_AMOUNT_CREDIT = 14;
    public static final int FLD_PAYMENT_DATE = 15;
    public static final int FLD_APP_USER_SALES_ID = 16;

    public static final String[] fieldNames = {
        "CREDIT_PAYMENT_MAIN_ID",
        "CASH_BILL_MAIN_ID",
        "CASH_CASHIER_ID",
        "LOCATION_ID",
        "BILL_DATE",
        "APP_USER_ID",
        "SHIFT_ID",
        "BILL_STATUS",
        "SALES_CODE",
        "BILL_NUMBER",
        "INVOICE_COUNTER",
        "DOC_TYPE",
        //added by dewok 2018-04-30
        "PAYMENT_NUMBER",
        "AMOUNT_RETURN",
        "PAY_AMOUNT_CREDIT",
        "PAYMENT_DATE",
        "APP_USER_SALES_ID"
    };

    public static final int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID, //creditpaymentmain
        TYPE_LONG + TYPE_FK, //billmainId
        TYPE_LONG + TYPE_FK, //cashierId
        TYPE_LONG + TYPE_FK, //locationId
        TYPE_DATE, //billdate
        TYPE_LONG + TYPE_FK, //appuserId
        TYPE_LONG + TYPE_FK, //shiftId
        TYPE_INT, //billstatus
        TYPE_STRING, //salesCode

        TYPE_STRING, //invNumbre
        TYPE_INT, //invCounter
        TYPE_INT, //docType
        //added by dewok 2018-04-30
        TYPE_STRING,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_DATE,
        TYPE_LONG
    };

    //Type penyimpanan transaksi
    public static final int TYPE_INTERNAL = 0;
    public static final int TYPE_EXTERNAL = 1;

    //Type document transaksi
    public static final int TYPE_CREDIT_PAYMENT = 0;
    //public static final int TYPE_RETUR    = 1;
    //public static final int TYPE_GIFT     = 2;
    //public static final int TYPE_COST     = 3;
    //public static final int TYPE_COMPLIMENT = 4;
    //public static final int TYPE_OPEN_BILL=5;
    //public static final int TYPE_CREDIT_
    //public static final int DISC_TYPE_PCT=0;
    //public static final int DISC_TYPE_VALUE=1;
    //sale type
    //public static final int SALE_NON_RECEIP=0;
    //public static final int SALE_RECEIP=1;

    //transaction type
    public static final int TRANS_TYPE_CASH = 0;
    public static final int TRANS_TYPE_CREDIT = 1;

    //transaction status
    public static final int TRANS_STATUS_CLOSE = 0; //untuk penjualan cash
    public static final int TRANS_STATUS_OPEN = 1; //untuk penjualan open bill ataupun credit
    public static String[] saleTypes = {
        "NON RESEP", "RESEP"
    };

    //price type
    public static final String DEFAULT_PRICE = "00";
    public static final String PRICE_TYPE_01 = "01";
    public static final String PRICE_TYPE_02 = "02";
    public static final String PRICE_TYPE_03 = "03";


    //constructor
    public PstCreditPaymentMain() {
    }

    public PstCreditPaymentMain(int i) throws DBException {
        super(new PstCreditPaymentMain());
    }

    public PstCreditPaymentMain(String sOid) throws DBException {
        super(new PstCreditPaymentMain(0));
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public PstCreditPaymentMain(long lOid) throws DBException {
        super(new PstCreditPaymentMain(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_CASH_CREDIT_PAYMENT_MAIN;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstBillDetail().getClass().getName();
    }

    public long fetchExc(Entity ent) throws Exception {
        CreditPaymentMain creditPaymentMain = fetchExc(ent.getOID());
        ent = (Entity) creditPaymentMain;
        return creditPaymentMain.getOID();
    }

    public long insertExc(Entity ent) throws Exception {
        return insertExc((CreditPaymentMain) ent);
    }

    public long updateExc(Entity ent) throws Exception {
        return updateExc((CreditPaymentMain) ent);
    }

    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());

    }

    public static CreditPaymentMain fetchExc(long oid) throws DBException {
        try {
            CreditPaymentMain creditPaymentMain = new CreditPaymentMain();
            PstCreditPaymentMain pstCreditPaymentMain = new PstCreditPaymentMain(oid);
            creditPaymentMain.setOID(oid);
            creditPaymentMain.setCashCashierId(pstCreditPaymentMain.getlong(FLD_CASH_CASHIER_ID));
            creditPaymentMain.setBillMainId(pstCreditPaymentMain.getlong(FLD_BILL_MAIN_ID));
            creditPaymentMain.setLocationId(pstCreditPaymentMain.getlong(FLD_LOCATION_ID));
            creditPaymentMain.setBillDate(pstCreditPaymentMain.getDate(FLD_BILL_DATE));

            creditPaymentMain.setAppUserId(pstCreditPaymentMain.getlong(FLD_APPUSER_ID));
            creditPaymentMain.setShiftId(pstCreditPaymentMain.getlong(FLD_SHIFT_ID));

            creditPaymentMain.setBillStatus(pstCreditPaymentMain.getInt(FLD_BILL_STATUS));
            creditPaymentMain.setSalesCode(pstCreditPaymentMain.getString(FLD_SALES_CODE));

            creditPaymentMain.setInvoiceNumber(pstCreditPaymentMain.getString(FLD_INVOICE_NUMBER));
            creditPaymentMain.setInvoiceCounter(pstCreditPaymentMain.getInt(FLD_INVOICE_COUNTER));
            creditPaymentMain.setDocType(pstCreditPaymentMain.getInt(FLD_DOC_TYPE));
            //added by dewok 2018-04-30
            creditPaymentMain.setPaymentNumber(pstCreditPaymentMain.getString(FLD_PAYMENT_NUMBER));
            creditPaymentMain.setAmountReturn(pstCreditPaymentMain.getdouble(FLD_AMOUNT_RETURN));
            creditPaymentMain.setPayAmountCredit(pstCreditPaymentMain.getdouble(FLD_PAY_AMOUNT_CREDIT));
            creditPaymentMain.setPaymentDate(pstCreditPaymentMain.getDate(FLD_PAYMENT_DATE));
            creditPaymentMain.setAppUserSalesId(pstCreditPaymentMain.getlong(FLD_APP_USER_SALES_ID));

            return creditPaymentMain;
        } catch (DBException dbe) {
            System.out.println("error =" + dbe);
            throw dbe;
        } catch (Exception e) {
            System.out.println("error =" + e);
            throw new DBException(new PstCreditPaymentMain(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(CreditPaymentMain creditPaymentMain) throws DBException {
        try {
            PstCreditPaymentMain pstCreditPaymentMain = new PstCreditPaymentMain(0);
            pstCreditPaymentMain.setLong(FLD_CASH_CASHIER_ID, creditPaymentMain.getCashCashierId());
            pstCreditPaymentMain.setLong(FLD_BILL_MAIN_ID, creditPaymentMain.getBillMainId());
            pstCreditPaymentMain.setLong(FLD_LOCATION_ID, creditPaymentMain.getLocationId());
            pstCreditPaymentMain.setDate(FLD_BILL_DATE, creditPaymentMain.getBillDate());

            pstCreditPaymentMain.setLong(FLD_APPUSER_ID, creditPaymentMain.getAppUserId());
            pstCreditPaymentMain.setLong(FLD_SHIFT_ID, creditPaymentMain.getShiftId());
            pstCreditPaymentMain.setInt(FLD_BILL_STATUS, creditPaymentMain.getBillStatus());
            pstCreditPaymentMain.setString(FLD_SALES_CODE, creditPaymentMain.getSalesCode());


            pstCreditPaymentMain.setString(FLD_INVOICE_NUMBER, creditPaymentMain.getInvoiceNumber());
            pstCreditPaymentMain.setInt(FLD_INVOICE_COUNTER, creditPaymentMain.getInvoiceCounter());
            pstCreditPaymentMain.setInt(FLD_DOC_TYPE, creditPaymentMain.getDocType());
            //added by dewok 2018-04-30
            pstCreditPaymentMain.setString(FLD_PAYMENT_NUMBER, creditPaymentMain.getPaymentNumber());
            pstCreditPaymentMain.setDouble(FLD_AMOUNT_RETURN, creditPaymentMain.getAmountReturn());
            pstCreditPaymentMain.setDouble(FLD_PAY_AMOUNT_CREDIT, creditPaymentMain.getPayAmountCredit());
            pstCreditPaymentMain.setDate(FLD_PAYMENT_DATE, creditPaymentMain.getPaymentDate());
            pstCreditPaymentMain.setLong(FLD_APP_USER_SALES_ID, creditPaymentMain.getAppUserSalesId());
            
            pstCreditPaymentMain.insert();
            creditPaymentMain.setOID(pstCreditPaymentMain.getlong(FLD_CREDIT_PAYMENT_MAIN_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCreditPaymentMain(0), DBException.UNKNOWN);
        }
        return creditPaymentMain.getOID();
    }

    public static long insertExcByOid(CreditPaymentMain creditPaymentMain) throws DBException {
        try {
            PstCreditPaymentMain pstCreditPaymentMain = new PstCreditPaymentMain(0);
            pstCreditPaymentMain.setLong(FLD_CASH_CASHIER_ID, creditPaymentMain.getCashCashierId());
            pstCreditPaymentMain.setLong(FLD_BILL_MAIN_ID, creditPaymentMain.getBillMainId());
            pstCreditPaymentMain.setLong(FLD_LOCATION_ID, creditPaymentMain.getLocationId());
            pstCreditPaymentMain.setDate(FLD_BILL_DATE, creditPaymentMain.getBillDate());

            pstCreditPaymentMain.setLong(FLD_APPUSER_ID, creditPaymentMain.getAppUserId());
            pstCreditPaymentMain.setLong(FLD_SHIFT_ID, creditPaymentMain.getShiftId());
            pstCreditPaymentMain.setInt(FLD_BILL_STATUS, creditPaymentMain.getBillStatus());
            pstCreditPaymentMain.setString(FLD_SALES_CODE, creditPaymentMain.getSalesCode());


            pstCreditPaymentMain.setString(FLD_INVOICE_NUMBER, creditPaymentMain.getInvoiceNumber());
            pstCreditPaymentMain.setInt(FLD_INVOICE_COUNTER, creditPaymentMain.getInvoiceCounter());
            pstCreditPaymentMain.setInt(FLD_DOC_TYPE, creditPaymentMain.getDocType());
            pstCreditPaymentMain.insertByOid(creditPaymentMain.getOID());

        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCreditPaymentMain(0), DBException.UNKNOWN);
        }
        return creditPaymentMain.getOID();
    }


    public static long updateExc(CreditPaymentMain creditPaymentMain) throws DBException {
        try {
            if (creditPaymentMain.getOID() != 0) {
                PstCreditPaymentMain pstCreditPaymentMain = new PstCreditPaymentMain(creditPaymentMain.getOID());
                pstCreditPaymentMain.setLong(FLD_CASH_CASHIER_ID, creditPaymentMain.getCashCashierId());
                pstCreditPaymentMain.setLong(FLD_BILL_MAIN_ID, creditPaymentMain.getBillMainId());
                pstCreditPaymentMain.setLong(FLD_LOCATION_ID, creditPaymentMain.getLocationId());
                pstCreditPaymentMain.setDate(FLD_BILL_DATE, creditPaymentMain.getBillDate());

                pstCreditPaymentMain.setLong(FLD_APPUSER_ID, creditPaymentMain.getAppUserId());
                pstCreditPaymentMain.setLong(FLD_SHIFT_ID, creditPaymentMain.getShiftId());

                pstCreditPaymentMain.setInt(FLD_BILL_STATUS, creditPaymentMain.getBillStatus());
                pstCreditPaymentMain.setString(FLD_SALES_CODE, creditPaymentMain.getSalesCode());

                pstCreditPaymentMain.setString(FLD_INVOICE_NUMBER, creditPaymentMain.getInvoiceNumber());
                pstCreditPaymentMain.setInt(FLD_INVOICE_COUNTER, creditPaymentMain.getInvoiceCounter());
                pstCreditPaymentMain.setInt(FLD_DOC_TYPE, creditPaymentMain.getDocType());
                //added by dewok 2018-04-30
                pstCreditPaymentMain.setString(FLD_PAYMENT_NUMBER, creditPaymentMain.getPaymentNumber());
                pstCreditPaymentMain.setDouble(FLD_AMOUNT_RETURN, creditPaymentMain.getAmountReturn());
                pstCreditPaymentMain.setDouble(FLD_PAY_AMOUNT_CREDIT, creditPaymentMain.getPayAmountCredit());
                pstCreditPaymentMain.setDate(FLD_PAYMENT_DATE, creditPaymentMain.getPaymentDate());
                pstCreditPaymentMain.setLong(FLD_APP_USER_SALES_ID, creditPaymentMain.getAppUserSalesId());
            
                pstCreditPaymentMain.update();
                return creditPaymentMain.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCreditPaymentMain(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long oid) throws DBException {
        try {
            PstCreditPaymentMain pstCreditPaymentMain = new PstCreditPaymentMain(oid);
            pstCreditPaymentMain.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstCreditPaymentMain(0), DBException.UNKNOWN);
        }
        return oid;
    }

    public static Vector listAll() {
        return list(0, 500, "", "");
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN;
            if (whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;
            if (order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                CreditPaymentMain creditPaymentMain = new CreditPaymentMain();
                resultToObject(rs, creditPaymentMain);
                lists.add(creditPaymentMain);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    //Ari wiweka 20130711
     public static int getCount(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_CREDIT_PAYMENT_MAIN_ID] + ") AS CNT FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

     /**
      * sum sisa hutang
      * Ari wiweka 20130715
      */
     public static double getSisaHutang(long oidBillMain) {
        int sum = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_CREDIT_PAYMENT_MAIN_ID] + ") AS CNT FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN;


            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                sum = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return sum;
    }

       public static int getCountQtySummaryBayarCredit(long oidCashCashier) {
           return getCountQtySummaryBayarCredit(oidCashCashier,"");
       }
      //count Bayar Credit
      public static int getCountQtySummaryBayarCredit(long oidCashCashier, String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CPM." + fieldNames[FLD_CREDIT_PAYMENT_MAIN_ID] + ") AS CNT " +
                         " FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN + " CPM" +
                         " WHERE ";
            
            if(oidCashCashier==0){
                sql = sql+"( "+where+" ) ";
            }else{
                sql = sql + " CPM." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CASH_CASHIER_ID]+" = " + oidCashCashier;
            }
           
                    
            //if (whereClause != null && whereClause.length() > 0)
                //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
      
      
    public static int getCountTransSummaryBayarCredit(long oidCashCashier) {
           return getCountTransSummaryBayarCredit(oidCashCashier,"");
       }
      //count Bayar Credit
      public static int getCountTransSummaryBayarCredit(long oidCashCashier, String where) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CPM." + fieldNames[FLD_CREDIT_PAYMENT_MAIN_ID] + ") AS CNT " +
                         " FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN + " CPM" +
                         " WHERE ";
            
            if(oidCashCashier==0){
                sql = sql+"( "+where+" ) ";
            }else{
                sql = sql + " CPM." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CASH_CASHIER_ID]+" = " + oidCashCashier;
            }
           
                    
            //if (whereClause != null && whereClause.length() > 0)
                //sql = sql + " WHERE " + whereClause;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }  


    public static void resultToObject(ResultSet rs, CreditPaymentMain creditPaymentMain) {
        try {
            creditPaymentMain.setOID(rs.getLong(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]));
            creditPaymentMain.setCashCashierId(rs.getLong(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CASH_CASHIER_ID]));
            creditPaymentMain.setBillMainId(rs.getLong(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_BILL_MAIN_ID]));
            creditPaymentMain.setLocationId(rs.getLong(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_LOCATION_ID]));
            creditPaymentMain.setBillDate(rs.getDate(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_BILL_DATE]));

            creditPaymentMain.setAppUserId(rs.getLong(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_APPUSER_ID]));
            creditPaymentMain.setShiftId(rs.getLong(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_SHIFT_ID]));

            creditPaymentMain.setInvoiceNumber(rs.getString(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_INVOICE_NUMBER]));
            creditPaymentMain.setInvoiceCounter(rs.getInt(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_INVOICE_COUNTER]));
            creditPaymentMain.setDocType(rs.getInt(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_DOC_TYPE]));
            //added by dewok 2018-04-30
            creditPaymentMain.setBillStatus(rs.getInt(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_BILL_STATUS]));
            creditPaymentMain.setSalesCode(rs.getString(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_SALES_CODE]));
            creditPaymentMain.setPaymentNumber(rs.getString(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_PAYMENT_NUMBER]));
            creditPaymentMain.setAmountReturn(rs.getDouble(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_AMOUNT_RETURN]));
            creditPaymentMain.setPayAmountCredit(rs.getDouble(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_PAY_AMOUNT_CREDIT]));
            creditPaymentMain.setPaymentDate(rs.getTimestamp(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_PAYMENT_DATE]));
            creditPaymentMain.setAppUserSalesId(rs.getLong(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_APP_USER_SALES_ID]));

        } catch (Exception e) {
            System.out.println("err on result to object :  " + e.toString());
            e.printStackTrace();
        }
    }


    /**
     * Ari_wiweka 20130728
     * untuk list multiple payment
     * @param cashCreditPaymentMainId
     * @return
     */
    public static Vector listCreditPayment(int limitStart, int recordToGet, String whereClause, String orderClause)  {
        Vector lists = new Vector();
        DBResultSet dbrs = null;

        try {
            /*String sql =   "SELECT CPM."+fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]
                    + " , CPI."+PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_CC_NAME]
                    + " , CT."+PstCurrencyType.fieldNames[PstCurrencyType.FLD_CODE]
                    + " , CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_RATE]
                    + " , CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_AMOUNT]
                    + " FROM "+TBL_CASH_CREDIT_PAYMENT_MAIN+ " AS CPM "
                    + " LEFT JOIN "+PstCashCreditPaymentDinamis.TBL_PAYMENT+ " AS CP ON CPM."
                    + fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]+" = CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CREDIT_MAIN_ID]
                    + " LEFT JOIN "+PstCashCreditPaymentInfo.TBL_CREDIT_PAYMENT_INFO+ " AS CPI ON CP."
                    + PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAYMENT_ID]+" = CPI."+PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_CASH_CREDIT_PAYMENT_ID]
                    + " LEFT JOIN "+PstCurrencyType.TBL_POS_CURRENCY_TYPE+" AS CT ON CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentInfo.FLD_CURRENCY_ID]+" = CT."+PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID];
*/
            String sql = "SELECT CPM."+fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]
                    + " , CPI."+PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_CC_NAME]
                    + " , CT."+PstCurrencyType.fieldNames[PstCurrencyType.FLD_CODE]
                    + " , CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAY_TYPE]
                    + " , CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_RATE]
                    + " , CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_AMOUNT]
                    + " FROM "+TBL_CASH_CREDIT_PAYMENT_MAIN+ " AS CPM "
                    + " LEFT JOIN "+PstCashCreditPaymentDinamis.TBL_PAYMENT+ " AS CP "
                    + " ON CPM." + fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]+" = CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CREDIT_MAIN_ID]
                    + " LEFT JOIN "+PstCashCreditPaymentInfo.TBL_CREDIT_PAYMENT_INFO+ " AS CPI "
                    + " ON  CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAYMENT_ID]+" = CPI."+PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_CASH_CREDIT_PAYMENT_ID]
                    + " LEFT JOIN "+PstCurrencyType.TBL_POS_CURRENCY_TYPE+" AS CT "
                    + " ON CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CURRENCY_ID]+" = CT."+PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID] ;

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("--->>>" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector temp = new Vector();
                CreditPaymentMain creditPaymentMain = new CreditPaymentMain();
                CashCreditPaymentsDinamis cashCreditPaymentsDinamis = new CashCreditPaymentsDinamis();
                CashCreditPaymentInfo cashCreditPaymentInfo = new CashCreditPaymentInfo();
                CurrencyType currencyType = new CurrencyType();

                creditPaymentMain.setCreditPaymentMainId(rs.getLong(PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]));
                temp.add(creditPaymentMain);

                //cashCreditPaymentsDinamis.setCurrencyId(rs.getLong(PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CURRENCY_ID]));
                cashCreditPaymentsDinamis.setPaymentType(rs.getLong(PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAY_TYPE]));
                cashCreditPaymentsDinamis.setRate(rs.getDouble(PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_RATE]));
                cashCreditPaymentsDinamis.setAmount(rs.getDouble(PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_AMOUNT]));
                temp.add(cashCreditPaymentsDinamis);

                cashCreditPaymentInfo.setCcName(rs.getString(PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_CC_NAME]));
                temp.add(cashCreditPaymentInfo);

                currencyType.setCode(rs.getString(PstCurrencyType.fieldNames[PstCurrencyType.FLD_CODE]));
                temp.add(currencyType);

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * Ari_wiweka 20130728
     * sum total payment
     */
    public static double getSumPayment(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
             String sql = " SELECT SUM(CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_AMOUNT]+")"
                    + " FROM "+TBL_CASH_CREDIT_PAYMENT_MAIN+ " AS CPM "
                    + " LEFT JOIN "+PstCashCreditPaymentDinamis.TBL_PAYMENT+ " AS CP ON CPM."+fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]+" = CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CREDIT_MAIN_ID]
                    + " LEFT JOIN "+PstCashCreditPaymentInfo.TBL_CREDIT_PAYMENT_INFO+ " AS CPI ON CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAYMENT_ID]+" = CPI."+PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_CASH_CREDIT_PAYMENT_ID]
                    + " LEFT JOIN "+PstCurrencyType.TBL_POS_CURRENCY_TYPE+" AS CT ON CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CURRENCY_ID]+" = CT."+PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            System.out.println("--->>>" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    /**
     * Ari_wiweka 20130727
     * Count untuk list cash payment multiple payment
     * @param rs
     * @param cashCreditPaymentsDinamis
     */
    public static int getCountPayment(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT COUNT(CPM."+fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]+")"
                    + " FROM "+TBL_CASH_CREDIT_PAYMENT_MAIN+ " AS CPM "
                    + " LEFT JOIN "+PstCashCreditPaymentDinamis.TBL_PAYMENT+ " AS CP ON CPM."+fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]+" = CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_CREDIT_MAIN_ID]
                    + " LEFT JOIN "+PstCashCreditPaymentInfo.TBL_CREDIT_PAYMENT_INFO+ " AS CPI ON CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentDinamis.FLD_PAYMENT_ID]+" = CPI."+PstCashCreditPaymentInfo.fieldNames[PstCashCreditPaymentInfo.FLD_CASH_CREDIT_PAYMENT_ID]
                    + " LEFT JOIN "+PstCurrencyType.TBL_POS_CURRENCY_TYPE+" AS CT ON CP."+PstCashCreditPaymentDinamis.fieldNames[PstCashCreditPaymentInfo.FLD_CURRENCY_ID]+" = CT."+PstCurrencyType.fieldNames[PstCurrencyType.FLD_CURRENCY_TYPE_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static boolean checkOID(long cashCreditPaymentMainId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN +
            " WHERE " + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_BILL_MAIN_ID] +
            " = " + cashCreditPaymentMainId;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    /**
     * bobo
     * pembuatan number invoice yang di counter berdasarkan
     * lokasi dan cashier number
     * retrun = TTBBCCCCC
     * TT = tahun
     * BB = bulan
     * CCCCC = counter
     */
    public static String generateNumberInvoice(Date dtNow, long locationId, int cashierNumber, int docType) {
        //Date dtNow = creditPaymentMain.getBillDate();
        String invoiceNumber = "";
        try {
            invoiceNumber = Formater.formatDate(dtNow, "yy");
            invoiceNumber = invoiceNumber + Formater.formatDate(dtNow, "MM");

            int counter = getCounterTransaction(locationId, cashierNumber, docType);
            if (counter > 99999)
                counter = 1;

            String maxCounter = "99999";
            int count = maxCounter.length() - String.valueOf(counter).length();
            if (count > 0) {
                for (int k = 0; k < count; k++) {
                    invoiceNumber = invoiceNumber + "0";
                }
            }
            invoiceNumber = invoiceNumber + String.valueOf(counter);

        } catch (Exception e) {
            System.out.println("ERR GENERATE INVOICE NUMBER : " + e.toString());
        }
        return invoiceNumber;
    }

    /**
     * bobo
     * pencarian counter yang terbesar sesuai dengan lokasi dan cashier number
     * return adalah int counter yang sudah di tambah dengan 1
     */
    public static int getCounterTransaction(long locationId, int cashierNumber, int docType) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT MAX(" + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_INVOICE_COUNTER] + ") AS MNT " +
            " FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN + " AS BILL INNER JOIN " + PstCashCashier.TBL_CASH_CASHIER + " AS CSH " +
            " ON BILL." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CASH_CASHIER_ID] + " = CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASH_CASHIER_ID] +
            " INNER JOIN " + PstCashMaster.TBL_CASH_MASTER + " AS MSTR " +
            " ON CSH." + PstCashCashier.fieldNames[PstCashCashier.FLD_CASHMASTER_ID] + " = MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASH_MASTER_ID] +
            " WHERE BILL." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_LOCATION_ID] + " = " + locationId +
            " AND MSTR." + PstCashMaster.fieldNames[PstCashMaster.FLD_CASHIER_NUMBER] + "=" + cashierNumber +
            " AND BILL." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_DOC_TYPE] + " = " + docType;

            //System.out.println("SQL > "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                count = rs.getInt("MNT");
            }
            rs.close();
            count = count + 1;
            return count;
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /* set billmain with counter, bill number, invoice number */
    public static CreditPaymentMain setCreditPaymentMain() {
        return new CreditPaymentMain();
    }


    /**
     * pencarian transaksi yang di bayar dengan credit per harian
     * @param srcSaleReport
     * @param start
     * @param recordToGet
     * @return
     */
    public static Vector getDataPaymentCredit(SrcSaleReport srcSaleReport, int start, int recordToGet) {
        DBResultSet dbrs = null;
        Vector list = new Vector(1, 1);
        try {
            String sql = "SELECT BM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER] +
            ",BM." + PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID] + ", CPM.* " +
            " FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN + " AS CPM " + // CASH_CREDIT_PAYMENT_MAIN
            " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS BM " + // CASH_BILL_MAIN
            " ON CPM." + fieldNames[FLD_BILL_MAIN_ID] + " = BM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + // CASH_BILL_MAIN_ID
            " INNER JOIN " + PstCashCreditPayment.TBL_PAYMENT + " AS CP " + // CASH_CREDIT_PAYMENT
            " ON CPM." + fieldNames[FLD_CREDIT_PAYMENT_MAIN_ID] + "= CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID] + //CREDIT_PAYMENT_MAIN_ID
            //" INNER JOIN " + PstCashReturn.TBL_RETURN + " AS RP " + // CASH_CREDIT_PAYMENT
            //" ON CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID] +
            //"= RP." + PstCashReturn.fieldNames[PstCashReturn.FLD_BILLMAIN_ID] + //CREDIT_PAYMENT_MAIN_ID
            " WHERE CPM." + fieldNames[FLD_BILL_DATE] + " BETWEEN '" + Formater.formatDate(srcSaleReport.getDateFrom(), "yyyy-MM-dd 00:00:01") + "'" +
            " AND '" + Formater.formatDate(srcSaleReport.getDateTo(), "yyyy-MM-dd 23:59:59") + "'"+
            " AND (CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+"="+PstCashCreditPayment.CASH+
            " OR CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+"="+PstCashCreditPayment.CARD+
            " OR CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+"="+PstCashCreditPayment.CHEQUE+
            " OR CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+"="+PstCashCreditPayment.DEBIT+")";

            if (srcSaleReport.getLocationId() != 0) {
                sql = sql + " AND CPM." + fieldNames[FLD_LOCATION_ID] + "=" + srcSaleReport.getLocationId();
            }

            if(srcSaleReport.getCurrencyOid() != 0) {
                sql += " AND BM."+PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]+" = "+srcSaleReport.getCurrencyOid();
            }

            if (start == 0 && recordToGet == 0)
                sql = sql + "";
            else
                sql = sql + " LIMIT " + start + "," + recordToGet;

            System.out.println("sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector vect = new Vector(1, 1);
                CreditPaymentMain creditPaymentMain = new CreditPaymentMain();
                resultToObject(rs, creditPaymentMain);
                vect.add(creditPaymentMain);

                BillMain bill = new BillMain();
                bill.setInvoiceNumber(rs.getString(1));
                bill.setCustomerId(rs.getLong(2));
                vect.add(bill);

                list.add(vect);
            }

        } catch (Exception e) {
            System.out.println("err: " + e.toString());
        }
        return list;
    }


     public static Vector getDataPaymentCreditDinamis(SrcSaleReport srcSaleReport, int start, int recordToGet) {
        DBResultSet dbrs = null;
        Vector list = new Vector(1, 1);
        try {
            String sql = "SELECT BM." + PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER] +
            ",BM." + PstBillMain.fieldNames[PstBillMain.FLD_CUSTOMER_ID] + ", CPM.* " +
            " FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN + " AS CPM " + // CASH_CREDIT_PAYMENT_MAIN
            " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS BM " + // CASH_BILL_MAIN
            " ON CPM." + fieldNames[FLD_BILL_MAIN_ID] + " = BM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + // CASH_BILL_MAIN_ID
            " INNER JOIN " + PstCashCreditPayment.TBL_PAYMENT + " AS CP " + // CASH_CREDIT_PAYMENT
            " ON CPM." + fieldNames[FLD_CREDIT_PAYMENT_MAIN_ID] + "= CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID] + //CREDIT_PAYMENT_MAIN_ID
            //" INNER JOIN " + PstCashReturn.TBL_RETURN + " AS RP " + // CASH_CREDIT_PAYMENT
            //" ON CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID] +
            //"= RP." + PstCashReturn.fieldNames[PstCashReturn.FLD_BILLMAIN_ID] + //CREDIT_PAYMENT_MAIN_ID
            " WHERE CPM." + fieldNames[FLD_BILL_DATE] + " BETWEEN '" + Formater.formatDate(srcSaleReport.getDateFrom(), "yyyy-MM-dd 00:00:01") + "'" +
            " AND '" + Formater.formatDate(srcSaleReport.getDateTo(), "yyyy-MM-dd 23:59:59") + "'"+
            " AND (CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+"!=0)";;

            if (srcSaleReport.getLocationId() != 0) {
                sql = sql + " AND CPM." + fieldNames[FLD_LOCATION_ID] + "=" + srcSaleReport.getLocationId();
            }

            if(srcSaleReport.getCurrencyOid() != 0) {
                sql += " AND BM."+PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]+" = "+srcSaleReport.getCurrencyOid();
            }

            if (start == 0 && recordToGet == 0)
                sql = sql + " GROUP BY BM."+ PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID];
            else
                sql = sql + " GROUP BY BM."+ PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+" LIMIT " + start + "," + recordToGet;

            System.out.println("sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector vect = new Vector(1, 1);
                CreditPaymentMain creditPaymentMain = new CreditPaymentMain();
                resultToObject(rs, creditPaymentMain);
                vect.add(creditPaymentMain);

                BillMain bill = new BillMain();
                bill.setInvoiceNumber(rs.getString(1));
                bill.setCustomerId(rs.getLong(2));
                vect.add(bill);

                list.add(vect);
            }

        } catch (Exception e) {
            System.out.println("err: " + e.toString());
        }
        return list;
    }

    public static int getCountPaymentCredit(SrcSaleReport srcSaleReport) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT COUNT(CPM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT " +
            " FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN + " AS CPM " + // CASH_CREDIT_PAYMENT_MAIN
            " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS BM " + // CASH_BILL_MAIN
            " ON CPM." + fieldNames[FLD_BILL_MAIN_ID] + " = BM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + // CASH_BILL_MAIN_ID
            " INNER JOIN " + PstCashCreditPayment.TBL_PAYMENT + " AS CP " + // CASH_CREDIT_PAYMENT
            " ON CPM." + fieldNames[FLD_CREDIT_PAYMENT_MAIN_ID] + "=CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID] + //CREDIT_PAYMENT_MAIN_ID
            " WHERE CPM." + fieldNames[FLD_BILL_DATE] + " BETWEEN '" + Formater.formatDate(srcSaleReport.getDateFrom(), "yyyy-MM-dd 00:00:01") + "'" +
            " AND '" + Formater.formatDate(srcSaleReport.getDateTo(), "yyyy-MM-dd 23:59:59") + "'"+
            " AND (CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+"="+PstCashCreditPayment.CASH+
            " OR CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+"="+PstCashCreditPayment.CARD+
            " OR CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+"="+PstCashCreditPayment.CHEQUE+
            " OR CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+"="+PstCashCreditPayment.DEBIT+")";

            if (srcSaleReport.getLocationId() != 0) {
                sql = sql + " AND CPM." + fieldNames[FLD_LOCATION_ID] + "=" + srcSaleReport.getLocationId();
            }

            if(srcSaleReport.getCurrencyOid() != 0) {
                sql += " AND BM."+PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]+" = "+srcSaleReport.getCurrencyOid();
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }

        } catch (Exception e) {
            System.out.println("err: " + e.toString());
        }
        return count;
    }

        public static int getCountPaymentCreditDinamis(SrcSaleReport srcSaleReport) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            String sql = "SELECT COUNT(CPM." + fieldNames[FLD_BILL_MAIN_ID] + ") AS CNT " +
            " FROM " + TBL_CASH_CREDIT_PAYMENT_MAIN + " AS CPM " + // CASH_CREDIT_PAYMENT_MAIN
            " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS BM " + // CASH_BILL_MAIN
            " ON CPM." + fieldNames[FLD_BILL_MAIN_ID] + " = BM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + // CASH_BILL_MAIN_ID
            " INNER JOIN " + PstCashCreditPayment.TBL_PAYMENT + " AS CP " + // CASH_CREDIT_PAYMENT
            " ON CPM." + fieldNames[FLD_CREDIT_PAYMENT_MAIN_ID] + "=CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID] + //CREDIT_PAYMENT_MAIN_ID
            " WHERE CPM." + fieldNames[FLD_BILL_DATE] + " BETWEEN '" + Formater.formatDate(srcSaleReport.getDateFrom(), "yyyy-MM-dd 00:00:01") + "'" +
            " AND '" + Formater.formatDate(srcSaleReport.getDateTo(), "yyyy-MM-dd 23:59:59") + "'"+
            " AND (CP." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+"!=0)";

            if (srcSaleReport.getLocationId() != 0) {
                sql = sql + " AND CPM." + fieldNames[FLD_LOCATION_ID] + "=" + srcSaleReport.getLocationId();
            }

            if(srcSaleReport.getCurrencyOid() != 0) {
                sql += " AND BM."+PstBillMain.fieldNames[PstBillMain.FLD_CURRENCY_ID]+" = "+srcSaleReport.getCurrencyOid();
            }

                sql = sql + " GROUP BY BM."+ PstBillMain.fieldNames[PstBillMain.FLD_INVOICE_NUMBER];

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }

        } catch (Exception e) {
            System.out.println("err: " + e.toString());
        }
        return count;
    }


    /**
     * @param lLocationOid
     * @param dStartDate
     * @param dEndDate
     * @param iSaleReportType
     * @return Vector of (vector of object cashPayment - per payType)
     */
    public Vector getListCreditPayment(long lLocationOid, Date dStartDate, Date dEndDate) {
        Vector result = new Vector(1,1);
        DBResultSet dbrs = null;

        String sStartDate = "";
        String sEndDate = "";
        if(dStartDate!=null && dEndDate!=null) {
            sStartDate = Formater.formatDate(dStartDate,"yyyy-MM-dd") + " 00:00:00";
            sEndDate = Formater.formatDate(dEndDate,"yyyy-MM-dd") + " 23:59:59";
        }

        try {
            String sql = "SELECT DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CURRENCY_ID]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_RATE]+
            ", SUM(DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_AMOUNT]+") "+
            " FROM "+PstCreditPaymentMain.TBL_CASH_CREDIT_PAYMENT_MAIN + " AS MAIN " +
            " INNER JOIN " + PstCashCreditPayment.TBL_PAYMENT+" AS DETAIL " +
            " ON MAIN." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID] +
            " = DETAIL." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID] +
            " WHERE MAIN."+PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_BILL_DATE]+
            " BETWEEN \""+sStartDate+ "\""+
            " AND \""+sEndDate+ "\"";
            if(lLocationOid != 0) {
                sql = sql + " AND MAIN."+PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_LOCATION_ID]+
                " = "+lLocationOid;
            }
            sql = sql + " GROUP BY DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CURRENCY_ID]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_RATE];

            System.out.println("sql on PstCreditPaymentMain.getListCreditPayment() : " + sql);

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            Vector vCashPayment = new Vector(1,1);
            Vector vCardPayment = new Vector(1,1);
            Vector vChequePayment = new Vector(1,1);
            Vector vDebitPayment = new Vector(1,1);
            Vector vReturnPayment = new Vector(1,1);
            while(rs.next()) {
                CashCreditPayments objCashCreditPayments = new CashCreditPayments();
                objCashCreditPayments.setPaymentType(rs.getInt(1));
                objCashCreditPayments.setCurrencyId(rs.getLong(2));
                objCashCreditPayments.setRate(rs.getDouble(3));
                objCashCreditPayments.setAmount(rs.getDouble(4));

                switch(objCashCreditPayments.getPaymentType()) {
                    case PstCashPayment.CASH :
                        vCashPayment.add(objCashCreditPayments);
                        break;

                    case PstCashPayment.CARD :
                        vCardPayment.add(objCashCreditPayments);
                        break;

                    case PstCashPayment.CHEQUE :
                        vChequePayment.add(objCashCreditPayments);
                        break;

                    case PstCashPayment.DEBIT :
                        vDebitPayment.add(objCashCreditPayments);
                        break;

                    case PstCashPayment.RETURN :
                        vDebitPayment.add(objCashCreditPayments);
                        break;
                }
            }

            result.add(vCashPayment);
            result.add(vCardPayment);
            result.add(vChequePayment);
            result.add(vDebitPayment);
            result.add(vReturnPayment);
        }
        catch(Exception e) {
            System.out.println("Error on PstCashPayment.getListPayment() : " + e.toString() );
        }
        finally {
            DBResultSet.close(dbrs);

        }
        return result;
    }


    /**
     * @param lLocationOid
     * @param dStartDate
     * @param dEndDate
     * @param iSaleReportType
     * @return Vector of (vector of object cashPayment - per payType)
     */
    public Vector getListCreditPayment(long lCreditMainOid) {
        Vector result = new Vector(1,1);
        DBResultSet dbrs = null;

        try {
            String sql = "SELECT DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CURRENCY_ID]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_RATE]+
            ", SUM(DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_AMOUNT]+
            " - IF(ISNULL(rp."+PstCashReturn.fieldNames[PstCashReturn.FLD_AMOUNT]+"),0,rp."+PstCashReturn.fieldNames[PstCashReturn.FLD_AMOUNT]+"))"+
            " FROM "+PstCreditPaymentMain.TBL_CASH_CREDIT_PAYMENT_MAIN + " AS MAIN " +
            " INNER JOIN " + PstCashCreditPayment.TBL_PAYMENT+" AS DETAIL " +
            " ON MAIN." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID] +
            " = DETAIL." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID] +
            " LEFT JOIN "+ PstCashReturn.TBL_RETURN + " as rp "+
            " on MAIN."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID]+
            "= rp."+PstCashReturn.fieldNames[PstCashReturn.FLD_BILLMAIN_ID]+
            " WHERE MAIN."+PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]+
            " = "+lCreditMainOid +
            " GROUP BY DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CURRENCY_ID]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_RATE];

            System.out.println("sql on PstCreditPaymentMain.getListCreditPayment() : " + sql);

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            Vector vCashPayment = new Vector(1,1);
            Vector vCardPayment = new Vector(1,1);
            Vector vChequePayment = new Vector(1,1);
            Vector vDebitPayment = new Vector(1,1);
            Vector vReturnPayment = new Vector(1,1);
            while(rs.next()) {
                CashCreditPayments objCashCreditPayments = new CashCreditPayments();
                objCashCreditPayments.setPaymentType(rs.getInt(1));
                objCashCreditPayments.setCurrencyId(rs.getLong(2));
                objCashCreditPayments.setRate(rs.getDouble(3));
                objCashCreditPayments.setAmount(rs.getDouble(4));

                switch(objCashCreditPayments.getPaymentType()) {
                    case PstCashPayment.CASH :
                        vCashPayment.add(objCashCreditPayments);
                        break;

                    case PstCashPayment.CARD :
                        vCardPayment.add(objCashCreditPayments);
                        break;

                    case PstCashPayment.CHEQUE :
                        vChequePayment.add(objCashCreditPayments);
                        break;

                    case PstCashPayment.DEBIT :
                        vDebitPayment.add(objCashCreditPayments);
                        break;

                    case PstCashPayment.RETURN :
                        vDebitPayment.add(objCashCreditPayments);
                        break;
                }
            }

            result.add(vCashPayment);
            result.add(vCardPayment);
            result.add(vChequePayment);
            result.add(vDebitPayment);
            result.add(vReturnPayment);
        }
        catch(Exception e) {
            System.out.println("Error on PstCashPayment.getListPayment() : " + e.toString() );
        }
        finally {
            DBResultSet.close(dbrs);

        }
        return result;
    }

      public Vector getListCreditPaymentDinamis(long lCreditMainOid) {
        Vector result = new Vector(1,1);
        DBResultSet dbrs = null;

        try {
           /* String sql = "SELECT DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CURRENCY_ID]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_RATE]+
            ", SUM(DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_AMOUNT]+
            " - IF(ISNULL(rp."+PstCashReturn.fieldNames[PstCashReturn.FLD_AMOUNT]+"),0,rp."+PstCashReturn.fieldNames[PstCashReturn.FLD_AMOUNT]+"))"+
            " FROM "+PstCreditPaymentMain.TBL_CASH_CREDIT_PAYMENT_MAIN + " AS MAIN " +
            " INNER JOIN " + PstCashCreditPayment.TBL_PAYMENT+" AS DETAIL " +
            " ON MAIN." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID] +
            " = DETAIL." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID] +
            " LEFT JOIN "+ PstCashReturn.TBL_RETURN + " as rp "+
            " on MAIN."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID]+
            "= rp."+PstCashReturn.fieldNames[PstCashReturn.FLD_BILLMAIN_ID]+
            " WHERE MAIN."+PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]+
            " = "+lCreditMainOid +
            " GROUP BY DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CURRENCY_ID]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_RATE];*/

           /* String sSQLPayment = "SELECT P."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", P."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CURRENCY_ID]+
            ", P."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_RATE]+
            ", SUM(P."+PstCashCreditPayment.fieldNames[PstCashPayment.FLD_AMOUNT]+")"+//*P."+PstCashPayment.fieldNames[PstCashPayment.FLD_RATE]+") "+
            "/P." +PstCashPayment.fieldNames[PstCashCreditPayment.FLD_RATE]+
            " FROM "+PstCashCreditPayment.TBL_PAYMENT+" AS P "+
            " INNER JOIN "+PstBillMain.TBL_CASH_BILL_MAIN+" AS BM "+
            " ON P."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID]+
            " = BM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+
            " WHERE BM."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+
            " = "+lCreditMainOid ;

            sSQLPayment += " GROUP BY P."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", P."+PstCashCreditPayment.fieldNames[PstCashPayment.FLD_CURRENCY_ID]+
            ", P."+PstCashCreditPayment.fieldNames[PstCashPayment.FLD_RATE];

            String sSQLChange = "SELECT 0 AS " + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", C." +PstCashReturn.fieldNames[PstCashReturn.FLD_CURRENCY_ID]+
            ", C."+PstCashReturn.fieldNames[PstCashReturn.FLD_RATE]+
            ", - SUM(C."+PstCashReturn.fieldNames[PstCashReturn.FLD_AMOUNT]+")"+
            " FROM "+PstBillMain.TBL_CASH_BILL_MAIN+ " AS M "+
            " INNER JOIN "+PstCashReturn.TBL_RETURN+ " AS C "+
            " ON M."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+
            " = C."+PstCashReturn.fieldNames[PstCashReturn.FLD_BILLMAIN_ID]+
            " WHERE M."+PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+
            " = "+lCreditMainOid ;

            sSQLChange += " GROUP BY C."+PstCashReturn.fieldNames[PstCashReturn.FLD_CURRENCY_ID]+
            ", C."+PstCashReturn.fieldNames[PstCashReturn.FLD_RATE];

            String sql = sSQLPayment + " UNION " + sSQLChange;*/

             String sql = "SELECT DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CURRENCY_ID]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_RATE]+
            ", SUM(DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_AMOUNT]+
            " - IF(ISNULL(rp."+PstCashReturn.fieldNames[PstCashReturn.FLD_AMOUNT]+"),0,rp."+PstCashReturn.fieldNames[PstCashReturn.FLD_AMOUNT]+"))"+
            " FROM "+PstCreditPaymentMain.TBL_CASH_CREDIT_PAYMENT_MAIN + " AS MAIN " +
            " INNER JOIN " + PstCashCreditPayment.TBL_PAYMENT+" AS DETAIL " +
            " ON MAIN." + PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID] +
            " = DETAIL." + PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID] +
            " LEFT JOIN "+ PstCashReturn.TBL_RETURN + " as rp "+
            " on MAIN."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID]+
            "= rp."+PstCashReturn.fieldNames[PstCashReturn.FLD_BILLMAIN_ID]+
            " WHERE MAIN."+PstCreditPaymentMain.fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]+
            " = "+lCreditMainOid +
            " GROUP BY DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CURRENCY_ID]+
            ", DETAIL."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_RATE];

            System.out.println("sql on PstCreditPaymentMain.getListCreditPayment() : " + sql);

            dbrs = DBHandler.execQueryResult(sql);

            ResultSet rs = dbrs.getResultSet();

            /*Vector vCashPayment = new Vector(1,1);
            Vector vCardPayment = new Vector(1,1);
            Vector vChequePayment = new Vector(1,1);
            Vector vDebitPayment = new Vector(1,1);
            Vector vReturnPayment = new Vector(1,1);*/
            Hashtable hashPayment = new Hashtable();
            while(rs.next()) {
                CashCreditPaymentsDinamis objCashCreditPayments = new CashCreditPaymentsDinamis();
                objCashCreditPayments.setPaymentType(rs.getLong(1));
                objCashCreditPayments.setCurrencyId(rs.getLong(2));
                objCashCreditPayments.setRate(rs.getDouble(3));
                objCashCreditPayments.setAmount(rs.getDouble(4));

                 // masukkan ke hashtable dengan key adalah kombinasi (paytype+currency+rate)
                if(objCashCreditPayments.getAmount() != 0) {
                    String strHashKey = ""+objCashCreditPayments.getPaymentType()+objCashCreditPayments.getCurrencyId()+objCashCreditPayments.getRate();
                    if(hashPayment.containsKey(strHashKey)) {
                        CashCreditPaymentsDinamis objCashPaymentsonHash = (CashCreditPaymentsDinamis) hashPayment.get(strHashKey);
                        double dOriginalAmount = objCashPaymentsonHash.getAmount();
                        double dAdditionalAmount = objCashCreditPayments.getAmount();
                        objCashPaymentsonHash.setAmount(dOriginalAmount+dAdditionalAmount);
                        hashPayment.put(strHashKey, objCashPaymentsonHash);
                    }
                    else {
                        hashPayment.put(strHashKey, objCashCreditPayments);
                    }
                }
            }
             Vector vCashPayment = new Vector(1,1);
                 for( Enumeration enumX = hashPayment.keys(); enumX.hasMoreElements(); ) {
                        String strKey = String.valueOf(enumX.nextElement());
                        CashCreditPaymentsDinamis objCashCreditPayments = (CashCreditPaymentsDinamis) hashPayment.get(strKey);
                        vCashPayment.add(objCashCreditPayments);
                }
                result.add(vCashPayment);
        }
        catch(Exception e) {
            System.out.println("Error on PstCashPayment.getListPayment() : " + e.toString() );
        }
        finally {
            DBResultSet.close(dbrs);

        }
        return result;
    }



    public static void main(String[] args) {
        /*
        try {
            CreditPaymentMain creditPaymentMain = new CreditPaymentMain();
            creditPaymentMain.setBillDate(new Date());
            creditPaymentMain.setLocationId(504404223189962406L);
            System.out.println("COUNTER : " + getCounterTransaction(1, 1, 0));
            System.out.println("COUNTER : " + generateNumberInvoice(new Date(), 1, 1, 0));

        } catch (Exception e) {
        }
         */

        System.out.println("Test start ..." + new Date().getTime());

        PstCreditPaymentMain objPstCreditPaymentMain = new PstCreditPaymentMain();
        Vector vResult = objPstCreditPaymentMain.getListCreditPayment(0, new Date(105,4,25), new Date(105,4,25));
        for(int i=0; i<vResult.size(); i++) {
            Vector vObj = (Vector) vResult.get(i);
            if(vObj!=null && vObj.size()>0) {
                for(int j=0; j<vObj.size(); j++) {
                    CashCreditPayments objCashCreditPayments = (CashCreditPayments) vObj.get(j);
                    System.out.println("Pay  : " + objCashCreditPayments.getPaymentType());
                    System.out.println("Curr : " + objCashCreditPayments.getCurrencyId());
                    System.out.println("Rate : " + FRMHandler.userFormatStringDecimal(objCashCreditPayments.getRate()));
                    System.out.println("Amnt : " + FRMHandler.userFormatStringDecimal(objCashCreditPayments.getAmount()));
                    System.out.println(" ");
                }
            }
        }

        System.out.println("Test finish ..." + new Date().getTime());
    }

    /**
     * Ari_wiweka20130729
     * untuk SUM Credit card, cheque, cash , dan debit card yang di inputkan dari multiple payment
     */
    public static double getSumSystemPayment(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = " SELECT SUM(CP."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_AMOUNT]+") FROM "
                    +TBL_CASH_CREDIT_PAYMENT_MAIN+" AS CPM "
                    + " LEFT JOIN "+PstCashCreditPayment.TBL_PAYMENT+" AS CP ON CPM."
                    +fieldNames[PstCreditPaymentMain.FLD_CREDIT_PAYMENT_MAIN_ID]+" = CP."
                    +PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_CREDIT_MAIN_ID]
                    + " LEFT JOIN "+PstPaymentSystem.TBL_P2_PAYMENT_SYSTEM+" AS PS ON CP."+PstCashCreditPayment.fieldNames[PstCashCreditPayment.FLD_PAY_TYPE]+" = PS."+PstPaymentSystem.fieldNames[PstPaymentSystem.FLD_PAYMENT_SYSTEM_ID];

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
}

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

}
