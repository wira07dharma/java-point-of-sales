/*
 * ProductSearchDialog.java
 *
 * Created on December 17, 2004, 9:35 AM
 */

package com.dimata.pos.cashier;

import com.dimata.posbo.entity.masterdata.Material;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  wpulantara
 */
public class GiftSearchDialog extends JDialog {
    
    private Vector dataVector = null;
    private Vector columnIdentifier = null;
    private Hashtable hashRowIndexOID = new Hashtable();
    private DefaultTableModel giftTableModel= null;
    
    public static final int COL_NO=0;
    public static final int COL_CODE=1;
    public static final int COL_NAME=2;
    public static final int COL_POINT=3;
    private static final String[] fieldNames = {
        "No",
        "Code",
        "Name",
        "Point"
    };
    
    private static final int MAX_ROW = 8;
    
    private int totalRows;
    
    private int currentStartRow = 0;
    
    private Vector transformResult(Vector raw, int start){
        int rawSize = raw.size();
        Vector fix = new Vector();
        
        for(int i=0;i<rawSize;i++){
            Material obj = (Material)raw.get(i);
            
            Vector temp = new Vector();
            hashRowIndexOID.put(new Integer(i),obj);
            temp.add(String.valueOf(i+start+1));
            temp.add(obj.getSku());
            temp.add(obj.getName());
            temp.add(obj.getMinimumPoint()+"");
            fix.add(temp);
        }
        return fix;
    }
    
    /** Creates new form giftSearchDialog */
    public GiftSearchDialog(Frame parent, boolean modal) {
        super(parent, modal);
        
        initComponents();
        this.setSize(464,350);
        initAllFields();
    }
    public void initAllFields(){
        initButton();
        this.setDataVector(null);
        this.setGiftTableModel(null);
        this.giftListTable.setModel(this.getGiftTableModel());
        
        
    }
    
    private void initButton(){
        nextRecordButton.setEnabled(false);
        prevRecordButton.setEnabled(false);
        firstRecordButton.setEnabled(false);
        lastRecordButton.setEnabled(false);
        selectRecordButton.setEnabled(false);
    }
    
    public void setKeyword(String code, String name, int point){
        if(point<1)
            point = 1;
        giftCodeTextField.setText(code);
        giftNameTextField.setText(name);
        pointTextField.setText(""+point);
    }
    
    private void generalKeyListener(KeyEvent evt){
        if(evt.getKeyCode()==KeyEvent.VK_ESCAPE)
            cmdClose();
    }
            
    public void cmdSetColumnTableSize(){
        int totalWidth = giftListTable.getWidth();
        giftListTable.getColumnModel().getColumn(COL_NO).setPreferredWidth((int)(totalWidth*0.1));
        giftListTable.getColumnModel().getColumn(COL_NAME).setPreferredWidth((int)(totalWidth*0.5));
        giftListTable.getColumnModel().getColumn(COL_CODE).setPreferredWidth((int)(totalWidth*0.2));
        giftListTable.getColumnModel().getColumn(COL_POINT).setPreferredWidth((int)(totalWidth*0.2));
        giftListTable.repaint();
        giftListTable.revalidate();
    }
    
    public void cmdClose(){
        currentStartRow=0;
        this.dispose();
    }
    
    /** Creates new form gifSearchDialog with current searched item
     *  already setted and search command exectuted
     *  @param String code, String name, and int point
     */
    public GiftSearchDialog(Frame parent, boolean modal, String code, String name, int point) {
        super(parent, modal);
        initComponents();
        
        initAllFields();
        giftCodeTextField.setText(code);
        giftNameTextField.setText(name);
        pointTextField.setText(point+"");
        cmdSearch(currentStartRow);
        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        giftListTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        giftNameTextField = new javax.swing.JTextField();
        giftCodeTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        pointTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        firstRecordButton = new javax.swing.JButton();
        prevRecordButton = new javax.swing.JButton();
        nextRecordButton = new javax.swing.JButton();
        lastRecordButton = new javax.swing.JButton();
        selectRecordButton = new javax.swing.JButton();
        closeFrameButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gift Search");
        setModal(true);
        getAccessibleContext().setAccessibleName(null);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(452, 150));
        giftListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No", "Code", "Name", "Point"
            }
        ));
        giftListTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                giftListTableKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(giftListTable);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(new javax.swing.border.TitledBorder("Keyword"));
        jLabel1.setText("Item Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Minimum Point");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(jLabel2, gridBagConstraints);

        giftNameTextField.setColumns(10);
        giftNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                giftNameTextFieldActionPerformed(evt);
            }
        });
        giftNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                giftNameTextFieldFocusGained(evt);
            }
        });
        giftNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                giftNameTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(giftNameTextField, gridBagConstraints);

        giftCodeTextField.setColumns(10);
        giftCodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                giftCodeTextFieldActionPerformed(evt);
            }
        });
        giftCodeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                giftCodeTextFieldFocusGained(evt);
            }
        });
        giftCodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                giftCodeTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(giftCodeTextField, gridBagConstraints);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(searchButton, gridBagConstraints);

        jLabel3.setText("Item Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(jLabel3, gridBagConstraints);

        pointTextField.setColumns(5);
        pointTextField.setText("1");
        pointTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointTextFieldActionPerformed(evt);
            }
        });
        pointTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pointTextFieldFocusGained(evt);
            }
        });
        pointTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pointTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(pointTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jPanel4, gridBagConstraints);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        firstRecordButton.setText("First");
        firstRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstRecordButtonActionPerformed(evt);
            }
        });

        jPanel6.add(firstRecordButton, new java.awt.GridBagConstraints());

        prevRecordButton.setText("Prev");
        prevRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevRecordButtonActionPerformed(evt);
            }
        });

        jPanel6.add(prevRecordButton, new java.awt.GridBagConstraints());

        nextRecordButton.setText("Next");
        nextRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextRecordButtonActionPerformed(evt);
            }
        });

        jPanel6.add(nextRecordButton, new java.awt.GridBagConstraints());

        lastRecordButton.setText("Last");
        lastRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastRecordButtonActionPerformed(evt);
            }
        });

        jPanel6.add(lastRecordButton, new java.awt.GridBagConstraints());

        selectRecordButton.setMnemonic('C');
        selectRecordButton.setText("Choose (Alt C)");
        selectRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRecordButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel6.add(selectRecordButton, gridBagConstraints);

        closeFrameButton.setMnemonic('X');
        closeFrameButton.setText("Close (Alt X)");
        closeFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFrameButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel6.add(closeFrameButton, gridBagConstraints);

        jPanel3.add(jPanel6);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void pointTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pointTextFieldKeyPressed
        generalKeyListener(evt);
    }//GEN-LAST:event_pointTextFieldKeyPressed

    private void giftNameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_giftNameTextFieldKeyPressed
        generalKeyListener(evt);
    }//GEN-LAST:event_giftNameTextFieldKeyPressed

    private void giftCodeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_giftCodeTextFieldKeyPressed
        generalKeyListener(evt);
    }//GEN-LAST:event_giftCodeTextFieldKeyPressed
    
    private void pointTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pointTextFieldFocusGained
        pointTextField.selectAll();
    }//GEN-LAST:event_pointTextFieldFocusGained
    
    private void giftNameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_giftNameTextFieldFocusGained
        giftNameTextField.selectAll();
    }//GEN-LAST:event_giftNameTextFieldFocusGained
    
    private void giftCodeTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_giftCodeTextFieldFocusGained
        giftCodeTextField.selectAll();
    }//GEN-LAST:event_giftCodeTextFieldFocusGained
    
    private void pointTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointTextFieldActionPerformed
        currentStartRow = 0;
        cmdSearch(currentStartRow);
    }//GEN-LAST:event_pointTextFieldActionPerformed
    
    private void closeFrameButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeFrameButtonActionPerformed
    {//GEN-HEADEREND:event_closeFrameButtonActionPerformed
        cmdClose();
    }//GEN-LAST:event_closeFrameButtonActionPerformed
    
    private void selectRecordButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectRecordButtonActionPerformed
    {//GEN-HEADEREND:event_selectRecordButtonActionPerformed
        this.cmdDoChoose();
    }//GEN-LAST:event_selectRecordButtonActionPerformed
    
    private void lastRecordButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_lastRecordButtonActionPerformed
    {//GEN-HEADEREND:event_lastRecordButtonActionPerformed
        cmdLast();
    }//GEN-LAST:event_lastRecordButtonActionPerformed
    
    private void nextRecordButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextRecordButtonActionPerformed
    {//GEN-HEADEREND:event_nextRecordButtonActionPerformed
        cmdNext();
    }//GEN-LAST:event_nextRecordButtonActionPerformed
    
    private void prevRecordButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_prevRecordButtonActionPerformed
    {//GEN-HEADEREND:event_prevRecordButtonActionPerformed
        cmdPrev();
    }//GEN-LAST:event_prevRecordButtonActionPerformed
    
    private void firstRecordButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_firstRecordButtonActionPerformed
    {//GEN-HEADEREND:event_firstRecordButtonActionPerformed
        cmdFirst();
    }//GEN-LAST:event_firstRecordButtonActionPerformed
    
    private void giftListTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_giftListTableKeyPressed
        switch(evt.getKeyCode()){
            case KeyEvent.VK_ENTER:
                cmdDoChoose();
                break;
            case KeyEvent.VK_HOME:
                if(firstRecordButton.isEnabled()){
                    cmdFirst();
                }
                break;
            case KeyEvent.VK_ESCAPE:
                giftCodeTextField.requestFocusInWindow();
                break;
            case KeyEvent.VK_END:
                if(lastRecordButton.isEnabled()){
                    cmdLast();
                }
                break;
            case KeyEvent.VK_PAGE_UP:
                if(prevRecordButton.isEnabled()){
                    cmdPrev();
                }
                break;
            case KeyEvent.VK_PAGE_DOWN:
                if(nextRecordButton.isEnabled()){
                    cmdNext();
                }
                break;
            case KeyEvent.VK_UP:
                if(giftListTable.getSelectedRow()==0)
                    cmdPrev();
                break;
            case KeyEvent.VK_DOWN:
                if(giftListTable.getSelectedRow()==MAX_ROW-1)
                    cmdNext();
                break;
        }
    }//GEN-LAST:event_giftListTableKeyPressed
    
    private void searchButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchButtonActionPerformed
    {//GEN-HEADEREND:event_searchButtonActionPerformed
        currentStartRow = 0;
        cmdSearch(currentStartRow);
    }//GEN-LAST:event_searchButtonActionPerformed
    
    private void giftNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_giftNameTextFieldActionPerformed
        currentStartRow = 0;
        if(giftNameTextField.getText().length()==0){
            pointTextField.requestFocusInWindow();
        }else{
            pointTextField.setText("1");
            cmdSearch(currentStartRow);
        }
    }//GEN-LAST:event_giftNameTextFieldActionPerformed
    
    private void giftCodeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_giftCodeTextFieldActionPerformed
        currentStartRow = 0;
        if(giftCodeTextField.getText().length()==0){
            giftNameTextField.requestFocusInWindow();
        }else{
            pointTextField.setText("1");
            cmdSearch(currentStartRow);
        }
    }//GEN-LAST:event_giftCodeTextFieldActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new GiftSearchDialog(new JFrame(), true).show();
    }
    
    private void cmdFirst(){
        currentStartRow = 0;
        cmdSearch(currentStartRow);
    }
    private void cmdPrev(){
        currentStartRow = currentStartRow - MAX_ROW;
        cmdSearch(currentStartRow);
    }
    private void cmdNext(){
        currentStartRow = currentStartRow + MAX_ROW;
        cmdSearch(currentStartRow);
    }
    private void cmdLast(){
        currentStartRow = totalRows - ((totalRows % MAX_ROW)==0?MAX_ROW:(totalRows % MAX_ROW));
        cmdSearch(currentStartRow);
    }
    
    private void refreshButton(int start, int totalRows, int recordToGet){
        
        if(totalRows>0)
            selectRecordButton.setEnabled(true);
        else
            selectRecordButton.setEnabled(false);
        
        if((totalRows - start) <= recordToGet){
            lastRecordButton.setEnabled(false);
            nextRecordButton.setEnabled(false);
        }
        else{
            lastRecordButton.setEnabled(true);
            nextRecordButton.setEnabled(true);
        }
        
        if(start == 0){
            firstRecordButton.setEnabled(false);
            prevRecordButton.setEnabled(false);
        }
        else{
            firstRecordButton.setEnabled(true);
            prevRecordButton.setEnabled(true);
        }
        
    }
    
    public void cmdSearch(int start){
        
        Vector result = new Vector();
        // count total rows
        if(validatePointTextField()){
            totalRows = GiftController.getGiftCountWith( giftCodeTextField.getText(),giftNameTextField.getText(),Integer.parseInt(pointTextField.getText()));
            
            if(start<0 || start>=totalRows)
                start = 0;
            
            currentStartRow=start;
            
            refreshButton(start, totalRows, MAX_ROW);
            
            result = GiftController.getGiftWith(start,MAX_ROW,  giftCodeTextField.getText(),giftNameTextField.getText(),Integer.parseInt(pointTextField.getText()));
            
            dataVector = this.transformResult(result,start);
            giftTableModel.setDataVector(dataVector,this.getColumnIdentifier());
            
            if(result.size()>0){
                cmdSetColumnTableSize();
                this.giftListTable.setRowSelectionInterval(giftTableModel.getRowCount()-1,giftTableModel.getRowCount()-1);
                this.giftListTable.requestFocusInWindow();
            }else if(result.size()==0){
                JOptionPane.showMessageDialog(this,"gift Not found","Search result",JOptionPane.OK_OPTION);
                giftCodeTextField.requestFocusInWindow();
            }
        }
    }
    private void cmdDoChoose(){
        Material material = new Material();
        int a = giftListTable.getSelectedRow();
        material = (Material) this.getHashRowIndexOID().get(new Integer(a));
        GiftController.setGiftItemChoosen(material);
        currentStartRow =0;
        this.dispose();    }
    
    private boolean isValidInt(String st){
        try{
            int i = Integer.parseInt(st);
        }
        catch(NumberFormatException nfe){
            return false;
        }
        return true;
    }
    
    private boolean validatePointTextField(){
        boolean valid = true;
        if(!isValidInt(pointTextField.getText())){
            valid = false;
        }
        else if(Integer.parseInt(pointTextField.getText())<=0){
            valid = false;
        }
        
        if(!valid){
            JOptionPane.showMessageDialog(this,"Invalid point value (must number and greater than 0)","Gift Search Dialog",JOptionPane.OK_CANCEL_OPTION);
            pointTextField.requestFocusInWindow();
        }
        return valid;
    }
    /**
     * Getter for property dataVector.
     * @return Value of property dataVector.
     */
    public Vector getDataVector() {
        if(dataVector==null){
            dataVector = new Vector();
        }
        return dataVector;
    }
    
    /**
     * Setter for property dataVector.
     * @param dataVector New value of property dataVector.
     */
    public void setDataVector(Vector dataVector) {
        this.dataVector = dataVector;
    }
    
    /**
     * Getter for property columnIdentifier.
     * @return Value of property columnIdentifier.
     */
    public Vector getColumnIdentifier() {
        if(columnIdentifier==null){
            columnIdentifier = new Vector();
            for(int i = 0;i<fieldNames.length;i++){
                columnIdentifier.add(fieldNames[i]);
            }
            
        }
        return columnIdentifier;
    }
    
    /**
     * Setter for property columnIdentifier.
     * @param columnIdentifier New value of property columnIdentifier.
     */
    public void setColumnIdentifier(Vector columnIdentifier) {
        this.columnIdentifier = columnIdentifier;
    }
    
    /**
     * Getter for property hashRowIndexOID.
     * @return Value of property hashRowIndexOID.
     */
    public Hashtable getHashRowIndexOID() {
        return hashRowIndexOID;
    }
    
    /**
     * Setter for property hashRowIndexOID.
     * @param hashRowIndexOID New value of property hashRowIndexOID.
     */
    public void setHashRowIndexOID(Hashtable hashRowIndexOID) {
        this.hashRowIndexOID = hashRowIndexOID;
    }
    
    /**
     * Getter for property GiftTableModel.
     * @return Value of property productTableModel.
     */
    public DefaultTableModel getGiftTableModel() {
        if(giftTableModel==null){
            giftTableModel = new DefaultTableModel();
            giftTableModel.setDataVector(this.getDataVector(),this.getColumnIdentifier());
            cmdSetColumnTableSize();
        }
        return giftTableModel;
    }
    
    /**
     * Setter for property giftTableModel.
     * @param giftTableModel New value of property giftTableModel.
     */
    public void setGiftTableModel(DefaultTableModel giftTableModel) {
        this.giftTableModel = giftTableModel;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeFrameButton;
    private javax.swing.JButton firstRecordButton;
    private javax.swing.JTextField giftCodeTextField;
    private javax.swing.JTable giftListTable;
    private javax.swing.JTextField giftNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lastRecordButton;
    private javax.swing.JButton nextRecordButton;
    private javax.swing.JTextField pointTextField;
    private javax.swing.JButton prevRecordButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton selectRecordButton;
    // End of variables declaration//GEN-END:variables
    
}
