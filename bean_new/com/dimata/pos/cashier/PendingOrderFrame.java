/*
 * CashSaleFrame.java
 *
 * Created on December 4, 2004, 7:11 AM
 */

package com.dimata.pos.cashier;

import com.dimata.posbo.entity.masterdata.Sales;
import com.dimata.pos.entity.billing.PendingOrder;
import com.dimata.pos.session.processdata.SessTransactionData;
import com.dimata.common.entity.payment.CurrencyType;
import com.dimata.posbo.entity.masterdata.MemberReg;
import com.dimata.posbo.entity.masterdata.PstMemberReg;
import com.dimata.common.entity.payment.StandartRate;
import com.dimata.util.Validator;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author  Widi Pradnyana
 */
//public class PendingOrderFrame extends javax.swing.JInternalFrame {
public class PendingOrderFrame extends JDialog {
    
    /** Creates new form CashSaleFrame */
    public PendingOrderFrame(Frame parent, boolean modal) {
        super(parent,modal);
        initComponents();
        initAllFields();
    }
    
    String forCur = CashierMainApp.getDSJ_CashierXML().getConfig(0).forcurrency;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        delPendOrdFrameButton = new javax.swing.JButton();
        pendiOrderCodeTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        itemSearchButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        transTypeComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        salesNameTextField = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        custTypeComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        memberNameTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        memberCodeTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        custNameTextField = new javax.swing.JTextField();
        custAddressTextField = new javax.swing.JTextField();
        custPhoneTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        boxOrderCodeTextField = new javax.swing.JTextField();
        dpLabel = new javax.swing.JLabel();
        dpPaymentTextField = new javax.swing.JTextField();
        planTakenDayComboBox = new javax.swing.JComboBox();
        planTakenMonthComboBox = new javax.swing.JComboBox();
        planTakenYearComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        expDayComboBox = new javax.swing.JComboBox();
        expMonthComboBox = new javax.swing.JComboBox();
        expYearComboBox = new javax.swing.JComboBox();
        paymentCurTypeComboBox = new javax.swing.JComboBox();
        dpLabel1 = new javax.swing.JLabel();
        rateTextField = new javax.swing.JTextField();
        dpIDRTextField = new javax.swing.JTextField();
        dpLabel2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        closeFrameButton = new javax.swing.JButton();
        newTransButton = new javax.swing.JButton();
        savePendingOrderlButton = new javax.swing.JButton();

        delPendOrdFrameButton.setText("Del PendingOrder");
        delPendOrdFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delPendOrdFrameButtonActionPerformed(evt);
            }
        });

        pendiOrderCodeTextField.setColumns(10);
        pendiOrderCodeTextField.setEditable(false);
        pendiOrderCodeTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pendiOrderCodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pendiOrderCodeTextFieldActionPerformed(evt);
            }
        });
        pendiOrderCodeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pendiOrderCodeTextFieldFocusGained(evt);
            }
        });
        pendiOrderCodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pendiOrderCodeTextFieldKeyPressed(evt);
            }
        });

        jLabel7.setText("Pending Order Code");
        itemSearchButton.setText("Search");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Pending Order");
        setModal(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(new javax.swing.border.TitledBorder(""));
        jLabel1.setText("Trans Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(jLabel1, gridBagConstraints);

        transTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Create Pending Order" }));
        transTypeComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                transTypeComboBoxKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(transTypeComboBox, gridBagConstraints);

        jLabel2.setText("Sales Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(jLabel2, gridBagConstraints);

        salesNameTextField.setColumns(10);
        salesNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesNameTextFieldActionPerformed(evt);
            }
        });
        salesNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                salesNameTextFieldFocusGained(evt);
            }
        });
        salesNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                salesNameTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(salesNameTextField, gridBagConstraints);

        jPanel1.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBorder(new javax.swing.border.TitledBorder(""));
        jLabel3.setText("Customer Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(jLabel3, gridBagConstraints);

        custTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Member", "Non Member" }));
        custTypeComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                custTypeComboBoxKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(custTypeComboBox, gridBagConstraints);

        jLabel4.setText("Member Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(jLabel4, gridBagConstraints);

        memberNameTextField.setColumns(10);
        memberNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberNameTextFieldActionPerformed(evt);
            }
        });
        memberNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                memberNameTextFieldFocusGained(evt);
            }
        });
        memberNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                memberNameTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(memberNameTextField, gridBagConstraints);

        jLabel5.setText("Member Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(jLabel5, gridBagConstraints);

        memberCodeTextField.setColumns(10);
        memberCodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberCodeTextFieldActionPerformed(evt);
            }
        });
        memberCodeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                memberCodeTextFieldFocusGained(evt);
            }
        });
        memberCodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                memberCodeTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(memberCodeTextField, gridBagConstraints);

        jLabel17.setText("Non Member Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(jLabel17, gridBagConstraints);

        jLabel19.setText("Non Member Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(jLabel19, gridBagConstraints);

        jLabel20.setText("Non Member Phone");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(jLabel20, gridBagConstraints);

        custNameTextField.setColumns(10);
        custNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custNameTextFieldActionPerformed(evt);
            }
        });
        custNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                custNameTextFieldFocusGained(evt);
            }
        });
        custNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                custNameTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(custNameTextField, gridBagConstraints);

        custAddressTextField.setColumns(10);
        custAddressTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custAddressTextFieldActionPerformed(evt);
            }
        });
        custAddressTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                custAddressTextFieldFocusGained(evt);
            }
        });
        custAddressTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                custAddressTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(custAddressTextField, gridBagConstraints);

        custPhoneTextField.setColumns(10);
        custPhoneTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custPhoneTextFieldActionPerformed(evt);
            }
        });
        custPhoneTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                custPhoneTextFieldFocusGained(evt);
            }
        });
        custPhoneTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                custPhoneTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(custPhoneTextField, gridBagConstraints);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel3.setPreferredSize(new java.awt.Dimension(771, 247));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jPanel9.setBorder(new javax.swing.border.TitledBorder(""));
        jLabel9.setText("Box Order Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(jLabel9, gridBagConstraints);

        boxOrderCodeTextField.setColumns(10);
        boxOrderCodeTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        boxOrderCodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxOrderCodeTextFieldActionPerformed(evt);
            }
        });
        boxOrderCodeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                boxOrderCodeTextFieldFocusGained(evt);
            }
        });
        boxOrderCodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                boxOrderCodeTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(boxOrderCodeTextField, gridBagConstraints);

        dpLabel.setText("IDR");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(dpLabel, gridBagConstraints);

        dpPaymentTextField.setColumns(10);
        dpPaymentTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        dpPaymentTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dpPaymentTextFieldActionPerformed(evt);
            }
        });
        dpPaymentTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dpPaymentTextFieldFocusGained(evt);
            }
        });
        dpPaymentTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dpPaymentTextFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(dpPaymentTextField, gridBagConstraints);

        planTakenDayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        planTakenDayComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                planTakenDayComboBoxActionPerformed(evt);
            }
        });
        planTakenDayComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                planTakenDayComboBoxKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(planTakenDayComboBox, gridBagConstraints);

        planTakenMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));
        planTakenMonthComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                planTakenMonthComboBoxKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(planTakenMonthComboBox, gridBagConstraints);

        planTakenYearComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2004", "2005", "2005", "2007", "2008" }));
        planTakenYearComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                planTakenYearComboBoxKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(planTakenYearComboBox, gridBagConstraints);

        jLabel8.setText("Order Finish Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(jLabel8, gridBagConstraints);

        jLabel10.setText("Expired Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(jLabel10, gridBagConstraints);

        expDayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        expDayComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                expDayComboBoxKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(expDayComboBox, gridBagConstraints);

        expMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));
        expMonthComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                expMonthComboBoxKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(expMonthComboBox, gridBagConstraints);

        expYearComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2004", "2005", "2005", "2007", "2008" }));
        expYearComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                expYearComboBoxKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(expYearComboBox, gridBagConstraints);

        paymentCurTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rp", "USD", "YEN" }));
        paymentCurTypeComboBox.setEnabled(false);
        paymentCurTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentCurTypeComboBoxActionPerformed(evt);
            }
        });
        paymentCurTypeComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                paymentCurTypeComboBoxKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(paymentCurTypeComboBox, gridBagConstraints);

        dpLabel1.setText("Currency Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(dpLabel1, gridBagConstraints);

        rateTextField.setText("1");
        rateTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(rateTextField, gridBagConstraints);

        dpIDRTextField.setColumns(10);
        dpIDRTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        dpIDRTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(dpIDRTextField, gridBagConstraints);

        dpLabel2.setText("DP Payment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel9.add(dpLabel2, gridBagConstraints);

        jPanel3.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(new javax.swing.border.TitledBorder(""));
        closeFrameButton.setText("Close Frame - Alt+X");
        closeFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFrameButtonActionPerformed(evt);
            }
        });
        closeFrameButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                closeFrameButtonKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel7.add(closeFrameButton, gridBagConstraints);

        newTransButton.setText("New- F5");
        newTransButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTransButtonActionPerformed(evt);
            }
        });
        newTransButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                newTransButtonKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel7.add(newTransButton, gridBagConstraints);

        savePendingOrderlButton.setText("Save - F12");
        savePendingOrderlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePendingOrderlButtonActionPerformed(evt);
            }
        });
        savePendingOrderlButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                savePendingOrderlButtonKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel7.add(savePendingOrderlButton, gridBagConstraints);

        jPanel3.add(jPanel7, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
    
    private void formKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_formKeyPressed
    {//GEN-HEADEREND:event_formKeyPressed
        getGlobalKeyListener(evt);
    }//GEN-LAST:event_formKeyPressed
    
    private void closeFrameButtonKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_closeFrameButtonKeyPressed
    {//GEN-HEADEREND:event_closeFrameButtonKeyPressed
        getGlobalKeyListener(evt);
    }//GEN-LAST:event_closeFrameButtonKeyPressed
    
    private void newTransButtonKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_newTransButtonKeyPressed
    {//GEN-HEADEREND:event_newTransButtonKeyPressed
        
        getGlobalKeyListener(evt);
    }//GEN-LAST:event_newTransButtonKeyPressed
    
    private void savePendingOrderlButtonKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_savePendingOrderlButtonKeyPressed
    {//GEN-HEADEREND:event_savePendingOrderlButtonKeyPressed
        
        getGlobalKeyListener(evt);
    }//GEN-LAST:event_savePendingOrderlButtonKeyPressed
    
    private void formWindowOpened (java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        
        
        cmdChooseTransType();
        cmdNewPendingOrder();
    }//GEN-LAST:event_formWindowOpened
    
    public void cmdChooseTransType(){
        transTypeComboBox.setEnabled(true);
        transTypeComboBox.requestFocusInWindow();
    }
    private void dpPaymentTextFieldKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_dpPaymentTextFieldKeyPressed
    {//GEN-HEADEREND:event_dpPaymentTextFieldKeyPressed
        
        
        getGlobalKeyListener(evt);
        
    }//GEN-LAST:event_dpPaymentTextFieldKeyPressed
    
    private void custPhoneTextFieldKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_custPhoneTextFieldKeyPressed
    {//GEN-HEADEREND:event_custPhoneTextFieldKeyPressed
        
        
        getGlobalKeyListener(evt);
        
    }//GEN-LAST:event_custPhoneTextFieldKeyPressed
    
    private void custAddressTextFieldKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_custAddressTextFieldKeyPressed
    {//GEN-HEADEREND:event_custAddressTextFieldKeyPressed
        
        
        getGlobalKeyListener(evt);
        
    }//GEN-LAST:event_custAddressTextFieldKeyPressed
    
    private void custNameTextFieldKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_custNameTextFieldKeyPressed
    {//GEN-HEADEREND:event_custNameTextFieldKeyPressed
        getGlobalKeyListener(evt);
        
    }//GEN-LAST:event_custNameTextFieldKeyPressed
    
    private void salesNameTextFieldKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_salesNameTextFieldKeyPressed
    {//GEN-HEADEREND:event_salesNameTextFieldKeyPressed
        
        getGlobalKeyListener(evt);
    }//GEN-LAST:event_salesNameTextFieldKeyPressed
    
    private void paymentCurTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentCurTypeComboBoxActionPerformed
        rateTextField.setText(toCurrency(getCurrencyRate((String) paymentCurTypeComboBox.getSelectedItem())));
    }//GEN-LAST:event_paymentCurTypeComboBoxActionPerformed
    /** toCurrency
     *  convert into selected currency format
     *  @param double
     *  @return String
     */
    private String toCurrency(double dValue){
        return CashierMainApp.getFrameHandler().userFormatStringDecimal(dValue);
    }
    private void formInternalFrameActivated (javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameActivated
    {//GEN-HEADEREND:event_formInternalFrameActivated
        
        
    }//GEN-LAST:event_formInternalFrameActivated
    
    private void boxOrderCodeTextFieldKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_boxOrderCodeTextFieldKeyPressed
    {//GEN-HEADEREND:event_boxOrderCodeTextFieldKeyPressed
        
        
        getGlobalKeyListener(evt);
        
    }//GEN-LAST:event_boxOrderCodeTextFieldKeyPressed
    
    private void delPendOrdFrameButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_delPendOrdFrameButtonActionPerformed
    {//GEN-HEADEREND:event_delPendOrdFrameButtonActionPerformed
        
        cmdDeletePendingOrder();
        
    }//GEN-LAST:event_delPendOrdFrameButtonActionPerformed
    
    private void cmdDeletePendingOrder(){
        
    }
    private void paymentCurTypeComboBoxKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_paymentCurTypeComboBoxKeyPressed
    {//GEN-HEADEREND:event_paymentCurTypeComboBoxKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cmdChangeCurType();
            dpPaymentTextField.setEnabled(true);
            dpPaymentTextField.requestFocusInWindow();
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_paymentCurTypeComboBoxKeyPressed
    
    private void cmdChangeCurType(){
        String sCurType = (String)paymentCurTypeComboBox.getSelectedItem();
        CurrencyType curType = (CurrencyType)CashierMainApp.getHashCurrencyType().get(sCurType);
        this.getCandidatePendingOrderModel().setCurrencyUsed(curType);
        
    }
    private void boxOrderCodeTextFieldFocusGained (java.awt.event.FocusEvent evt)//GEN-FIRST:event_boxOrderCodeTextFieldFocusGained
    {//GEN-HEADEREND:event_boxOrderCodeTextFieldFocusGained
        
        boxOrderCodeTextField.selectAll();
    }//GEN-LAST:event_boxOrderCodeTextFieldFocusGained
    
    private void pendiOrderCodeTextFieldFocusGained (java.awt.event.FocusEvent evt)//GEN-FIRST:event_pendiOrderCodeTextFieldFocusGained
    {//GEN-HEADEREND:event_pendiOrderCodeTextFieldFocusGained
        
        pendiOrderCodeTextField.selectAll();
    }//GEN-LAST:event_pendiOrderCodeTextFieldFocusGained
    
    private void custPhoneTextFieldFocusGained (java.awt.event.FocusEvent evt)//GEN-FIRST:event_custPhoneTextFieldFocusGained
    {//GEN-HEADEREND:event_custPhoneTextFieldFocusGained
        
        custPhoneTextField.selectAll();
    }//GEN-LAST:event_custPhoneTextFieldFocusGained
    
    private void custAddressTextFieldFocusGained (java.awt.event.FocusEvent evt)//GEN-FIRST:event_custAddressTextFieldFocusGained
    {//GEN-HEADEREND:event_custAddressTextFieldFocusGained
        
        custAddressTextField.selectAll();
    }//GEN-LAST:event_custAddressTextFieldFocusGained
    
    private void custNameTextFieldFocusGained (java.awt.event.FocusEvent evt)//GEN-FIRST:event_custNameTextFieldFocusGained
    {//GEN-HEADEREND:event_custNameTextFieldFocusGained
        
        custNameTextField.selectAll();
    }//GEN-LAST:event_custNameTextFieldFocusGained
    
    private void memberCodeTextFieldFocusGained (java.awt.event.FocusEvent evt)//GEN-FIRST:event_memberCodeTextFieldFocusGained
    {//GEN-HEADEREND:event_memberCodeTextFieldFocusGained
        
        memberCodeTextField.selectAll();
    }//GEN-LAST:event_memberCodeTextFieldFocusGained
    
    private void memberNameTextFieldFocusGained (java.awt.event.FocusEvent evt)//GEN-FIRST:event_memberNameTextFieldFocusGained
    {//GEN-HEADEREND:event_memberNameTextFieldFocusGained
        
        memberNameTextField.selectAll();
    }//GEN-LAST:event_memberNameTextFieldFocusGained
    
    private void salesNameTextFieldFocusGained (java.awt.event.FocusEvent evt)//GEN-FIRST:event_salesNameTextFieldFocusGained
    {//GEN-HEADEREND:event_salesNameTextFieldFocusGained
        
        salesNameTextField.selectAll();
    }//GEN-LAST:event_salesNameTextFieldFocusGained
    
    private void dpPaymentTextFieldFocusGained (java.awt.event.FocusEvent evt)//GEN-FIRST:event_dpPaymentTextFieldFocusGained
    {//GEN-HEADEREND:event_dpPaymentTextFieldFocusGained
        
        dpPaymentTextField.selectAll();
    }//GEN-LAST:event_dpPaymentTextFieldFocusGained
    
    public static final int TRANS_TYPE_CREATE_PENDING_ORDER=0;
    public static final int TRANS_TYPE_DELETE_PENDING_ORDER=1;
    private int transType=0;
    private void pendiOrderCodeTextFieldKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_pendiOrderCodeTextFieldKeyPressed
    {//GEN-HEADEREND:event_pendiOrderCodeTextFieldKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_F1&&this.getTransType()==TRANS_TYPE_DELETE_PENDING_ORDER){
            cmdPendingOrderSearch();
        }
    }//GEN-LAST:event_pendiOrderCodeTextFieldKeyPressed
    
    
    private void cmdPendingOrderSearch(){
        CashSaleController.showPendingOrderSearch(this, pendiOrderCodeTextField.getText());
        Vector vctPendOrderChoosen = CashSaleController.getPendingOrderChoosen();
        if(vctPendOrderChoosen.size()==1){
            PendingOrder temp = (PendingOrder)vctPendOrderChoosen.get(0);
            cmdLoadPendOrderInfo(temp);
        }
        synchronizeModelAndTable();
    }
    private void synchronizeModelAndTable(){
        
    }
    private void cmdLoadPendOrderInfo(PendingOrder argPendingOrder){
        this.getCandidatePendingOrderModel().setPendingOrder(argPendingOrder);
        if(argPendingOrder.getMemberId()>0){
            try{
                MemberReg member = PstMemberReg.fetchExc(argPendingOrder.getMemberId());
                
                this.getCandidatePendingOrderModel().setMemberServed(member);
            }catch(Exception dbe){ 
                
            }
        }else{
            this.getCandidatePendingOrderModel().setCustomerAddress(argPendingOrder.getAddress());
            this.getCandidatePendingOrderModel().setCustomerName(argPendingOrder.getName());
            this.getCandidatePendingOrderModel().setCustomerPhone(argPendingOrder.getPhone());
            
        }
    }
    private void custPhoneTextFieldActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_custPhoneTextFieldActionPerformed
    {//GEN-HEADEREND:event_custPhoneTextFieldActionPerformed
        
        if(custPhoneTextField.getText().length()>0){
            //pendiOrderCodeTextField.setEnabled (true);
            //pendiOrderCodeTextField.requestFocusInWindow ();
            boxOrderCodeTextField.setEnabled(true);
            boxOrderCodeTextField.requestFocusInWindow();
            
            this.getCandidatePendingOrderModel().setCustomerPhone(custPhoneTextField.getText());
            this.getCandidatePendingOrderModel().getPendingOrder().setPhone(custPhoneTextField.getText());
        }else{
            custPhoneTextField.requestFocusInWindow();
        }
    }//GEN-LAST:event_custPhoneTextFieldActionPerformed
    
    private void custAddressTextFieldActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_custAddressTextFieldActionPerformed
    {//GEN-HEADEREND:event_custAddressTextFieldActionPerformed
        
        if(custAddressTextField.getText().length()>0){
            custPhoneTextField.setEnabled(true);
            custPhoneTextField.requestFocusInWindow();
            this.getCandidatePendingOrderModel().setCustomerAddress(custAddressTextField.getText());
            this.getCandidatePendingOrderModel().getPendingOrder().setAddress(custAddressTextField.getText());
        }else{
            custAddressTextField.requestFocusInWindow();
        }
    }//GEN-LAST:event_custAddressTextFieldActionPerformed
    
    private void custNameTextFieldActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_custNameTextFieldActionPerformed
    {//GEN-HEADEREND:event_custNameTextFieldActionPerformed
        
        if(custNameTextField.getText().length()>0){
            custAddressTextField.setEnabled(true);
            custAddressTextField.requestFocusInWindow();
            this.getCandidatePendingOrderModel().setCustomerName(custNameTextField.getText());
            this.getCandidatePendingOrderModel().getPendingOrder().setName(custNameTextField.getText());
        }else{
            custNameTextField.requestFocusInWindow();
        }
    }//GEN-LAST:event_custNameTextFieldActionPerformed
    
    private void formInternalFrameOpened (javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameOpened
    {//GEN-HEADEREND:event_formInternalFrameOpened
        
        cmdNewPendingOrder();
    }//GEN-LAST:event_formInternalFrameOpened
    
    private void memberCodeTextFieldKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_memberCodeTextFieldKeyPressed
    {//GEN-HEADEREND:event_memberCodeTextFieldKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_F1){
            cmdShowMemberSearch();
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_memberCodeTextFieldKeyPressed
    
    private void memberNameTextFieldKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_memberNameTextFieldKeyPressed
    {//GEN-HEADEREND:event_memberNameTextFieldKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_F1){
            cmdShowMemberSearch();
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_memberNameTextFieldKeyPressed
    
    private void savePendingOrderlButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_savePendingOrderlButtonActionPerformed
    {//GEN-HEADEREND:event_savePendingOrderlButtonActionPerformed
        
        cmdSaveAll();
    }//GEN-LAST:event_savePendingOrderlButtonActionPerformed
    
    
    private void cmdSaveAll(){
        if(this.getCandidatePendingOrderModel().isAllValuesCompleted()){
            SessTransactionData.putPendingOrderData(this.getCandidatePendingOrderModel());
            cmdPrint();
            cmdNewPendingOrder();
        }else{
            JOptionPane.showMessageDialog(this,"Please complete all transaction values","Incomplete data",JOptionPane.ERROR_MESSAGE);
            cmdDoPayments();
        }
        
    }
    
    private void cmdDoPayments(){
        if(this.getCandidatePendingOrderModel().isAnyCustomers()){
            boxOrderCodeTextField.setEnabled(true);
            boxOrderCodeTextField.setEditable(true);
            boxOrderCodeTextField.requestFocusInWindow();
            paymentCurTypeComboBox.setEnabled(true);
        }else{
            JOptionPane.showMessageDialog(this,"Please set customers","Incomplete Data",JOptionPane.ERROR_MESSAGE);
            cmdDoSetCustomers();
        }
    }
    private void cmdDoSetCustomers(){
        if(this.getCandidatePendingOrderModel().isAnySales()){
            custTypeComboBox.setEnabled(true);
            custTypeComboBox.requestFocusInWindow();
        }else{
            JOptionPane.showMessageDialog(this,"Please set sales person","Incomplete Data",JOptionPane.ERROR_MESSAGE);
            cmdDoSetSales();
        }
    }
    private void cmdDoSetSales(){
        cmdNewPendingOrder();
    }
    private void cmdPrint(){
        
    }
    private void closeFrameButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeFrameButtonActionPerformed
    {//GEN-HEADEREND:event_closeFrameButtonActionPerformed
        
        if(isOnTransaction()){
            int answer = JOptionPane.showConfirmDialog(this,"Are you sure want to close this transaction?","Close transaction",JOptionPane.OK_CANCEL_OPTION);
            if(answer==JOptionPane.OK_OPTION){
                this.setCandidatePendingOrderModel(null);
                cmdCloseWindows();
            }
        }
    }//GEN-LAST:event_closeFrameButtonActionPerformed
    
    public boolean isOnTransaction(){
        if(this.getCandidatePendingOrderModel()!=null){
            return true;
        }
        else{
            return false;
        }
    }
    private void newTransButtonActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_newTransButtonActionPerformed
    {//GEN-HEADEREND:event_newTransButtonActionPerformed
        
        if(isOnTransaction()){
            int answer = JOptionPane.showConfirmDialog(this,"Are you sure want to close this transaction?","Close transaction",JOptionPane.OK_CANCEL_OPTION);
            if(answer==JOptionPane.OK_OPTION){
                this.setCandidatePendingOrderModel(null);
                //this.dispose ();
                cmdNewPendingOrder();
            }
        }
        
    }//GEN-LAST:event_newTransButtonActionPerformed
    
    private void pendiOrderCodeTextFieldActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_pendiOrderCodeTextFieldActionPerformed
    {//GEN-HEADEREND:event_pendiOrderCodeTextFieldActionPerformed
        
        //if(evt.getKeyCode ()==KeyEvent.VK_ENTER){
        if(pendiOrderCodeTextField.getText().length()>0){
            boxOrderCodeTextField.setEnabled(true);
            boxOrderCodeTextField.requestFocusInWindow();
            this.getCandidatePendingOrderModel().getPendingOrder().setPoNumber(pendiOrderCodeTextField.getText());
        }else{
            pendiOrderCodeTextField.requestFocusInWindow();
        }
        //}
    }//GEN-LAST:event_pendiOrderCodeTextFieldActionPerformed
    
    
    private void dpPaymentTextFieldActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_dpPaymentTextFieldActionPerformed
    {//GEN-HEADEREND:event_dpPaymentTextFieldActionPerformed
        
        
        if(Validator.isFloat(dpPaymentTextField.getText())){
            cmdAddPayment();
            savePendingOrderlButton.setEnabled(true);
            savePendingOrderlButton.requestFocusInWindow();
        }else{
            JOptionPane.showMessageDialog(this,"Inputed value format is not correct","Incorrect format",JOptionPane.ERROR_MESSAGE);
            dpPaymentTextField.requestFocusInWindow();
        }
        
    }//GEN-LAST:event_dpPaymentTextFieldActionPerformed
    
    private double getCurrencyRate(String stCode){
        
        double result = 0;
        CurrencyType type = (CurrencyType)CashierMainApp.getHashCurrencyType().get(stCode);
        StandartRate rate = CashSaleController.getLatestRate(type.getOID()+"");
        result = rate.getSellingRate();
        return result;
    }
    
    private void cmdAddPayment(){
        
        double inputedAmount = 0;
        inputedAmount  = CashierMainApp.getDoubleFromFormated(dpPaymentTextField.getText());
        
        String selectedCur = (String)paymentCurTypeComboBox.getSelectedItem();
        CurrencyType type = (CurrencyType)CashierMainApp.getHashCurrencyType().get(selectedCur);
        StandartRate rate = (StandartRate)CashSaleController.getLatestRate(String.valueOf(type.getOID()));
        //StandartRate srate = CashSaleController.getLatestRate (String.valueOf (this.getCandidatePendingOrderModel ().getPendingOrder ().getCurrencyId ()));
        this.getCandidatePendingOrderModel().getPendingOrder().setRate(rate.getSellingRate());
        
        double realAmount = inputedAmount * rate.getSellingRate();
        this.getCandidatePendingOrderModel().getPendingOrder().setDownPayment(realAmount);
        
        double shownAmount = inputedAmount ;
        //dpPaymentTextField.setText (com.dimata.util.Formater.formatNumber (shownAmount, forCur));
        dpPaymentTextField.setText(toCurrency(shownAmount));
        //dpIDRTextField.setText(Formater.formatNumber(realAmount, forCur));
        dpIDRTextField.setText(toCurrency(realAmount));
        
    }
    private void expYearComboBoxKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_expYearComboBoxKeyPressed
    {//GEN-HEADEREND:event_expYearComboBoxKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            /*int day = expDayComboBox.getSelectedIndex ();
            int month = expMonthComboBox.getSelectedIndex ();
            int yeart = expYearComboBox.getSelectedIndex ();
            //Integer Iyear = (Integer)this.getHashYearIndex ().get (new Integer(yeart));
            Integer Iyear = (Integer)this.getHashYearIndex ().get (new Integer(yeart));
            int year = Iyear.intValue ()-1900;
            //int year = Iyear.intValue ();
            Date temp = new Date(year,month,day);
            this.getCandidatePendingOrderModel ().getPendingOrder ().setExpiredDate (temp);
             **/
            cmdUpdateExpDate();
            paymentCurTypeComboBox.setEnabled(true);
            paymentCurTypeComboBox.requestFocusInWindow();
            dpPaymentTextField.setEnabled(true);
            
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_expYearComboBoxKeyPressed
    
    private void expMonthComboBoxKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_expMonthComboBoxKeyPressed
    {//GEN-HEADEREND:event_expMonthComboBoxKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            expYearComboBox.requestFocusInWindow();
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_expMonthComboBoxKeyPressed
    
    private void expDayComboBoxKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_expDayComboBoxKeyPressed
    {//GEN-HEADEREND:event_expDayComboBoxKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            expMonthComboBox.requestFocusInWindow();
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_expDayComboBoxKeyPressed
    
    private Hashtable hashYearIndex;
    
    private void cmdUpdateFinishDate(){
        int day = planTakenDayComboBox.getSelectedIndex();
        int month = planTakenMonthComboBox.getSelectedIndex();
        String sYeart = (String)planTakenYearComboBox.getSelectedItem();
        //Integer Iyear = (Integer)this.getHashYearIndex ().get (new Integer(yeart));
        int year = Integer.parseInt(sYeart)-1900;
        Date temp = new Date(year,month,day);
        //this.getCandidatePendingOrderModel ().getPendingOrder ().setPlanTakenDate (temp);
        expDayComboBox.setEnabled(true);
        expMonthComboBox.setEnabled(true);
        expYearComboBox.setEnabled(true);
        expDayComboBox.setSelectedIndex(day);
        expYearComboBox.setSelectedItem(String.valueOf(year-1900));
        if(month+6>11){
            month=month+6-12;
            expYearComboBox.setSelectedItem(String.valueOf(year+1-1900));
        }else{
            expMonthComboBox.setSelectedIndex(month+6) ;
        }
    }
    private void cmdUpdateExpDate(){
        int day = planTakenDayComboBox.getSelectedIndex();
        int month = planTakenMonthComboBox.getSelectedIndex();
        String sYeart = (String)planTakenYearComboBox.getSelectedItem();
        //Integer Iyear = (Integer)this.getHashYearIndex ().get (new Integer(yeart));
        int year = Integer.parseInt(sYeart)-1900;
        Date temp = new Date(year,month,day);
        
        expDayComboBox.setEnabled(true);
        expMonthComboBox.setEnabled(true);
        expYearComboBox.setEnabled(true);
        expDayComboBox.setSelectedIndex(day);
        expYearComboBox.setSelectedItem(String.valueOf(year-1900));
        if(month+6<11){
            expMonthComboBox.setSelectedIndex(month+6) ;
        }else{
            month=month+6-12;
            expYearComboBox.setSelectedItem(String.valueOf(year+1-1900));
        }
        
        Date infoDate = new Date();
        this.getCandidatePendingOrderModel().getPendingOrder().setCreationDate(infoDate);
        day = planTakenDayComboBox.getSelectedIndex()+1;
        month = planTakenMonthComboBox.getSelectedIndex();
        String yeart = (String)planTakenYearComboBox.getSelectedItem();
        
        year = Integer.parseInt(yeart)-1900;
        infoDate = new Date(year,month,day);
        this.getCandidatePendingOrderModel().getPendingOrder().setPlanTakenDate(infoDate);
        
        day = expDayComboBox.getSelectedIndex()+1;
        month = expMonthComboBox.getSelectedIndex();
        yeart = (String)expYearComboBox.getSelectedItem();
        year = Integer.parseInt(yeart)-1900;
        infoDate = new Date(year,month,day);
        this.getCandidatePendingOrderModel().getPendingOrder().setExpiredDate(infoDate);
        
    }
    private void planTakenYearComboBoxKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_planTakenYearComboBoxKeyPressed
    {//GEN-HEADEREND:event_planTakenYearComboBoxKeyPressed
        
        cmdUpdateExpDate();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            expDayComboBox.requestFocusInWindow();
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_planTakenYearComboBoxKeyPressed
    
    private void planTakenDayComboBoxKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_planTakenDayComboBoxKeyPressed
    {//GEN-HEADEREND:event_planTakenDayComboBoxKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            planTakenMonthComboBox.requestFocusInWindow();
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_planTakenDayComboBoxKeyPressed
    
    private void planTakenMonthComboBoxKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_planTakenMonthComboBoxKeyPressed
    {//GEN-HEADEREND:event_planTakenMonthComboBoxKeyPressed
        
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cmdUpdateExpDate();
            planTakenYearComboBox.requestFocusInWindow();
            
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_planTakenMonthComboBoxKeyPressed
    
    private void planTakenDayComboBoxActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_planTakenDayComboBoxActionPerformed
    {//GEN-HEADEREND:event_planTakenDayComboBoxActionPerformed
        
    }//GEN-LAST:event_planTakenDayComboBoxActionPerformed
    
    private void boxOrderCodeTextFieldActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_boxOrderCodeTextFieldActionPerformed
    {//GEN-HEADEREND:event_boxOrderCodeTextFieldActionPerformed
        
        //= boxOrderCodeTextField.getText ());
        if(boxOrderCodeTextField.getText().length()>0){
            this.getCandidatePendingOrderModel().getPendingOrder().setOrderNumber(boxOrderCodeTextField.getText());
            this.getCandidatePendingOrderModel().getPendingOrder().setPoNumber(boxOrderCodeTextField.getText());
            
            planTakenDayComboBox.setEnabled(true);
            planTakenMonthComboBox.setEnabled(true);
            planTakenYearComboBox.setEnabled(true);
            initTodays();
            planTakenDayComboBox.requestFocusInWindow();
        }
        else{
            boxOrderCodeTextField.requestFocusInWindow();
        }
        
    }//GEN-LAST:event_boxOrderCodeTextFieldActionPerformed
    
    private void custTypeComboBoxKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_custTypeComboBoxKeyPressed
    {//GEN-HEADEREND:event_custTypeComboBoxKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cmdChangeCustType();
            
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_custTypeComboBoxKeyPressed
    
    private void cmdChangeCustType(){
        if(custTypeComboBox.getSelectedIndex()==0){
            memberNameTextField.setEnabled(true);
            memberNameTextField.requestFocusInWindow();
            custAddressTextField.setEnabled(false);
            custPhoneTextField.setEnabled(false);
            custNameTextField.setEnabled(false);
        }else if (custTypeComboBox.getSelectedIndex()==1){
            
            custNameTextField.setEnabled(true);
            custNameTextField.requestFocusInWindow();
            memberNameTextField.setEnabled(false);
            memberCodeTextField.setEnabled(false);
            this.getCandidatePendingOrderModel().setMemberServed(CashSaleController.getCustomerNonMember());
            //memberNameTextField.setEnabled (true);
            
        }
    }
    public void cmdSalesSearch(){
        Sales sales;
        Vector rs = CashSaleController.getSales(0,0,salesNameTextField.getText(),"");
        if(rs.size()>0){
            if(rs.size()==1){
                sales = (Sales) rs.get(0);
            }
            else{
                CashSaleController.showSalesSearch(this,salesNameTextField.getText(), "");
                sales = CashSaleController.getSalesChoosen();
            }
            this.getCandidatePendingOrderModel().getPendingOrder().setSalesId(sales.getOID());
            salesNameTextField.setText(sales.getName());
            cmdNewCustomer();
            //transTypeComboBox.setEnabled (true);
            //transTypeComboBox.requestFocusInWindow ();
        }
        else{
            JOptionPane.showMessageDialog(this,"Sales person not found","Sales person",JOptionPane.ERROR_MESSAGE);
            salesNameTextField.requestFocusInWindow();
        }
        
        
    }
    private void salesNameTextFieldActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_salesNameTextFieldActionPerformed
    {//GEN-HEADEREND:event_salesNameTextFieldActionPerformed
        /** changed by wpulantara */
        cmdSalesSearch();
        
    }//GEN-LAST:event_salesNameTextFieldActionPerformed
    
    private void transTypeComboBoxKeyPressed (java.awt.event.KeyEvent evt)//GEN-FIRST:event_transTypeComboBoxKeyPressed
    {//GEN-HEADEREND:event_transTypeComboBoxKeyPressed
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            cmdChangeTransType();
        }else{
            getGlobalKeyListener(evt);
        }
    }//GEN-LAST:event_transTypeComboBoxKeyPressed
    
    public void cmdNewCustomer(){
        custTypeComboBox.setEnabled(true);
        custTypeComboBox.requestFocusInWindow();
    }
    public void cmdSelectSales(){
        salesNameTextField.setEnabled(true);
        salesNameTextField.requestFocusInWindow();
    }
    private void cmdChangeTransType(){
        if(transTypeComboBox.getSelectedIndex()==0){
            //salesNameTextField.setEnabled (true);
            //salesNameTextField.requestFocusInWindow ();
            //custNameTextField.setEnabled (true);
            //cmdNewCustomer ();
            cmdSelectSales();
            pendiOrderCodeTextField.setText(this.getCandidatePendingOrderModel().getPendingOrder().getPoNumber());
            this.setTransType(TRANS_TYPE_CREATE_PENDING_ORDER);
        }else if(transTypeComboBox.getSelectedIndex()==1){
            pendiOrderCodeTextField.setEnabled(true);
            pendiOrderCodeTextField.requestFocusInWindow();
            this.setTransType(TRANS_TYPE_DELETE_PENDING_ORDER);
        }
    }
    private void itemNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        
//GEN-FIRST:event_itemNameTextFieldActionPerformed
        
    }//GEN-LAST:event_itemNameTextFieldActionPerformed
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
       
//GEN-FIRST:event_jTextField1ActionPerformed
        
    }//GEN-LAST:event_jTextField1ActionPerformed
    
    
    public boolean cmdCloseWindows(){
        //this.doDefaultCloseAction ();
        this.hide();
        return true;
    }
    private void cmdShowMemberSearch(){
        CashSaleController.showMemberSearch(null, memberNameTextField.getText(), memberCodeTextField.getText());
        Vector member = CashSaleController.getMemberChoosen();
        if(member.size()==1){
            MemberReg memberReg = (MemberReg)member.get(0);
            memberCodeTextField.setText(memberReg.getMemberBarcode());
            memberNameTextField.setText(memberReg.getPersonName());
        }
        else{
            memberNameTextField.requestFocusInWindow();
        }
    }
    public void cmdDoSetOrder(){
        boxOrderCodeTextField.setEnabled(true);
        boxOrderCodeTextField.requestFocusInWindow();
    }
    private void cmdMemberSearch(){
        boolean memberFound = false;
        Vector membFound = CashSaleController.getMember(0,1, memberCodeTextField.getText(), memberNameTextField.getText());
        if(membFound.size()==1){
            memberFound = true;
            MemberReg memberReg = (MemberReg)membFound.get(0);
            memberCodeTextField.setText(memberReg.getMemberBarcode());
            memberNameTextField.setText(memberReg.getPersonName());
            this.getCandidatePendingOrderModel().setMemberServed(memberReg);
            this.getCandidatePendingOrderModel().getPendingOrder().setMemberId(memberReg.getOID());
            this.getCandidatePendingOrderModel().getPendingOrder().setName(memberReg.getPersonName());
            this.getCandidatePendingOrderModel().getPendingOrder().setAddress(memberReg.getHomeAddr());
            this.getCandidatePendingOrderModel().getPendingOrder().setPhone( memberReg.getTelpNr());
            //pendiOrderCodeTextField.setEnabled (true);
            //pendiOrderCodeTextField.requestFocusInWindow ();
            cmdDoPayments();
        }else{
            cmdShowMemberSearch();
        }
        /*else{
            memberFound = false;
            JOptionPane.showMessageDialog(this,"Member Not Found","Member Not Found",JOptionPane.ERROR_MESSAGE);
            custTypeComboBox.requestFocusInWindow();
        }
        */
        
    }
    private void memberCodeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        
//GEN-FIRST:event_memberCodeTextFieldActionPerformed
        
        if(memberCodeTextField.getText()==""||memberCodeTextField.getText().length()==0) {
            //memberNameTextField.setEnabled (true);
            //memberNameTextField.requestFocusInWindow ();
            cmdShowMemberSearch();
        }else{
            cmdMemberSearch();
        }
        
    }//GEN-LAST:event_memberCodeTextFieldActionPerformed
    
    private void memberNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        
//GEN-FIRST:event_memberNameTextFieldActionPerformed
        
        if(memberNameTextField.getText().length()>0){
            cmdMemberSearch();
        }else{
            memberCodeTextField.setEnabled(true);
            memberCodeTextField.requestFocusInWindow();
        }
        
    }//GEN-LAST:event_memberNameTextFieldActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField boxOrderCodeTextField;
    private javax.swing.JButton closeFrameButton;
    private javax.swing.JTextField custAddressTextField;
    private javax.swing.JTextField custNameTextField;
    private javax.swing.JTextField custPhoneTextField;
    private javax.swing.JComboBox custTypeComboBox;
    private javax.swing.JButton delPendOrdFrameButton;
    private javax.swing.JTextField dpIDRTextField;
    private javax.swing.JLabel dpLabel;
    private javax.swing.JLabel dpLabel1;
    private javax.swing.JLabel dpLabel2;
    private javax.swing.JTextField dpPaymentTextField;
    private javax.swing.JComboBox expDayComboBox;
    private javax.swing.JComboBox expMonthComboBox;
    private javax.swing.JComboBox expYearComboBox;
    private javax.swing.JButton itemSearchButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTextField memberCodeTextField;
    private javax.swing.JTextField memberNameTextField;
    private javax.swing.JButton newTransButton;
    private javax.swing.JComboBox paymentCurTypeComboBox;
    private javax.swing.JTextField pendiOrderCodeTextField;
    private javax.swing.JComboBox planTakenDayComboBox;
    private javax.swing.JComboBox planTakenMonthComboBox;
    private javax.swing.JComboBox planTakenYearComboBox;
    private javax.swing.JTextField rateTextField;
    private javax.swing.JTextField salesNameTextField;
    private javax.swing.JButton savePendingOrderlButton;
    private javax.swing.JComboBox transTypeComboBox;
    // End of variables declaration//GEN-END:variables
    
    
    private void initTodays(){
        Date now = new Date();
        int date = now.getDate();
        int mon = now.getMonth();
        int year = now.getYear()+1900;
        
        planTakenDayComboBox.setSelectedIndex(date-1);
        planTakenMonthComboBox.setSelectedItem(stMonthModel[mon]);
        planTakenYearComboBox.setSelectedItem(String.valueOf(year));
        
        expDayComboBox.setSelectedIndex(date-1);
        expMonthComboBox.setSelectedItem(stMonthModel[mon]);
        expYearComboBox.setSelectedItem(String.valueOf(year));
        
        
    }
    
    String[] stMonthModel = {
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    };
    
    public void initAllFields(){
        
        
        Vector vYearModel = new Vector();
        Date dateNow = new Date();
        
        int thisYear =  dateNow.getYear()+1900;
        int thisDate = dateNow.getDate();
        int thisMonth = dateNow.getMonth();
        for(int i = 0; i < 5; i++){
            vYearModel.add(thisYear+i+"");
        }
        Vector vDateModel = new Vector();
        for(int i = 1; i < 32 ; i++){
            vDateModel.add(i+"");
        }
        planTakenYearComboBox.setModel(new DefaultComboBoxModel(vYearModel));
        planTakenMonthComboBox.setModel(new DefaultComboBoxModel(stMonthModel));
        planTakenDayComboBox.setModel(new DefaultComboBoxModel(vDateModel));
        //        planTakenDayComboBox.setSelectedItem (String.valueOf (thisDate));
        //        planTakenMonthComboBox.setSelectedItem (String.valueOf (thisMonth));
        
        expYearComboBox.setModel(new DefaultComboBoxModel(vYearModel));
        expMonthComboBox.setModel(new DefaultComboBoxModel(stMonthModel));
        expDayComboBox.setModel(new DefaultComboBoxModel(vDateModel));
        //        expMonthComboBox.setSelectedItem (String.valueOf (thisMonth));
        //        expDayComboBox.setSelectedItem (String.valueOf (thisDate));
        initTodays();
        salesNameTextField.setText("");
        Vector vCurModel = new Vector(CashierMainApp.getHashCurrencyType().keySet());
        paymentCurTypeComboBox.setModel(new DefaultComboBoxModel(vCurModel));
        paymentCurTypeComboBox.setSelectedItem(CashierMainApp.getCurrencyCodeUsed());
        custTypeComboBox.setEnabled(false);
        custNameTextField.setText("");
        custNameTextField.setEnabled(false);
        custAddressTextField.setText("");
        custAddressTextField.setEnabled(false);
        custPhoneTextField.setText("");
        custPhoneTextField.setEnabled(false);
        memberCodeTextField.setText("");
        memberCodeTextField.setEnabled(false);
        memberNameTextField.setText("");
        memberNameTextField.setEnabled(false);
        pendiOrderCodeTextField.setText("");
        pendiOrderCodeTextField.setEnabled(false);
        boxOrderCodeTextField.setText("");
        boxOrderCodeTextField.setEnabled(false);
        planTakenDayComboBox.setSelectedIndex(0);
        planTakenDayComboBox.setEnabled(false);
        planTakenMonthComboBox.setSelectedIndex(0);
        planTakenMonthComboBox.setEnabled(false);
        planTakenYearComboBox.setSelectedIndex(0);
        planTakenYearComboBox.setEnabled(false);
        expDayComboBox.setSelectedIndex(0);
        expDayComboBox.setEnabled(false);
        expMonthComboBox.setSelectedIndex(0);
        expMonthComboBox.setEnabled(false);
        expYearComboBox.setSelectedIndex(0);
        expYearComboBox.setEnabled(false);
        dpPaymentTextField.setText("");
        dpPaymentTextField.setEnabled(false);
        transTypeComboBox.setSelectedIndex(0);
        savePendingOrderlButton.setMnemonic(KeyEvent.VK_S);
        savePendingOrderlButton.setEnabled(false);
        
        closeFrameButton.setMnemonic(KeyEvent.VK_X);
        closeFrameButton.setEnabled(true);
        
        newTransButton.setMnemonic(KeyEvent.VK_N);
        newTransButton.setEnabled(true);
        dpIDRTextField.setText("0");
        //salesNameTextField.requestFocusInWindow ();
        //        transTypeComboBox.setEnabled (true);
        //        transTypeComboBox.requestFocusInWindow ();
        cmdChooseTransType();
    }
    
    private PendingOrderModel candidatePendingOrderModel;
    
    private void cmdNewPendingOrder(){
        this.setCandidatePendingOrderModel(null);
        this.setCandidatePendingOrderModel(this.getCandidatePendingOrderModel());
        initAllFields();
    }
    
    /**
     * Getter for property candidatePendingOrderModel.
     * @return Value of property candidatePendingOrderModel.
     */
    public com.dimata.pos.cashier.PendingOrderModel getCandidatePendingOrderModel() {
        if(candidatePendingOrderModel==null){
            candidatePendingOrderModel= new PendingOrderModel();
        }
        return candidatePendingOrderModel;
    }
    
    /**
     * Setter for property candidatePendingOrderModel.
     * @param candidatePendingOrderModel New value of property candidatePendingOrderModel.
     */
    public void setCandidatePendingOrderModel(com.dimata.pos.cashier.PendingOrderModel candidatePendingOrderModel) {
        this.candidatePendingOrderModel = candidatePendingOrderModel;
    }
    
    /**
     * Getter for property hashYearIndex.
     * @return Value of property hashYearIndex.
     */
    public Hashtable getHashYearIndex() {
        if(hashYearIndex==null){
            hashYearIndex = new Hashtable();
            
            Date dateNow = new Date();
            int thisYear = dateNow.getYear();
            Vector yearVector = new Vector();
            for(int i=5;i>=0;i--){
                //yearVector.add (new Integer(1900+thisYear+i));
                hashYearIndex.put(new Integer(i), new Integer(1900+thisYear+i));
            }
        }
        return hashYearIndex;
    }
    
    /**
     * Setter for property hashYearIndex.
     * @param hashYearIndex New value of property hashYearIndex.
     */
    public void setHashYearIndex(Hashtable hashYearIndex) {
        this.hashYearIndex = hashYearIndex;
    }
    
    /**
     * Getter for property transType.
     * @return Value of property transType.
     */
    public int getTransType() {
        return transType;
    }
    
    /**
     * Setter for property transType.
     * @param transType New value of property transType.
     */
    public void setTransType(int transType) {
        this.transType = transType;
    }
    
    public void getGlobalKeyListener(KeyEvent evt){
        switch(evt.getKeyCode()){
            case KeyEvent.VK_F1 :
                if(evt.getSource().equals(salesNameTextField)){
                    cmdSalesSearch();
                }
                break;
            case KeyEvent.VK_F2:
                break;
            case KeyEvent.VK_F3:
                break;
            case KeyEvent.VK_F4:
                break;
            case KeyEvent.VK_F5:
                cmdNewPendingOrder();
                break;
            case KeyEvent.VK_F6:
                break;
            case KeyEvent.VK_F7:
                break;
            case KeyEvent.VK_F8:
                break;
            case KeyEvent.VK_F9:
                break;
            case KeyEvent.VK_F10:
                break;
            case KeyEvent.VK_F11:
                break;
            case KeyEvent.VK_F12:
                cmdSaveAll();
                break;
            case KeyEvent.VK_ESCAPE:
                break;
            case KeyEvent.VK_ENTER:
                break;
            case KeyEvent.VK_DOWN:
                break;
            case KeyEvent.VK_UP:
                break;
            case KeyEvent.VK_LEFT:
                break;
            case KeyEvent.VK_RIGHT:
                break;
            case KeyEvent.VK_BACK_SPACE:
                break;
            case KeyEvent.VK_TAB:
                break;
            default:
                break;
        }
    }
}
