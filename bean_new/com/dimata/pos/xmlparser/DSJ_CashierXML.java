/* Generated by Together */

package com.dimata.pos.xmlparser;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;

public class DSJ_CashierXML {
    private static InputStream inStream;
    private Element currentElement;
    
    private static DSJ_CashierConfig config = new DSJ_CashierConfig();
    
    public DSJ_CashierXML(){
    }
    
    public DSJ_CashierXML(String pathXML){
        setPathConfigFile(pathXML);
        try{
            getData();
        }catch(Exception e){
            System.out.println("Err : "+e.toString());
        }
    }
    
    public static void getData() {
        
        try {
            SAXBuilder builder = new SAXBuilder();
            //get the Configuration Document, with validation
            inStream = new FileInputStream(getPathConfigFile());
            Document doc = builder.build(inStream);
            // get the root element
            Element root = doc.getRootElement();
            if (root == null) {
                System.out.println("NULL ROOT.......................");
                throw new IOException("NULL XML ROOT.......................");
            }
            // get Value classes
            
            List dbElement = root.getChildren("config");
            Iterator iList = dbElement.iterator();
            while (iList.hasNext()){
                Element currElement = (Element)iList.next();
                
                Element currCodeMap = currElement.getChild("currencyCodeMap");
                List currCodeMapList = currCodeMap.getChildren("currencyCodeMapItem");
                DSJ_CashierConfig config = new DSJ_CashierConfig();
                Iterator currCodeMapIter = currCodeMapList.iterator();
                while(currCodeMapIter.hasNext()){
                    Element currCodeMapItem = (Element)currCodeMapIter.next();
                    int currIndex = Integer.parseInt(currCodeMapItem.getChild("currencyCodeMapIndex").getText());
                    
                    String currCode = currCodeMapItem.getChild("currencyCodeMapCode").getText();
                    config.currencyCodeMap.put(new Integer(currIndex+1),currCode);
                }
                
                config.master=currElement.getChild("master").getText();
                config.company=currElement.getChild("company").getText();
                try{
                    config.address=currElement.getChild("address").getText();
                }
                catch(Exception e){
                    System.out.println("err on get address = "+e.toString());
                }
                
                try{
                    config.salesentry=getIntValue(currElement.getChild("salesentry").getText());
                }
                catch(Exception e){
                    System.out.println("err on get salesentry = "+e.toString());
                }
                
                config.nonMemberId=currElement.getChild("nonMemberId").getText();
                try{
                    config.cashierNumber=currElement.getChild("cashierNumber").getText();
                }
                catch(Exception e){
                    System.out.println("err on get cashierNumber = "+e.toString());
                }
                try{
                    config.cashierService=currElement.getChild("cashierService").getText();
                    config.cashierTax=currElement.getChild("cashierTax").getText();
                }
                catch(Exception e){
                    System.out.println("err on get cashierService = "+e.toString());
                }
                config.locationId=currElement.getChild("locationId").getText();
                try{
                    config.giftLocationId=currElement.getChild("giftLocationId").getText();
                }
                catch(Exception e){
                    System.out.println("err on get giftLocationId = "+e.toString());
                }
                
                try{
                    config.statusMsg=getIntValue(currElement.getChild("statusMsg").getText());
                    config.msg1=currElement.getChild("msg1").getText();
                    config.useMsg1=getIntValue(currElement.getChild("useMsg1").getText());
                    config.msg2=currElement.getChild("msg2").getText();
                    config.useMsg2=getIntValue(currElement.getChild("useMsg2").getText());
                    config.msg3=currElement.getChild("msg3").getText();
                    config.useMsg3=getIntValue(currElement.getChild("useMsg3").getText());
                    config.msg4=currElement.getChild("msg4").getText();
                    config.useMsg4=getIntValue(currElement.getChild("useMsg4").getText());
                }
                catch(Exception e){
                    System.out.println("err on get statusMsg = "+e.toString());
                }
                
                try{
                    config.netTransPriority=getIntValue(currElement.getChild("netTransPriority").getText());
                }
                catch(Exception e){
                    System.out.println("err on get netTransPriority = "+e.toString());
                }
                config.language=getIntValue(currElement.getChild("language").getText());
                config.defaultCurrencyCode=currElement.getChild("defaultCurrencyCode").getText();
                config.nonMemberCode=currElement.getChild("nonMemberCode").getText();
                config.memberCode=currElement.getChild("memberCode").getText();
                
                try{
                    config.integrationType= getIntValue(currElement.getChild("integrationType").getText());
                    config.dataPublishMethod= getIntValue(currElement.getChild("dataPublishMethod").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enableCardCost = "+e.toString());
                }
                
                try{
                    config.searchMethode = getIntValue(currElement.getChild("searchMethode").getText());
                }
                catch(Exception e){
                    System.out.println("err on get searchMethode = "+e.toString());
                }
                try{
                    config.enableOpenBill = getIntValue(currElement.getChild("enableOpenBill").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enableOpenBill = "+e.toString());
                }
                try{
                    config.enablePendingOrder = getIntValue(currElement.getChild("enablePendingOrder").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enablePendingOrder = "+e.toString());
                }
                try{
                    config.enableGiftTrans = getIntValue(currElement.getChild("enableGiftTrans").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enableCardCost = "+e.toString());
                }
                try{
                    config.enableCreditPayment = getIntValue(currElement.getChild("enableCreditPayment").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enableCreditPayment = "+e.toString());
                }
                try{
                    config.enableMembership = getIntValue(currElement.getChild("enableMembership").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enableMembership = "+e.toString());
                }
                try{
                    config.enableService = getIntValue(currElement.getChild("enableService").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enableService = "+e.toString());
                }
                try{
                    config.enableTax = getIntValue(currElement.getChild("enableTax").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enableTax = "+e.toString());
                }
                
                try{
                    config.enableCardCost = getIntValue(currElement.getChild("enableCardCost").getText());
                    config.cardCost = currElement.getChild("cardCost").getText();
                    config.paymentTypeCardCost = currElement.getChild("paymentTypeCardCost").getText();
                }
                catch(Exception e){
                    System.out.println("err on get enableCardCost = "+e.toString());
                }
                
                try{
                    config.enableOtherCost = getIntValue(currElement.getChild("enableOtherCost").getText());
                }
                catch(Exception e){
                    System.out.println("err on enableOtherCost = "+e.toString());
                }
                
                try{
                    config.enableContactInput = getIntValue(currElement.getChild("enableContactInput").getText());
                    config.enablePriceMapSelect = getIntValue(currElement.getChild("enablePriceMapSelect").getText());
                    config.priceMapId = currElement.getChild("priceMapId").getText();
                }
                catch(Exception e){
                    System.out.println("err on enableContactInput = "+e.toString());
                }
                
                try{
                    config.printingGap = getIntValue(currElement.getChild("printingGap").getText());
                }
                catch(Exception e){
                    System.out.println("err on printingGap = "+e.toString());
                }
                
                try{
                    config.autoNewSale = getIntValue(currElement.getChild("autoNewSale").getText());
                }
                catch(Exception e){
                    System.out.println("err on autoNewSale = "+e.toString());
                }
                
                try{
                    config.enablePriceCurrSelect = getIntValue(currElement.getChild("enablePriceCurrSelect").getText());
                }
                catch(Exception e){
                    System.out.println("err on get priceCurrSelect = "+e.toString());
                }
                
                try{
                    config.enableRateUpdate = getIntValue(currElement.getChild("enableRateUpdate").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enableRateUpdate = "+e.toString());
                }
                
                try{
                    config.usingBigInvoice = getIntValue(currElement.getChild("usingBigInvoice").getText());
                    if(config.usingBigInvoice==1){
                        try{
                            config.ext1 = currElement.getChild("ext1").getText();
                            config.ext2 = currElement.getChild("ext2").getText();
                            config.ext3 = currElement.getChild("ext3").getText();
                            config.ext4 = currElement.getChild("ext4").getText();
                            config.ext5 = currElement.getChild("ext5").getText();
                            config.ext6 = currElement.getChild("ext6").getText();
                            config.ext7 = currElement.getChild("ext7").getText();
                            config.itemPerPage = getIntValue(currElement.getChild("itemPerPage").getText());
                            
                        }
                        catch(Exception e){
                            System.out.println("err on get big invoice additional attribute = "+e.toString());
                        }
                    }
                }
                catch(Exception e){
                    System.out.println("err on get usingBigInvoice = "+e.toString());
                }
                
                try{
                    config.enableProductImage = getIntValue(currElement.getChild("enableProductImage").getText());
                    try{
                        config.imageEx = currElement.getChild("imageEx").getText();
                    }
                    catch(Exception e){
                        System.out.println("err on get imageEx = "+e.toString());
                    }
                }
                catch(Exception e){
                    System.out.println("err on get enableProductImage = "+e.toString());
                }
                
                try{
                    config.usingProductColor = getIntValue(currElement.getChild("usingProductColor").getText());
                }
                catch(Exception e){
                    System.out.println("err on get usingProductColor = "+e.toString());
                }
                
                try{
                    config.enablePriceEdit = getIntValue(currElement.getChild("enablePriceEdit").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enablePriceEdit = "+e.toString());
                }
                
                try{
                    config.floatingUnit = currElement.getChild("floatingUnit").getText();
                }
                catch(Exception e){
                    System.out.println("err on get floatingUnit = "+e.toString());
                }
                
                try{
                    config.fixUnit = currElement.getChild("fixUnit").getText();
                }
                catch(Exception e){
                    System.out.println("err on get fixUnit = "+e.toString());
                }
                
                try{
                    config.enableLocationSelect = getIntValue(currElement.getChild("enableLocationSelect").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enableLocationSelect = "+e.toString());
                }
                
                try{
                    config.enableHalfInvoice = getIntValue(currElement.getChild("enableHalfInvoice").getText());
                }
                catch(Exception e){
                    System.out.println("err on get enableHalfInvoice = "+e.toString());
                }
                
                listConfig.add(config);
            }
            
        } catch (Exception exc) {
            System.out.println("error on XML config ="+exc.toString());
        }
    }
    
    public static int getIntValue(String number){
        int result=0;
        try{
            int value=Integer.parseInt(number);
            if (value<0)
                result=0;
            else
                result=value;
        }catch (Exception exc) {
            result=0;
            System.out.println("error ="+exc);
        }
        return result;
    }
    
    public static long getLongValue(String number){
        long result=0;
        try{
            long value=Long.parseLong(number);
            if ((value>1)||(value<0))
                result=0;
            else
                result=value;
        }catch (Exception exc) {
            result=0;
            System.out.println("error ="+exc);
        }
        return result;
    }
    public static String getPathConfigFile(){
        return pathConfigFile;
    }
    
    public static void setPathConfigFile(String pathConfigFl){
        pathConfigFile = pathConfigFl;
    }
    
    
    //public static String pathConfigFile = "/usr/ngasi/contexts/ethnicexport/appservers/jakarta-tomcat-5.5x/webapps/pos/WEB-INF/classes/cashconfig.xml";
   public static String pathConfigFile =  System.getProperty("java.home") + System.getProperty("file.separator")+ "dimata"+ System.getProperty("file.separator") + "cashconfig.xml";
    
    private static Vector listConfig = new Vector(1,1);
    
    public static DSJ_CashierConfig getConfig(int index){
        if (listConfig==null){
            listConfig = new Vector(1,1);
        }
        
        if (listConfig.size()<1){
            getData();
        }
        
        if ((index<0)||(index>=listConfig.size())) {
            return null;
        }
        
        return (DSJ_CashierConfig)listConfig.get(index);
    }
    
    public static int getSize() {
        if (listConfig==null){
            listConfig = new Vector(1,1);
        }
        
        if (listConfig.size()<1){
            getData();
        }
        return listConfig.size();
    }
    
    public static void main(String args[]){
        try {
            
            Hashtable hasKey = DSJ_CashierXML.getConfig(0).currencyCodeMap;
            Enumeration enKey = hasKey .keys();
            Enumeration enValue = hasKey .elements();
            System.out.println(hasKey .size());
            while(enKey.hasMoreElements()){
                Integer i = (Integer)enKey.nextElement();
                String code = (String)enValue.nextElement();
                System.out.println(i.intValue());
                System.out.println(code);
                
            }
            
            
            
        }catch (Exception e){}
    }
}
